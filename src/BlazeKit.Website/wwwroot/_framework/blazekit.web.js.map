{"version":3,"file":"blazekit.web.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/global","webpack:///../../../JSInterop/Microsoft.JSInterop.JS/src/dist/Microsoft.JSInterop.js","webpack:///./Rendering/RenderBatch/RenderBatch.ts","webpack:///./Rendering/Events/EventFieldInfo.ts","webpack:///./Rendering/Events/EventTypes.ts","webpack:///./Rendering/JSRootComponents.ts","webpack:///./Rendering/WebRendererInteropMethods.ts","webpack:///./Rendering/Events/EventDelegator.ts","webpack:///./Rendering/LogicalElements.ts","webpack:///./Rendering/ElementReferenceCapture.ts","webpack:///./Rendering/DomSpecialPropertyUtil.ts","webpack:///./Rendering/BrowserRenderer.ts","webpack:///./Services/NavigationManager.ts","webpack:///./Rendering/Renderer.ts","webpack:///./Services/NavigationUtils.ts","webpack:///./DomWrapper.ts","webpack:///./Virtualize.ts","webpack:///./PageTitle.ts","webpack:///./InputFile.ts","webpack:///./NavigationLock.ts","webpack:///./StreamingInterop.ts","webpack:///./GlobalExports.ts","webpack:///./Platform/Logging/Logger.ts","webpack:///./Platform/Logging/Loggers.ts","webpack:///./Services/ComponentDescriptorDiscovery.ts","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/TextMessageFormat.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/ILogger.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/Loggers.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/Utils.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/HandshakeProtocol.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/Errors.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/IHubProtocol.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/HubConnection.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/Subject.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/MessageBuffer.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/DefaultReconnectPolicy.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/HeaderNames.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/HttpClient.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/AccessTokenHttpClient.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/FetchHttpClient.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/DynamicImports.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/XhrHttpClient.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/DefaultHttpClient.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/ITransport.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/AbortController.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/LongPollingTransport.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/ServerSentEventsTransport.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/WebSocketTransport.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/HttpConnection.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/JsonHubProtocol.js","webpack:///../../../SignalR/clients/ts/signalr/dist/esm/HubConnectionBuilder.js","webpack:///./Rendering/WebRendererId.ts","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/node_modules/@msgpack/msgpack/dist.es5+esm/utils/int.mjs","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/node_modules/@msgpack/msgpack/dist.es5+esm/utils/utf8.mjs","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/node_modules/@msgpack/msgpack/dist.es5+esm/DecodeError.mjs","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/node_modules/@msgpack/msgpack/dist.es5+esm/ExtData.mjs","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/node_modules/@msgpack/msgpack/dist.es5+esm/timestamp.mjs","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/node_modules/@msgpack/msgpack/dist.es5+esm/ExtensionCodec.mjs","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/node_modules/@msgpack/msgpack/dist.es5+esm/utils/typedArrays.mjs","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/node_modules/@msgpack/msgpack/dist.es5+esm/Encoder.mjs","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/node_modules/@msgpack/msgpack/dist.es5+esm/utils/prettyByte.mjs","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/node_modules/@msgpack/msgpack/dist.es5+esm/CachedKeyDecoder.mjs","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/node_modules/@msgpack/msgpack/dist.es5+esm/Decoder.mjs","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/dist/esm/BinaryMessageFormat.js","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/dist/esm/MessagePackHubProtocol.js","webpack:///../../../SignalR/clients/ts/signalr-protocol-msgpack/dist/esm/Utils.js","webpack:///./Utf8Decoder.ts","webpack:///./BinaryDecoder.ts","webpack:///./Rendering/RenderBatch/OutOfProcessRenderBatch.ts","webpack:///./Platform/Circuits/RenderQueue.ts","webpack:///./BootErrors.ts","webpack:///./Platform/Circuits/CircuitManager.ts","webpack:///./Platform/Circuits/CircuitStreamingInterop.ts","webpack:///./Platform/Circuits/CircuitStartOptions.ts","webpack:///./Platform/Circuits/DefaultReconnectDisplay.ts","webpack:///./Platform/Circuits/UserSpecifiedDisplay.ts","webpack:///./Platform/Circuits/DefaultReconnectionHandler.ts","webpack:///./JSInitializers/JSInitializers.ts","webpack:///./Boot.Server.Common.ts","webpack:///./Environment.ts","webpack:///./JSInitializers/JSInitializers.Server.ts","webpack:///./Platform/Mono/MonoDebugger.ts","webpack:///./Platform/Mono/MonoPlatform.ts","webpack:///./JSInitializers/JSInitializers.WebAssembly.ts","webpack:///./Rendering/RenderBatch/SharedMemoryRenderBatch.ts","webpack:///./Platform/WebAssemblyComponentAttacher.ts","webpack:///./Boot.WebAssembly.Common.ts","webpack:///./Rendering/DomMerging/AttributeSync.ts","webpack:///./Rendering/DomMerging/DataPermanentElementSync.ts","webpack:///./Rendering/DomMerging/EditScript.ts","webpack:///./Rendering/DomMerging/DomSync.ts","webpack:///./Services/NavigationEnhancement.ts","webpack:///./Rendering/StreamingRendering.ts","webpack:///./Services/WebRootComponentManager.ts","webpack:///./Services/JSEventRegistry.ts","webpack:///./Boot.Web.ts","webpack:///./JSInitializers/JSInitializers.Web.ts","webpack:///./BootCommon.ts"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// This is a single-file self-contained module to avoid the need for a Webpack build\r\nexport var DotNet;\r\n(function (DotNet) {\r\n    const jsonRevivers = [];\r\n    const jsObjectIdKey = \"__jsObjectId\";\r\n    const dotNetObjectRefKey = \"__dotNetObject\";\r\n    const byteArrayRefKey = \"__byte[]\";\r\n    const dotNetStreamRefKey = \"__dotNetStream\";\r\n    const jsStreamReferenceLengthKey = \"__jsStreamReferenceLength\";\r\n    // If undefined, no dispatcher has been attached yet.\r\n    // If null, this means more than one dispatcher was attached, so no default can be determined.\r\n    // Otherwise, there was only one dispatcher registered. We keep track of this instance to keep legacy APIs working.\r\n    let defaultCallDispatcher;\r\n    // Provides access to the \"current\" call dispatcher without having to flow it through nested function calls.\r\n    let currentCallDispatcher;\r\n    class JSObject {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        constructor(_jsObject) {\r\n            this._jsObject = _jsObject;\r\n            this._cachedFunctions = new Map();\r\n        }\r\n        findFunction(identifier) {\r\n            const cachedFunction = this._cachedFunctions.get(identifier);\r\n            if (cachedFunction) {\r\n                return cachedFunction;\r\n            }\r\n            let result = this._jsObject;\r\n            let lastSegmentValue;\r\n            identifier.split(\".\").forEach(segment => {\r\n                if (segment in result) {\r\n                    lastSegmentValue = result;\r\n                    result = result[segment];\r\n                }\r\n                else {\r\n                    throw new Error(`Could not find '${identifier}' ('${segment}' was undefined).`);\r\n                }\r\n            });\r\n            if (result instanceof Function) {\r\n                result = result.bind(lastSegmentValue);\r\n                this._cachedFunctions.set(identifier, result);\r\n                return result;\r\n            }\r\n            throw new Error(`The value '${identifier}' is not a function.`);\r\n        }\r\n        getWrappedObject() {\r\n            return this._jsObject;\r\n        }\r\n    }\r\n    const windowJSObjectId = 0;\r\n    const cachedJSObjectsById = {\r\n        [windowJSObjectId]: new JSObject(window)\r\n    };\r\n    cachedJSObjectsById[windowJSObjectId]._cachedFunctions.set(\"import\", (url) => {\r\n        // In most cases developers will want to resolve dynamic imports relative to the base HREF.\r\n        // However since we're the one calling the import keyword, they would be resolved relative to\r\n        // this framework bundle URL. Fix this by providing an absolute URL.\r\n        if (typeof url === \"string\" && url.startsWith(\"./\")) {\r\n            url = new URL(url.substr(2), document.baseURI).toString();\r\n        }\r\n        return import(/* webpackIgnore: true */ url);\r\n    });\r\n    let nextJsObjectId = 1; // Start at 1 because zero is reserved for \"window\"\r\n    /**\r\n     * Creates a .NET call dispatcher to use for handling invocations between JavaScript and a .NET runtime.\r\n     *\r\n     * @param dotNetCallDispatcher An object that can dispatch calls from JavaScript to a .NET runtime.\r\n     */\r\n    function attachDispatcher(dotNetCallDispatcher) {\r\n        const result = new CallDispatcher(dotNetCallDispatcher);\r\n        if (defaultCallDispatcher === undefined) {\r\n            // This was the first dispatcher registered, so it becomes the default. This exists purely for\r\n            // backwards compatibility.\r\n            defaultCallDispatcher = result;\r\n        }\r\n        else if (defaultCallDispatcher) {\r\n            // There is already a default dispatcher. Now that there are multiple to choose from, there can\r\n            // be no acceptable default, so we nullify the default dispatcher.\r\n            defaultCallDispatcher = null;\r\n        }\r\n        return result;\r\n    }\r\n    DotNet.attachDispatcher = attachDispatcher;\r\n    /**\r\n     * Adds a JSON reviver callback that will be used when parsing arguments received from .NET.\r\n     * @param reviver The reviver to add.\r\n     */\r\n    function attachReviver(reviver) {\r\n        jsonRevivers.push(reviver);\r\n    }\r\n    DotNet.attachReviver = attachReviver;\r\n    /**\r\n     * Invokes the specified .NET public method synchronously. Not all hosting scenarios support\r\n     * synchronous invocation, so if possible use invokeMethodAsync instead.\r\n     *\r\n     * @deprecated Use DotNetObject to invoke instance methods instead.\r\n     * @param assemblyName The short name (without key/version or .dll extension) of the .NET assembly containing the method.\r\n     * @param methodIdentifier The identifier of the method to invoke. The method must have a [JSInvokable] attribute specifying this identifier.\r\n     * @param args Arguments to pass to the method, each of which must be JSON-serializable.\r\n     * @returns The result of the operation.\r\n     */\r\n    function invokeMethod(assemblyName, methodIdentifier, ...args) {\r\n        const dispatcher = getDefaultCallDispatcher();\r\n        return dispatcher.invokeDotNetStaticMethod(assemblyName, methodIdentifier, ...args);\r\n    }\r\n    DotNet.invokeMethod = invokeMethod;\r\n    /**\r\n     * Invokes the specified .NET public method asynchronously.\r\n     *\r\n     * @deprecated Use DotNetObject to invoke instance methods instead.\r\n     * @param assemblyName The short name (without key/version or .dll extension) of the .NET assembly containing the method.\r\n     * @param methodIdentifier The identifier of the method to invoke. The method must have a [JSInvokable] attribute specifying this identifier.\r\n     * @param args Arguments to pass to the method, each of which must be JSON-serializable.\r\n     * @returns A promise representing the result of the operation.\r\n     */\r\n    function invokeMethodAsync(assemblyName, methodIdentifier, ...args) {\r\n        const dispatcher = getDefaultCallDispatcher();\r\n        return dispatcher.invokeDotNetStaticMethodAsync(assemblyName, methodIdentifier, ...args);\r\n    }\r\n    DotNet.invokeMethodAsync = invokeMethodAsync;\r\n    /**\r\n     * Creates a JavaScript object reference that can be passed to .NET via interop calls.\r\n     *\r\n     * @param jsObject The JavaScript Object used to create the JavaScript object reference.\r\n     * @returns The JavaScript object reference (this will be the same instance as the given object).\r\n     * @throws Error if the given value is not an Object.\r\n     */\r\n    function createJSObjectReference(jsObject) {\r\n        if (jsObject && typeof jsObject === \"object\") {\r\n            cachedJSObjectsById[nextJsObjectId] = new JSObject(jsObject);\r\n            const result = {\r\n                [jsObjectIdKey]: nextJsObjectId\r\n            };\r\n            nextJsObjectId++;\r\n            return result;\r\n        }\r\n        throw new Error(`Cannot create a JSObjectReference from the value '${jsObject}'.`);\r\n    }\r\n    DotNet.createJSObjectReference = createJSObjectReference;\r\n    /**\r\n     * Creates a JavaScript data reference that can be passed to .NET via interop calls.\r\n     *\r\n     * @param streamReference The ArrayBufferView or Blob used to create the JavaScript stream reference.\r\n     * @returns The JavaScript data reference (this will be the same instance as the given object).\r\n     * @throws Error if the given value is not an Object or doesn't have a valid byteLength.\r\n     */\r\n    function createJSStreamReference(streamReference) {\r\n        let length = -1;\r\n        // If we're given a raw Array Buffer, we interpret it as a `Uint8Array` as\r\n        // ArrayBuffers' aren't directly readable.\r\n        if (streamReference instanceof ArrayBuffer) {\r\n            streamReference = new Uint8Array(streamReference);\r\n        }\r\n        if (streamReference instanceof Blob) {\r\n            length = streamReference.size;\r\n        }\r\n        else if (streamReference.buffer instanceof ArrayBuffer) {\r\n            if (streamReference.byteLength === undefined) {\r\n                throw new Error(`Cannot create a JSStreamReference from the value '${streamReference}' as it doesn't have a byteLength.`);\r\n            }\r\n            length = streamReference.byteLength;\r\n        }\r\n        else {\r\n            throw new Error(\"Supplied value is not a typed array or blob.\");\r\n        }\r\n        const result = {\r\n            [jsStreamReferenceLengthKey]: length\r\n        };\r\n        try {\r\n            const jsObjectReference = createJSObjectReference(streamReference);\r\n            result[jsObjectIdKey] = jsObjectReference[jsObjectIdKey];\r\n        }\r\n        catch (error) {\r\n            throw new Error(`Cannot create a JSStreamReference from the value '${streamReference}'.`);\r\n        }\r\n        return result;\r\n    }\r\n    DotNet.createJSStreamReference = createJSStreamReference;\r\n    /**\r\n     * Disposes the given JavaScript object reference.\r\n     *\r\n     * @param jsObjectReference The JavaScript Object reference.\r\n     */\r\n    function disposeJSObjectReference(jsObjectReference) {\r\n        const id = jsObjectReference && jsObjectReference[jsObjectIdKey];\r\n        if (typeof id === \"number\") {\r\n            disposeJSObjectReferenceById(id);\r\n        }\r\n    }\r\n    DotNet.disposeJSObjectReference = disposeJSObjectReference;\r\n    function parseJsonWithRevivers(callDispatcher, json) {\r\n        currentCallDispatcher = callDispatcher;\r\n        const result = json ? JSON.parse(json, (key, initialValue) => {\r\n            // Invoke each reviver in order, passing the output from the previous reviver,\r\n            // so that each one gets a chance to transform the value\r\n            return jsonRevivers.reduce((latestValue, reviver) => reviver(key, latestValue), initialValue);\r\n        }) : null;\r\n        currentCallDispatcher = undefined;\r\n        return result;\r\n    }\r\n    function getDefaultCallDispatcher() {\r\n        if (defaultCallDispatcher === undefined) {\r\n            throw new Error(\"No call dispatcher has been set.\");\r\n        }\r\n        else if (defaultCallDispatcher === null) {\r\n            throw new Error(\"There are multiple .NET runtimes present, so a default dispatcher could not be resolved. Use DotNetObject to invoke .NET instance methods.\");\r\n        }\r\n        else {\r\n            return defaultCallDispatcher;\r\n        }\r\n    }\r\n    /**\r\n     * Represents the type of result expected from a JS interop call.\r\n     */\r\n    // eslint-disable-next-line no-shadow\r\n    let JSCallResultType;\r\n    (function (JSCallResultType) {\r\n        JSCallResultType[JSCallResultType[\"Default\"] = 0] = \"Default\";\r\n        JSCallResultType[JSCallResultType[\"JSObjectReference\"] = 1] = \"JSObjectReference\";\r\n        JSCallResultType[JSCallResultType[\"JSStreamReference\"] = 2] = \"JSStreamReference\";\r\n        JSCallResultType[JSCallResultType[\"JSVoidResult\"] = 3] = \"JSVoidResult\";\r\n    })(JSCallResultType = DotNet.JSCallResultType || (DotNet.JSCallResultType = {}));\r\n    class CallDispatcher {\r\n        // eslint-disable-next-line no-empty-function\r\n        constructor(_dotNetCallDispatcher) {\r\n            this._dotNetCallDispatcher = _dotNetCallDispatcher;\r\n            this._byteArraysToBeRevived = new Map();\r\n            this._pendingDotNetToJSStreams = new Map();\r\n            this._pendingAsyncCalls = {};\r\n            this._nextAsyncCallId = 1; // Start at 1 because zero signals \"no response needed\"\r\n        }\r\n        getDotNetCallDispatcher() {\r\n            return this._dotNetCallDispatcher;\r\n        }\r\n        invokeJSFromDotNet(identifier, argsJson, resultType, targetInstanceId) {\r\n            const args = parseJsonWithRevivers(this, argsJson);\r\n            const jsFunction = findJSFunction(identifier, targetInstanceId);\r\n            const returnValue = jsFunction(...(args || []));\r\n            const result = createJSCallResult(returnValue, resultType);\r\n            return result === null || result === undefined\r\n                ? null\r\n                : stringifyArgs(this, result);\r\n        }\r\n        beginInvokeJSFromDotNet(asyncHandle, identifier, argsJson, resultType, targetInstanceId) {\r\n            // Coerce synchronous functions into async ones, plus treat\r\n            // synchronous exceptions the same as async ones\r\n            const promise = new Promise(resolve => {\r\n                const args = parseJsonWithRevivers(this, argsJson);\r\n                const jsFunction = findJSFunction(identifier, targetInstanceId);\r\n                const synchronousResultOrPromise = jsFunction(...(args || []));\r\n                resolve(synchronousResultOrPromise);\r\n            });\r\n            // We only listen for a result if the caller wants to be notified about it\r\n            if (asyncHandle) {\r\n                // On completion, dispatch result back to .NET\r\n                // Not using \"await\" because it codegens a lot of boilerplate\r\n                promise.\r\n                    then(result => stringifyArgs(this, [\r\n                    asyncHandle,\r\n                    true,\r\n                    createJSCallResult(result, resultType)\r\n                ])).\r\n                    then(result => this._dotNetCallDispatcher.endInvokeJSFromDotNet(asyncHandle, true, result), error => this._dotNetCallDispatcher.endInvokeJSFromDotNet(asyncHandle, false, JSON.stringify([\r\n                    asyncHandle,\r\n                    false,\r\n                    formatError(error)\r\n                ])));\r\n            }\r\n        }\r\n        endInvokeDotNetFromJS(asyncCallId, success, resultJsonOrExceptionMessage) {\r\n            const resultOrError = success\r\n                ? parseJsonWithRevivers(this, resultJsonOrExceptionMessage)\r\n                : new Error(resultJsonOrExceptionMessage);\r\n            this.completePendingCall(parseInt(asyncCallId, 10), success, resultOrError);\r\n        }\r\n        invokeDotNetStaticMethod(assemblyName, methodIdentifier, ...args) {\r\n            return this.invokeDotNetMethod(assemblyName, methodIdentifier, null, args);\r\n        }\r\n        invokeDotNetStaticMethodAsync(assemblyName, methodIdentifier, ...args) {\r\n            return this.invokeDotNetMethodAsync(assemblyName, methodIdentifier, null, args);\r\n        }\r\n        invokeDotNetMethod(assemblyName, methodIdentifier, dotNetObjectId, args) {\r\n            if (this._dotNetCallDispatcher.invokeDotNetFromJS) {\r\n                const argsJson = stringifyArgs(this, args);\r\n                const resultJson = this._dotNetCallDispatcher.invokeDotNetFromJS(assemblyName, methodIdentifier, dotNetObjectId, argsJson);\r\n                return resultJson ? parseJsonWithRevivers(this, resultJson) : null;\r\n            }\r\n            throw new Error(\"The current dispatcher does not support synchronous calls from JS to .NET. Use invokeDotNetMethodAsync instead.\");\r\n        }\r\n        invokeDotNetMethodAsync(assemblyName, methodIdentifier, dotNetObjectId, args) {\r\n            if (assemblyName && dotNetObjectId) {\r\n                throw new Error(`For instance method calls, assemblyName should be null. Received '${assemblyName}'.`);\r\n            }\r\n            const asyncCallId = this._nextAsyncCallId++;\r\n            const resultPromise = new Promise((resolve, reject) => {\r\n                this._pendingAsyncCalls[asyncCallId] = { resolve, reject };\r\n            });\r\n            try {\r\n                const argsJson = stringifyArgs(this, args);\r\n                this._dotNetCallDispatcher.beginInvokeDotNetFromJS(asyncCallId, assemblyName, methodIdentifier, dotNetObjectId, argsJson);\r\n            }\r\n            catch (ex) {\r\n                // Synchronous failure\r\n                this.completePendingCall(asyncCallId, false, ex);\r\n            }\r\n            return resultPromise;\r\n        }\r\n        receiveByteArray(id, data) {\r\n            this._byteArraysToBeRevived.set(id, data);\r\n        }\r\n        processByteArray(id) {\r\n            const result = this._byteArraysToBeRevived.get(id);\r\n            if (!result) {\r\n                return null;\r\n            }\r\n            this._byteArraysToBeRevived.delete(id);\r\n            return result;\r\n        }\r\n        supplyDotNetStream(streamId, stream) {\r\n            if (this._pendingDotNetToJSStreams.has(streamId)) {\r\n                // The receiver is already waiting, so we can resolve the promise now and stop tracking this\r\n                const pendingStream = this._pendingDotNetToJSStreams.get(streamId);\r\n                this._pendingDotNetToJSStreams.delete(streamId);\r\n                pendingStream.resolve(stream);\r\n            }\r\n            else {\r\n                // The receiver hasn't started waiting yet, so track a pre-completed entry it can attach to later\r\n                const pendingStream = new PendingStream();\r\n                pendingStream.resolve(stream);\r\n                this._pendingDotNetToJSStreams.set(streamId, pendingStream);\r\n            }\r\n        }\r\n        getDotNetStreamPromise(streamId) {\r\n            // We might already have started receiving the stream, or maybe it will come later.\r\n            // We have to handle both possible orderings, but we can count on it coming eventually because\r\n            // it's not something the developer gets to control, and it would be an error if it doesn't.\r\n            let result;\r\n            if (this._pendingDotNetToJSStreams.has(streamId)) {\r\n                // We've already started receiving the stream, so no longer need to track it as pending\r\n                result = this._pendingDotNetToJSStreams.get(streamId).streamPromise;\r\n                this._pendingDotNetToJSStreams.delete(streamId);\r\n            }\r\n            else {\r\n                // We haven't started receiving it yet, so add an entry to track it as pending\r\n                const pendingStream = new PendingStream();\r\n                this._pendingDotNetToJSStreams.set(streamId, pendingStream);\r\n                result = pendingStream.streamPromise;\r\n            }\r\n            return result;\r\n        }\r\n        completePendingCall(asyncCallId, success, resultOrError) {\r\n            if (!this._pendingAsyncCalls.hasOwnProperty(asyncCallId)) {\r\n                throw new Error(`There is no pending async call with ID ${asyncCallId}.`);\r\n            }\r\n            const asyncCall = this._pendingAsyncCalls[asyncCallId];\r\n            delete this._pendingAsyncCalls[asyncCallId];\r\n            if (success) {\r\n                asyncCall.resolve(resultOrError);\r\n            }\r\n            else {\r\n                asyncCall.reject(resultOrError);\r\n            }\r\n        }\r\n    }\r\n    function formatError(error) {\r\n        if (error instanceof Error) {\r\n            return `${error.message}\\n${error.stack}`;\r\n        }\r\n        return error ? error.toString() : \"null\";\r\n    }\r\n    function findJSFunction(identifier, targetInstanceId) {\r\n        const targetInstance = cachedJSObjectsById[targetInstanceId];\r\n        if (targetInstance) {\r\n            return targetInstance.findFunction(identifier);\r\n        }\r\n        throw new Error(`JS object instance with ID ${targetInstanceId} does not exist (has it been disposed?).`);\r\n    }\r\n    DotNet.findJSFunction = findJSFunction;\r\n    function disposeJSObjectReferenceById(id) {\r\n        delete cachedJSObjectsById[id];\r\n    }\r\n    DotNet.disposeJSObjectReferenceById = disposeJSObjectReferenceById;\r\n    class DotNetObject {\r\n        // eslint-disable-next-line no-empty-function\r\n        constructor(_id, _callDispatcher) {\r\n            this._id = _id;\r\n            this._callDispatcher = _callDispatcher;\r\n        }\r\n        invokeMethod(methodIdentifier, ...args) {\r\n            return this._callDispatcher.invokeDotNetMethod(null, methodIdentifier, this._id, args);\r\n        }\r\n        invokeMethodAsync(methodIdentifier, ...args) {\r\n            return this._callDispatcher.invokeDotNetMethodAsync(null, methodIdentifier, this._id, args);\r\n        }\r\n        dispose() {\r\n            const promise = this._callDispatcher.invokeDotNetMethodAsync(null, \"__Dispose\", this._id, null);\r\n            promise.catch(error => console.error(error));\r\n        }\r\n        serializeAsArg() {\r\n            return { [dotNetObjectRefKey]: this._id };\r\n        }\r\n    }\r\n    DotNet.DotNetObject = DotNetObject;\r\n    attachReviver(function reviveReference(key, value) {\r\n        if (value && typeof value === \"object\") {\r\n            if (value.hasOwnProperty(dotNetObjectRefKey)) {\r\n                return new DotNetObject(value[dotNetObjectRefKey], currentCallDispatcher);\r\n            }\r\n            else if (value.hasOwnProperty(jsObjectIdKey)) {\r\n                const id = value[jsObjectIdKey];\r\n                const jsObject = cachedJSObjectsById[id];\r\n                if (jsObject) {\r\n                    return jsObject.getWrappedObject();\r\n                }\r\n                throw new Error(`JS object instance with Id '${id}' does not exist. It may have been disposed.`);\r\n            }\r\n            else if (value.hasOwnProperty(byteArrayRefKey)) {\r\n                const index = value[byteArrayRefKey];\r\n                const byteArray = currentCallDispatcher.processByteArray(index);\r\n                if (byteArray === undefined) {\r\n                    throw new Error(`Byte array index '${index}' does not exist.`);\r\n                }\r\n                return byteArray;\r\n            }\r\n            else if (value.hasOwnProperty(dotNetStreamRefKey)) {\r\n                const streamId = value[dotNetStreamRefKey];\r\n                const streamPromise = currentCallDispatcher.getDotNetStreamPromise(streamId);\r\n                return new DotNetStream(streamPromise);\r\n            }\r\n        }\r\n        // Unrecognized - let another reviver handle it\r\n        return value;\r\n    });\r\n    class DotNetStream {\r\n        // eslint-disable-next-line no-empty-function\r\n        constructor(_streamPromise) {\r\n            this._streamPromise = _streamPromise;\r\n        }\r\n        /**\r\n         * Supplies a readable stream of data being sent from .NET.\r\n         */\r\n        stream() {\r\n            return this._streamPromise;\r\n        }\r\n        /**\r\n         * Supplies a array buffer of data being sent from .NET.\r\n         * Note there is a JavaScript limit on the size of the ArrayBuffer equal to approximately 2GB.\r\n         */\r\n        async arrayBuffer() {\r\n            return new Response(await this.stream()).arrayBuffer();\r\n        }\r\n    }\r\n    class PendingStream {\r\n        constructor() {\r\n            this.streamPromise = new Promise((resolve, reject) => {\r\n                this.resolve = resolve;\r\n                this.reject = reject;\r\n            });\r\n        }\r\n    }\r\n    function createJSCallResult(returnValue, resultType) {\r\n        switch (resultType) {\r\n            case JSCallResultType.Default:\r\n                return returnValue;\r\n            case JSCallResultType.JSObjectReference:\r\n                return createJSObjectReference(returnValue);\r\n            case JSCallResultType.JSStreamReference:\r\n                return createJSStreamReference(returnValue);\r\n            case JSCallResultType.JSVoidResult:\r\n                return null;\r\n            default:\r\n                throw new Error(`Invalid JS call result type '${resultType}'.`);\r\n        }\r\n    }\r\n    let nextByteArrayIndex = 0;\r\n    function stringifyArgs(callDispatcher, args) {\r\n        nextByteArrayIndex = 0;\r\n        currentCallDispatcher = callDispatcher;\r\n        const result = JSON.stringify(args, argReplacer);\r\n        currentCallDispatcher = undefined;\r\n        return result;\r\n    }\r\n    function argReplacer(key, value) {\r\n        if (value instanceof DotNetObject) {\r\n            return value.serializeAsArg();\r\n        }\r\n        else if (value instanceof Uint8Array) {\r\n            const dotNetCallDispatcher = currentCallDispatcher.getDotNetCallDispatcher();\r\n            dotNetCallDispatcher.sendByteArray(nextByteArrayIndex, value);\r\n            const jsonValue = { [byteArrayRefKey]: nextByteArrayIndex };\r\n            nextByteArrayIndex++;\r\n            return jsonValue;\r\n        }\r\n        return value;\r\n    }\r\n})(DotNet || (DotNet = {}));\r\n//# sourceMappingURL=Microsoft.JSInterop.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport interface RenderBatch {\r\n  updatedComponents(): ArrayRange<RenderTreeDiff>;\r\n  referenceFrames(): ArrayRange<RenderTreeFrame>;\r\n  disposedComponentIds(): ArrayRange<number>;\r\n  disposedEventHandlerIds(): ArrayRange<number>;\r\n\r\n  updatedComponentsEntry(values: ArrayValues<RenderTreeDiff>, index: number): RenderTreeDiff;\r\n  referenceFramesEntry(values: ArrayValues<RenderTreeFrame>, index: number): RenderTreeFrame;\r\n  disposedComponentIdsEntry(values: ArrayValues<number>, index: number): number;\r\n  disposedEventHandlerIdsEntry(values: ArrayValues<number>, index: number): number;\r\n\r\n  diffReader: RenderTreeDiffReader;\r\n  editReader: RenderTreeEditReader;\r\n  frameReader: RenderTreeFrameReader;\r\n  arrayRangeReader: ArrayRangeReader;\r\n  arrayBuilderSegmentReader: ArrayBuilderSegmentReader;\r\n}\r\n\r\nexport interface ArrayRangeReader {\r\n  count<T>(arrayRange: ArrayRange<T>): number;\r\n  values<T>(arrayRange: ArrayRange<T>): ArrayValues<T>;\r\n}\r\n\r\nexport interface ArrayBuilderSegmentReader {\r\n  offset<T>(arrayBuilderSegment: ArrayBuilderSegment<T>): number;\r\n  count<T>(arrayBuilderSegment: ArrayBuilderSegment<T>): number;\r\n  values<T>(arrayBuilderSegment: ArrayBuilderSegment<T>): ArrayValues<T>;\r\n}\r\n\r\nexport interface RenderTreeDiffReader {\r\n  componentId(diff: RenderTreeDiff): number;\r\n  edits(diff: RenderTreeDiff): ArrayBuilderSegment<RenderTreeEdit>;\r\n  editsEntry(values: ArrayValues<RenderTreeEdit>, index: number): RenderTreeEdit;\r\n}\r\n\r\nexport interface RenderTreeEditReader {\r\n  editType(edit: RenderTreeEdit): EditType;\r\n  siblingIndex(edit: RenderTreeEdit): number;\r\n  newTreeIndex(edit: RenderTreeEdit): number;\r\n  moveToSiblingIndex(edit: RenderTreeEdit): number;\r\n  removedAttributeName(edit: RenderTreeEdit): string | null;\r\n}\r\n\r\nexport interface RenderTreeFrameReader {\r\n  frameType(frame: RenderTreeFrame): FrameType;\r\n  subtreeLength(frame: RenderTreeFrame): number;\r\n  elementReferenceCaptureId(frame: RenderTreeFrame): string | null;\r\n  componentId(frame: RenderTreeFrame): number;\r\n  elementName(frame: RenderTreeFrame): string | null;\r\n  textContent(frame: RenderTreeFrame): string | null;\r\n  markupContent(frame: RenderTreeFrame): string;\r\n  attributeName(frame: RenderTreeFrame): string | null;\r\n  attributeValue(frame: RenderTreeFrame): string | null;\r\n  attributeEventHandlerId(frame: RenderTreeFrame): number;\r\n}\r\n\r\nexport interface ArrayRange<T> { ArrayRange__DO_NOT_IMPLEMENT: unknown }\r\nexport interface ArrayBuilderSegment<T> { ArrayBuilderSegment__DO_NOT_IMPLEMENT: unknown }\r\nexport interface ArrayValues<T> { ArrayValues__DO_NOT_IMPLEMENT: unknown }\r\n\r\nexport interface RenderTreeDiff { RenderTreeDiff__DO_NOT_IMPLEMENT: unknown }\r\nexport interface RenderTreeFrame { RenderTreeFrame__DO_NOT_IMPLEMENT: unknown }\r\nexport interface RenderTreeEdit { RenderTreeEdit__DO_NOT_IMPLEMENT: unknown }\r\n\r\nexport enum EditType {\r\n  // The values must be kept in sync with the .NET equivalent in RenderTreeEditType.cs\r\n  prependFrame = 1,\r\n  removeFrame = 2,\r\n  setAttribute = 3,\r\n  removeAttribute = 4,\r\n  updateText = 5,\r\n  stepIn = 6,\r\n  stepOut = 7,\r\n  updateMarkup = 8,\r\n  permutationListEntry = 9,\r\n  permutationListEnd = 10,\r\n}\r\n\r\nexport enum FrameType {\r\n  // The values must be kept in sync with the .NET equivalent in RenderTreeFrameType.cs\r\n  element = 1,\r\n  text = 2,\r\n  attribute = 3,\r\n  component = 4,\r\n  region = 5,\r\n  elementReferenceCapture = 6,\r\n  markup = 8,\r\n  namedEvent = 10,\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport class EventFieldInfo {\r\n  constructor(public componentId: number, public fieldValue: string | boolean) {\r\n  }\r\n\r\n  public static fromEvent(componentId: number, event: Event): EventFieldInfo | null {\r\n    const elem = event.target;\r\n    if (elem instanceof Element) {\r\n      const fieldData = getFormFieldData(elem);\r\n      if (fieldData) {\r\n        return new EventFieldInfo(componentId, fieldData.value);\r\n      }\r\n    }\r\n\r\n    // This event isn't happening on a form field that we can reverse-map back to some incoming attribute\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction getFormFieldData(elem: Element) {\r\n  // The logic in here should be the inverse of the logic in BrowserRenderer's tryApplySpecialProperty.\r\n  // That is, we're doing the reverse mapping, starting from an HTML property and reconstructing which\r\n  // \"special\" attribute would have been mapped to that property.\r\n  if (elem instanceof HTMLInputElement) {\r\n    return (elem.type && elem.type.toLowerCase() === 'checkbox')\r\n      ? { value: elem.checked }\r\n      : { value: elem.value };\r\n  }\r\n\r\n  if (elem instanceof HTMLSelectElement || elem instanceof HTMLTextAreaElement) {\r\n    return { value: elem.value };\r\n  }\r\n\r\n  return null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport interface EventTypeOptions {\r\n  browserEventName?: string;\r\n  createEventArgs?: (event: Event) => unknown;\r\n}\r\n\r\nconst eventTypeRegistry: Map<string, EventTypeOptions> = new Map();\r\nconst browserEventNamesToAliases: Map<string, string[]> = new Map();\r\nconst createBlankEventArgsOptions: EventTypeOptions = { createEventArgs: () => ({}) };\r\n\r\nexport const eventNameAliasRegisteredCallbacks: ((aliasEventName: string, browserEventName) => void)[] = [];\r\n\r\nexport function registerCustomEventType(eventName: string, options: EventTypeOptions): void {\r\n  if (!options) {\r\n    throw new Error('The options parameter is required.');\r\n  }\r\n\r\n  // There can't be more than one registration for the same event name because then we wouldn't\r\n  // know which eventargs data to supply.\r\n  if (eventTypeRegistry.has(eventName)) {\r\n    throw new Error(`The event '${eventName}' is already registered.`);\r\n  }\r\n\r\n  // If applicable, register this as an alias of the given browserEventName\r\n  if (options.browserEventName) {\r\n    const aliasGroup = browserEventNamesToAliases.get(options.browserEventName);\r\n    if (aliasGroup) {\r\n      aliasGroup.push(eventName);\r\n    } else {\r\n      browserEventNamesToAliases.set(options.browserEventName, [eventName]);\r\n    }\r\n\r\n    // For developer convenience, it's allowed to register the custom event type *after*\r\n    // some listeners for it are already present. Once the event name alias gets registered,\r\n    // we have to notify any existing event delegators so they can update their delegated\r\n    // events list.\r\n    eventNameAliasRegisteredCallbacks.forEach(callback => callback(eventName, options.browserEventName));\r\n  }\r\n\r\n  eventTypeRegistry.set(eventName, options);\r\n}\r\n\r\nexport function getEventTypeOptions(eventName: string): EventTypeOptions | undefined {\r\n  return eventTypeRegistry.get(eventName);\r\n}\r\n\r\nexport function getEventNameAliases(eventName: string): string[] | undefined {\r\n  return browserEventNamesToAliases.get(eventName);\r\n}\r\n\r\nexport function getBrowserEventName(possibleAliasEventName: string): string {\r\n  const eventOptions = eventTypeRegistry.get(possibleAliasEventName);\r\n  return eventOptions?.browserEventName || possibleAliasEventName;\r\n}\r\n\r\nfunction registerBuiltInEventType(eventNames: string[], options: EventTypeOptions) {\r\n  eventNames.forEach(eventName => eventTypeRegistry.set(eventName, options));\r\n}\r\n\r\nregisterBuiltInEventType(['input', 'change'], {\r\n  createEventArgs: parseChangeEvent,\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'copy',\r\n  'cut',\r\n  'paste',\r\n], {\r\n  createEventArgs: e => parseClipboardEvent(e as ClipboardEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'drag',\r\n  'dragend',\r\n  'dragenter',\r\n  'dragleave',\r\n  'dragover',\r\n  'dragstart',\r\n  'drop',\r\n], {\r\n  createEventArgs: e => parseDragEvent(e as DragEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'focus',\r\n  'blur',\r\n  'focusin',\r\n  'focusout',\r\n], {\r\n  createEventArgs: e => parseFocusEvent(e as FocusEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'keydown',\r\n  'keyup',\r\n  'keypress',\r\n], {\r\n  createEventArgs: e => parseKeyboardEvent(e as KeyboardEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'contextmenu',\r\n  'click',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mousedown',\r\n  'mouseup',\r\n  'mouseleave',\r\n  'mouseenter',\r\n  'dblclick',\r\n], {\r\n  createEventArgs: e => parseMouseEvent(e as MouseEvent),\r\n});\r\n\r\nregisterBuiltInEventType(['error'], {\r\n  createEventArgs: e => parseErrorEvent(e as ErrorEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'loadstart',\r\n  'timeout',\r\n  'abort',\r\n  'load',\r\n  'loadend',\r\n  'progress',\r\n], {\r\n  createEventArgs: e => parseProgressEvent(e as ProgressEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'touchcancel',\r\n  'touchend',\r\n  'touchmove',\r\n  'touchenter',\r\n  'touchleave',\r\n  'touchstart',\r\n], {\r\n  createEventArgs: e => parseTouchEvent(e as TouchEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'gotpointercapture',\r\n  'lostpointercapture',\r\n  'pointercancel',\r\n  'pointerdown',\r\n  'pointerenter',\r\n  'pointerleave',\r\n  'pointermove',\r\n  'pointerout',\r\n  'pointerover',\r\n  'pointerup',\r\n], {\r\n  createEventArgs: e => parsePointerEvent(e as PointerEvent),\r\n});\r\n\r\nregisterBuiltInEventType(['wheel', 'mousewheel'], {\r\n  createEventArgs: e => parseWheelEvent(e as WheelEvent),\r\n});\r\n\r\nregisterBuiltInEventType(['cancel', 'close', 'toggle'], createBlankEventArgsOptions);\r\n\r\nfunction parseChangeEvent(event: Event): ChangeEventArgs {\r\n  const element = event.target as Element;\r\n  if (isTimeBasedInput(element)) {\r\n    const normalizedValue = normalizeTimeBasedValue(element);\r\n    return { value: normalizedValue };\r\n  } else if (isMultipleSelectInput(element)) {\r\n    const selectElement = element as HTMLSelectElement;\r\n    const selectedValues = Array.from(selectElement.options)\r\n      .filter(option => option.selected)\r\n      .map(option => option.value);\r\n    return { value: selectedValues };\r\n  } else {\r\n    const targetIsCheckbox = isCheckbox(element);\r\n    const newValue = targetIsCheckbox ? !!element['checked'] : element['value'];\r\n    return { value: newValue };\r\n  }\r\n}\r\n\r\nfunction parseWheelEvent(event: WheelEvent): WheelEventArgs {\r\n  return {\r\n    ...parseMouseEvent(event),\r\n    deltaX: event.deltaX,\r\n    deltaY: event.deltaY,\r\n    deltaZ: event.deltaZ,\r\n    deltaMode: event.deltaMode,\r\n  };\r\n}\r\n\r\nfunction parsePointerEvent(event: PointerEvent): PointerEventArgs {\r\n  return {\r\n    ...parseMouseEvent(event),\r\n    pointerId: event.pointerId,\r\n    width: event.width,\r\n    height: event.height,\r\n    pressure: event.pressure,\r\n    tiltX: event.tiltX,\r\n    tiltY: event.tiltY,\r\n    pointerType: event.pointerType,\r\n    isPrimary: event.isPrimary,\r\n  };\r\n}\r\n\r\nfunction parseTouchEvent(event: TouchEvent): TouchEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    touches: parseTouch(event.touches),\r\n    targetTouches: parseTouch(event.targetTouches),\r\n    changedTouches: parseTouch(event.changedTouches),\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseFocusEvent(event: FocusEvent): FocusEventArgs {\r\n  return {\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseClipboardEvent(event: ClipboardEvent): ClipboardEventArgs {\r\n  return {\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseProgressEvent(event: ProgressEvent<EventTarget>): ProgressEventArgs {\r\n  return {\r\n    lengthComputable: event.lengthComputable,\r\n    loaded: event.loaded,\r\n    total: event.total,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseErrorEvent(event: ErrorEvent): ErrorEventArgs {\r\n  return {\r\n    message: event.message,\r\n    filename: event.filename,\r\n    lineno: event.lineno,\r\n    colno: event.colno,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseKeyboardEvent(event: KeyboardEvent): KeyboardEventArgs {\r\n  return {\r\n    key: event.key,\r\n    code: event.code,\r\n    location: event.location,\r\n    repeat: event.repeat,\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseDragEvent(event: DragEvent): DragEventArgs {\r\n  return {\r\n    ...parseMouseEvent(event),\r\n    dataTransfer: event.dataTransfer ? {\r\n      dropEffect: event.dataTransfer.dropEffect,\r\n      effectAllowed: event.dataTransfer.effectAllowed,\r\n      files: Array.from(event.dataTransfer.files).map(f => f.name),\r\n      items: Array.from(event.dataTransfer.items).map(i => ({ kind: i.kind, type: i.type })),\r\n      types: event.dataTransfer.types,\r\n    } : null,\r\n  };\r\n}\r\n\r\nfunction parseTouch(touchList: TouchList): TouchPoint[] {\r\n  const touches: TouchPoint[] = [];\r\n\r\n  for (let i = 0; i < touchList.length; i++) {\r\n    const touch = touchList[i];\r\n    touches.push({\r\n      identifier: touch.identifier,\r\n      clientX: touch.clientX,\r\n      clientY: touch.clientY,\r\n      screenX: touch.screenX,\r\n      screenY: touch.screenY,\r\n      pageX: touch.pageX,\r\n      pageY: touch.pageY,\r\n    });\r\n  }\r\n  return touches;\r\n}\r\n\r\nfunction parseMouseEvent(event: MouseEvent): MouseEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    screenX: event.screenX,\r\n    screenY: event.screenY,\r\n    clientX: event.clientX,\r\n    clientY: event.clientY,\r\n    offsetX: event.offsetX,\r\n    offsetY: event.offsetY,\r\n    pageX: event.pageX,\r\n    pageY: event.pageY,\r\n    movementX: event.movementX,\r\n    movementY: event.movementY,\r\n    button: event.button,\r\n    buttons: event.buttons,\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction isCheckbox(element: Element | null): boolean {\r\n  return !!element && element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\r\n}\r\n\r\nconst timeBasedInputs = [\r\n  'date',\r\n  'datetime-local',\r\n  'month',\r\n  'time',\r\n  'week',\r\n];\r\n\r\nfunction isTimeBasedInput(element: Element): element is HTMLInputElement {\r\n  return timeBasedInputs.indexOf(element.getAttribute('type')!) !== -1;\r\n}\r\n\r\nfunction isMultipleSelectInput(element: Element): element is HTMLSelectElement {\r\n  return element instanceof HTMLSelectElement && element.type === 'select-multiple';\r\n}\r\n\r\nfunction normalizeTimeBasedValue(element: HTMLInputElement): string {\r\n  const value = element.value;\r\n  const type = element.type;\r\n  switch (type) {\r\n    case 'date':\r\n    case 'month':\r\n      return value;\r\n    case 'datetime-local':\r\n      return value.length === 16 ? value + ':00' : value; // Convert yyyy-MM-ddTHH:mm to yyyy-MM-ddTHH:mm:00\r\n    case 'time':\r\n      return value.length === 5 ? value + ':00' : value; // Convert hh:mm to hh:mm:00\r\n    case 'week':\r\n      // For now we are not going to normalize input type week as it is not trivial\r\n      return value;\r\n  }\r\n\r\n  throw new Error(`Invalid element type '${type}'.`);\r\n}\r\n\r\n// The following interfaces must be kept in sync with the EventArgs C# classes\r\n\r\ninterface ChangeEventArgs {\r\n  value: string | boolean | string[];\r\n}\r\n\r\ninterface DragEventArgs {\r\n  detail: number;\r\n  dataTransfer: DataTransferEventArgs | null;\r\n  screenX: number;\r\n  screenY: number;\r\n  clientX: number;\r\n  clientY: number;\r\n  button: number;\r\n  buttons: number;\r\n  ctrlKey: boolean;\r\n  shiftKey: boolean;\r\n  altKey: boolean;\r\n  metaKey: boolean;\r\n}\r\n\r\ninterface DataTransferEventArgs {\r\n  dropEffect: string;\r\n  effectAllowed: string;\r\n  files: readonly string[];\r\n  items: readonly DataTransferItem[];\r\n  types: readonly string[];\r\n}\r\n\r\ninterface DataTransferItem {\r\n  kind: string;\r\n  type: string;\r\n}\r\n\r\ninterface ErrorEventArgs {\r\n  message: string;\r\n  filename: string;\r\n  lineno: number;\r\n  colno: number;\r\n  type: string;\r\n\r\n  // omitting 'error' here since we'd have to serialize it, and it's not clear we will want to\r\n  // do that. https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\r\n}\r\n\r\ninterface KeyboardEventArgs {\r\n  key: string;\r\n  code: string;\r\n  location: number;\r\n  repeat: boolean;\r\n  ctrlKey: boolean;\r\n  shiftKey: boolean;\r\n  altKey: boolean;\r\n  metaKey: boolean;\r\n  type: string;\r\n}\r\n\r\ninterface MouseEventArgs {\r\n  detail: number;\r\n  screenX: number;\r\n  screenY: number;\r\n  clientX: number;\r\n  clientY: number;\r\n  offsetX: number;\r\n  offsetY: number;\r\n  pageX: number;\r\n  pageY: number;\r\n  movementX: number;\r\n  movementY: number;\r\n  button: number;\r\n  buttons: number;\r\n  ctrlKey: boolean;\r\n  shiftKey: boolean;\r\n  altKey: boolean;\r\n  metaKey: boolean;\r\n  type: string;\r\n}\r\n\r\ninterface PointerEventArgs extends MouseEventArgs {\r\n  pointerId: number;\r\n  width: number;\r\n  height: number;\r\n  pressure: number;\r\n  tiltX: number;\r\n  tiltY: number;\r\n  pointerType: string;\r\n  isPrimary: boolean;\r\n}\r\n\r\ninterface ProgressEventArgs {\r\n  lengthComputable: boolean;\r\n  loaded: number;\r\n  total: number;\r\n  type: string;\r\n}\r\n\r\ninterface TouchEventArgs {\r\n  detail: number;\r\n  touches: TouchPoint[];\r\n  targetTouches: TouchPoint[];\r\n  changedTouches: TouchPoint[];\r\n  ctrlKey: boolean;\r\n  shiftKey: boolean;\r\n  altKey: boolean;\r\n  metaKey: boolean;\r\n  type: string;\r\n}\r\n\r\ninterface TouchPoint {\r\n  identifier: number;\r\n  screenX: number;\r\n  screenY: number;\r\n  clientX: number;\r\n  clientY: number;\r\n  pageX: number;\r\n  pageY: number;\r\n}\r\n\r\ninterface WheelEventArgs extends MouseEventArgs {\r\n  deltaX: number;\r\n  deltaY: number;\r\n  deltaZ: number;\r\n  deltaMode: number;\r\n}\r\n\r\ninterface FocusEventArgs {\r\n  type: string;\r\n}\r\n\r\ninterface ClipboardEventArgs {\r\n  type: string;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\n\r\nconst pendingRootComponentContainerNamePrefix = '__bl-dynamic-root:';\r\nconst pendingRootComponentContainers = new Map<string, Element>();\r\nlet nextPendingDynamicRootComponentIdentifier = 0;\r\n\r\ntype ComponentParameters = object | null | undefined;\r\n\r\nlet manager: DotNet.DotNetObject | undefined;\r\nlet jsComponentParametersByIdentifier: JSComponentParametersByIdentifier;\r\n\r\n// These are the public APIs at Blazor.rootComponents.*\r\nexport const RootComponentsFunctions = {\r\n  async add(toElement: Element, componentIdentifier: string, initialParameters: ComponentParameters): Promise<DynamicRootComponent> {\r\n    if (!initialParameters) {\r\n      throw new Error('initialParameters must be an object, even if empty.');\r\n    }\r\n\r\n    // Track the container so we can use it when the component gets attached to the document via a selector\r\n    const containerIdentifier = pendingRootComponentContainerNamePrefix + (++nextPendingDynamicRootComponentIdentifier).toString();\r\n    pendingRootComponentContainers.set(containerIdentifier, toElement);\r\n\r\n    // Instruct .NET to add and render the new root component\r\n    const componentId = await getRequiredManager().invokeMethodAsync<number>('AddRootComponent', componentIdentifier, containerIdentifier);\r\n    const component = new DynamicRootComponent(componentId, jsComponentParametersByIdentifier[componentIdentifier]);\r\n    await component.setParameters(initialParameters);\r\n    return component;\r\n  },\r\n};\r\n\r\nexport function getAndRemovePendingRootComponentContainer(containerIdentifier: string): Element | undefined {\r\n  const container = pendingRootComponentContainers.get(containerIdentifier);\r\n  if (container) {\r\n    pendingRootComponentContainers.delete(containerIdentifier);\r\n    return container;\r\n  }\r\n}\r\n\r\nclass EventCallbackWrapper {\r\n  private _callback: any;\r\n\r\n  private _selfJSObjectReference: unknown;\r\n\r\n  invoke(arg: unknown) {\r\n    return this._callback(arg);\r\n  }\r\n\r\n  setCallback(callback: unknown): void {\r\n    if (!this._selfJSObjectReference) {\r\n      this._selfJSObjectReference = DotNet.createJSObjectReference(this);\r\n    }\r\n\r\n    this._callback = callback;\r\n  }\r\n\r\n  getJSObjectReference() {\r\n    return this._selfJSObjectReference;\r\n  }\r\n\r\n  dispose() {\r\n    if (this._selfJSObjectReference) {\r\n      DotNet.disposeJSObjectReference(this._selfJSObjectReference);\r\n    }\r\n  }\r\n}\r\n\r\nclass DynamicRootComponent {\r\n  private _componentId: number | null;\r\n\r\n  private readonly _jsEventCallbackWrappers = new Map<string, EventCallbackWrapper>();\r\n\r\n  constructor(componentId: number, parameters: JSComponentParameter[]) {\r\n    this._componentId = componentId;\r\n\r\n    for (const parameter of parameters) {\r\n      if (parameter.type === 'eventcallback') {\r\n        this._jsEventCallbackWrappers.set(parameter.name.toLowerCase(), new EventCallbackWrapper());\r\n      }\r\n    }\r\n  }\r\n\r\n  setParameters(parameters: ComponentParameters) {\r\n    const mappedParameters = {};\r\n    const entries = Object.entries(parameters || {});\r\n    const parameterCount = entries.length;\r\n\r\n    for (const [key, value] of entries) {\r\n      const callbackWrapper = this._jsEventCallbackWrappers.get(key.toLowerCase());\r\n\r\n      if (!callbackWrapper || !value) {\r\n        mappedParameters[key] = value;\r\n        continue;\r\n      }\r\n\r\n      callbackWrapper.setCallback(value);\r\n      mappedParameters[key] = callbackWrapper.getJSObjectReference();\r\n    }\r\n\r\n    return getRequiredManager().invokeMethodAsync('SetRootComponentParameters', this._componentId, parameterCount, mappedParameters);\r\n  }\r\n\r\n  async dispose() {\r\n    if (this._componentId !== null) {\r\n      await getRequiredManager().invokeMethodAsync('RemoveRootComponent', this._componentId);\r\n      this._componentId = null; // Ensure it can't be used again\r\n\r\n      for (const jsEventCallbackWrapper of this._jsEventCallbackWrappers.values()) {\r\n        jsEventCallbackWrapper.dispose();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Called by the framework\r\nexport function enableJSRootComponents(\r\n  managerInstance: DotNet.DotNetObject,\r\n  jsComponentParameters: JSComponentParametersByIdentifier,\r\n  jsComponentInitializers: JSComponentIdentifiersByInitializer\r\n): void {\r\n  if (manager) {\r\n    // This will only happen in very nonstandard cases where someone has multiple hosts.\r\n    // It's up to the developer to ensure that only one of them enables dynamic root components.\r\n    throw new Error('Dynamic root components have already been enabled.');\r\n  }\r\n\r\n  manager = managerInstance;\r\n  jsComponentParametersByIdentifier = jsComponentParameters;\r\n\r\n  // Call the registered initializers. This is an arbitrary subset of the JS component types that are registered\r\n  // on the .NET side - just those of them that require some JS-side initialization (e.g., to register them\r\n  // as custom elements).\r\n  for (const [initializerIdentifier, componentIdentifiers] of Object.entries(jsComponentInitializers)) {\r\n    const initializerFunc = DotNet.findJSFunction(initializerIdentifier, 0) as JSComponentInitializerCallback;\r\n    for (const componentIdentifier of componentIdentifiers) {\r\n      const parameters = jsComponentParameters[componentIdentifier];\r\n      initializerFunc(componentIdentifier, parameters);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getRequiredManager(): DotNet.DotNetObject {\r\n  if (!manager) {\r\n    throw new Error('Dynamic root components have not been enabled in this application.');\r\n  }\r\n\r\n  return manager;\r\n}\r\n\r\n// Keep in sync with equivalent in JSComponentConfigurationStore.cs\r\n// These are an internal implementation detail not exposed in the registration APIs.\r\nexport type JSComponentParametersByIdentifier = { [identifier: string]: JSComponentParameter[] };\r\nexport type JSComponentIdentifiersByInitializer = { [initializer: string]: string[] };\r\n\r\n// The following is public API\r\nexport interface JSComponentInitializerCallback {\r\n  (identifier: string, parameters: JSComponentParameter[]): void;\r\n}\r\n\r\nexport interface JSComponentParameter {\r\n  name: string;\r\n  type: JSComponentParameterType;\r\n}\r\n\r\n// JSON-primitive types, plus for those whose .NET equivalent isn't nullable, a '?' to indicate nullability\r\n// This allows custom element authors to coerce attribute strings into the appropriate type\r\nexport type JSComponentParameterType = 'string' | 'boolean' | 'boolean?' | 'number' | 'number?' | 'object' | 'eventcallback';\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\nimport { EventDescriptor } from './Events/EventDelegator';\r\nimport { enableJSRootComponents, JSComponentParametersByIdentifier, JSComponentIdentifiersByInitializer } from './JSRootComponents';\r\n\r\nconst interopMethodsByRenderer = new Map<number, DotNet.DotNetObject>();\r\nconst rendererAttachedListeners: ((browserRendererId: number) => void)[] = [];\r\nconst rendererByIdResolverMap: Map<number, [() => void | undefined, Promise<void> | undefined]> = new Map();\r\n\r\nexport function attachRendererIdResolver(rendererId: number, resolver: () => void | undefined, promise: Promise<void> | undefined) {\r\n  rendererByIdResolverMap.set(rendererId, [resolver, promise]);\r\n}\r\n\r\nexport function getRendererAttachedPromise(rendererId: number): Promise<void> | undefined {\r\n  return rendererByIdResolverMap.get(rendererId)?.[1];\r\n}\r\n\r\nexport function attachWebRendererInterop(\r\n  rendererId: number,\r\n  interopMethods: DotNet.DotNetObject,\r\n  jsComponentParameters?: JSComponentParametersByIdentifier,\r\n  jsComponentInitializers?: JSComponentIdentifiersByInitializer,\r\n): void {\r\n  if (interopMethodsByRenderer.has(rendererId)) {\r\n    throw new Error(`Interop methods are already registered for renderer ${rendererId}`);\r\n  }\r\n\r\n  interopMethodsByRenderer.set(rendererId, interopMethods);\r\n\r\n  if (jsComponentParameters && jsComponentInitializers && Object.keys(jsComponentParameters).length > 0) {\r\n    const manager = getInteropMethods(rendererId);\r\n    enableJSRootComponents(manager, jsComponentParameters, jsComponentInitializers);\r\n  }\r\n\r\n  rendererByIdResolverMap.get(rendererId)?.[0]?.();\r\n\r\n  invokeRendererAttachedListeners(rendererId);\r\n}\r\n\r\nexport function detachWebRendererInterop(rendererId: number): DotNet.DotNetObject {\r\n  const interopMethods = interopMethodsByRenderer.get(rendererId);\r\n  if (!interopMethods) {\r\n    throw new Error(`Interop methods are not registered for renderer ${rendererId}`);\r\n  }\r\n\r\n  interopMethodsByRenderer.delete(rendererId);\r\n  return interopMethods;\r\n}\r\n\r\nexport function isRendererAttached(browserRendererId: number): boolean {\r\n  return interopMethodsByRenderer.has(browserRendererId);\r\n}\r\n\r\nexport function registerRendererAttachedListener(listener: (browserRendererId: number) => void) {\r\n  rendererAttachedListeners.push(listener);\r\n}\r\n\r\nfunction invokeRendererAttachedListeners(browserRendererId: number) {\r\n  for (const listener of rendererAttachedListeners) {\r\n    listener(browserRendererId);\r\n  }\r\n}\r\n\r\nexport function dispatchEvent(browserRendererId: number, eventDescriptor: EventDescriptor, eventArgs: any): void {\r\n  return dispatchEventMiddleware(browserRendererId, eventDescriptor.eventHandlerId, () => {\r\n    const interopMethods = getInteropMethods(browserRendererId);\r\n    return interopMethods.invokeMethodAsync('DispatchEventAsync', eventDescriptor, eventArgs);\r\n  });\r\n}\r\n\r\nexport function updateRootComponents(browserRendererId: number, operationsJson: string): Promise<void> {\r\n  const interopMethods = getInteropMethods(browserRendererId);\r\n  return interopMethods.invokeMethodAsync('UpdateRootComponents', operationsJson);\r\n}\r\n\r\nfunction getInteropMethods(rendererId: number): DotNet.DotNetObject {\r\n  const interopMethods = interopMethodsByRenderer.get(rendererId);\r\n  if (!interopMethods) {\r\n    throw new Error(`No interop methods are registered for renderer ${rendererId}`);\r\n  }\r\n\r\n  return interopMethods;\r\n}\r\n\r\n// On some hosting platforms, we may need to defer the event dispatch, so they can register this middleware to do so\r\ntype DispatchEventMiddlware = (browserRendererId: number, eventHandlerId: number, continuation: () => void) => void;\r\n\r\nlet dispatchEventMiddleware: DispatchEventMiddlware = (browserRendererId, eventHandlerId, continuation) => continuation();\r\nexport function addDispatchEventMiddleware(middleware: DispatchEventMiddlware): void {\r\n  const next = dispatchEventMiddleware;\r\n  dispatchEventMiddleware = (browserRendererId, eventHandlerId, continuation) => {\r\n    middleware(browserRendererId, eventHandlerId, () => next(browserRendererId, eventHandlerId, continuation));\r\n  };\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { EventFieldInfo } from './EventFieldInfo';\r\nimport { eventNameAliasRegisteredCallbacks, getBrowserEventName, getEventNameAliases, getEventTypeOptions } from './EventTypes';\r\nimport { dispatchEvent } from '../WebRendererInteropMethods';\r\n\r\nconst nonBubblingEvents = toLookup([\r\n  'abort',\r\n  'blur',\r\n  'cancel',\r\n  'canplay',\r\n  'canplaythrough',\r\n  'change',\r\n  'close',\r\n  'cuechange',\r\n  'durationchange',\r\n  'emptied',\r\n  'ended',\r\n  'error',\r\n  'focus',\r\n  'load',\r\n  'loadeddata',\r\n  'loadedmetadata',\r\n  'loadend',\r\n  'loadstart',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'pointerenter',\r\n  'pointerleave',\r\n  'pause',\r\n  'play',\r\n  'playing',\r\n  'progress',\r\n  'ratechange',\r\n  'reset',\r\n  'scroll',\r\n  'seeked',\r\n  'seeking',\r\n  'stalled',\r\n  'submit',\r\n  'suspend',\r\n  'timeupdate',\r\n  'toggle',\r\n  'unload',\r\n  'volumechange',\r\n  'waiting',\r\n  'DOMNodeInsertedIntoDocument',\r\n  'DOMNodeRemovedFromDocument',\r\n]);\r\n\r\nconst alwaysPreventDefaultEvents: { [eventType: string]: boolean } = { submit: true };\r\n\r\nconst disableableEventNames = toLookup([\r\n  'click',\r\n  'dblclick',\r\n  'mousedown',\r\n  'mousemove',\r\n  'mouseup',\r\n]);\r\n\r\n// Responsible for adding/removing the eventInfo on an expando property on DOM elements, and\r\n// calling an EventInfoStore that deals with registering/unregistering the underlying delegated\r\n// event listeners as required (and also maps actual events back to the given callback).\r\nexport class EventDelegator {\r\n  private static nextEventDelegatorId = 0;\r\n\r\n  private readonly eventsCollectionKey: string;\r\n\r\n  private readonly afterClickCallbacks: ((event: MouseEvent) => void)[] = [];\r\n\r\n  private eventInfoStore: EventInfoStore;\r\n\r\n  constructor(private browserRendererId: number) {\r\n    const eventDelegatorId = ++EventDelegator.nextEventDelegatorId;\r\n    this.eventsCollectionKey = `_blazorEvents_${eventDelegatorId}`;\r\n    this.eventInfoStore = new EventInfoStore(this.onGlobalEvent.bind(this));\r\n  }\r\n\r\n  public setListener(element: Element, eventName: string, eventHandlerId: number, renderingComponentId: number): void {\r\n    const infoForElement = this.getEventHandlerInfosForElement(element, true)!;\r\n    const existingHandler = infoForElement.getHandler(eventName);\r\n\r\n    if (existingHandler) {\r\n      // We can cheaply update the info on the existing object and don't need any other housekeeping\r\n      // Note that this also takes care of updating the eventHandlerId on the existing handler object\r\n      this.eventInfoStore.update(existingHandler.eventHandlerId, eventHandlerId);\r\n    } else {\r\n      // Go through the whole flow which might involve registering a new global handler\r\n      const newInfo = { element, eventName, eventHandlerId, renderingComponentId };\r\n      this.eventInfoStore.add(newInfo);\r\n      infoForElement.setHandler(eventName, newInfo);\r\n    }\r\n  }\r\n\r\n  public getHandler(eventHandlerId: number): EventHandlerInfo {\r\n    return this.eventInfoStore.get(eventHandlerId);\r\n  }\r\n\r\n  public removeListener(eventHandlerId: number): void {\r\n    // This method gets called whenever the .NET-side code reports that a certain event handler\r\n    // has been disposed. However we will already have disposed the info about that handler if\r\n    // the eventHandlerId for the (element,eventName) pair was replaced during diff application.\r\n    const info = this.eventInfoStore.remove(eventHandlerId);\r\n    if (info) {\r\n      // Looks like this event handler wasn't already disposed\r\n      // Remove the associated data from the DOM element\r\n      const element = info.element;\r\n      const elementEventInfos = this.getEventHandlerInfosForElement(element, false);\r\n      if (elementEventInfos) {\r\n        elementEventInfos.removeHandler(info.eventName);\r\n      }\r\n    }\r\n  }\r\n\r\n  public notifyAfterClick(callback: (event: MouseEvent) => void): void {\r\n    // This is extremely special-case. It's needed so that navigation link click interception\r\n    // can be sure to run *after* our synthetic bubbling process. If a need arises, we can\r\n    // generalise this, but right now it's a purely internal detail.\r\n    this.afterClickCallbacks.push(callback);\r\n    this.eventInfoStore.addGlobalListener('click'); // Ensure we always listen for this\r\n  }\r\n\r\n  public setStopPropagation(element: Element, eventName: string, value: boolean): void {\r\n    const infoForElement = this.getEventHandlerInfosForElement(element, true)!;\r\n    infoForElement.stopPropagation(eventName, value);\r\n  }\r\n\r\n  public setPreventDefault(element: Element, eventName: string, value: boolean): void {\r\n    const infoForElement = this.getEventHandlerInfosForElement(element, true)!;\r\n    infoForElement.preventDefault(eventName, value);\r\n  }\r\n\r\n  private onGlobalEvent(evt: Event) {\r\n    if (!(evt.target instanceof Element)) {\r\n      return;\r\n    }\r\n\r\n    // Always dispatch to any listeners for the original underlying browser event name\r\n    this.dispatchGlobalEventToAllElements(evt.type, evt);\r\n\r\n    // If this event name has aliases, dispatch for those listeners too\r\n    const eventNameAliases = getEventNameAliases(evt.type);\r\n    eventNameAliases && eventNameAliases.forEach(alias =>\r\n      this.dispatchGlobalEventToAllElements(alias, evt));\r\n\r\n    // Special case for navigation interception\r\n    if (evt.type === 'click') {\r\n      this.afterClickCallbacks.forEach(callback => callback(evt as MouseEvent));\r\n    }\r\n  }\r\n\r\n  private dispatchGlobalEventToAllElements(eventName: string, browserEvent: Event) {\r\n    // Note that 'eventName' can be an alias. For example, eventName may be 'click.special'\r\n    // while browserEvent.type may be 'click'.\r\n\r\n    // Use the event's 'path' rather than the chain of parent nodes, since the path gives\r\n    // visibility into shadow roots.\r\n    const path = browserEvent.composedPath();\r\n\r\n    // Scan up the element hierarchy, looking for any matching registered event handlers\r\n    let candidateEventTarget = path.shift();\r\n    let eventArgs: unknown = null; // Populate lazily\r\n    let eventArgsIsPopulated = false;\r\n    const eventIsNonBubbling = Object.prototype.hasOwnProperty.call(nonBubblingEvents, eventName);\r\n    let stopPropagationWasRequested = false;\r\n    while (candidateEventTarget) {\r\n      const candidateElement = candidateEventTarget as Element;\r\n      const handlerInfos = this.getEventHandlerInfosForElement(candidateElement, false);\r\n      if (handlerInfos) {\r\n        const handlerInfo = handlerInfos.getHandler(eventName);\r\n        if (handlerInfo && !eventIsDisabledOnElement(candidateElement, browserEvent.type)) {\r\n          // We are going to raise an event for this element, so prepare info needed by the .NET code\r\n          if (!eventArgsIsPopulated) {\r\n            const eventOptionsIfRegistered = getEventTypeOptions(eventName);\r\n            // For back-compat, if there's no registered createEventArgs, we supply empty event args (not null).\r\n            // But if there is a registered createEventArgs, it can supply anything (including null).\r\n            eventArgs = eventOptionsIfRegistered?.createEventArgs\r\n              ? eventOptionsIfRegistered.createEventArgs(browserEvent)\r\n              : {};\r\n            eventArgsIsPopulated = true;\r\n          }\r\n\r\n          // For certain built-in events, having any .NET handler implicitly means we will prevent\r\n          // the browser's default behavior. This has to be based on the original browser event type name,\r\n          // not any alias (e.g., if you create a custom 'submit' variant, it should still preventDefault).\r\n          if (Object.prototype.hasOwnProperty.call(alwaysPreventDefaultEvents, browserEvent.type)) {\r\n            browserEvent.preventDefault();\r\n          }\r\n\r\n          dispatchEvent(this.browserRendererId, {\r\n            eventHandlerId: handlerInfo.eventHandlerId,\r\n            eventName: eventName,\r\n            eventFieldInfo: EventFieldInfo.fromEvent(handlerInfo.renderingComponentId, browserEvent),\r\n          }, eventArgs);\r\n        }\r\n\r\n        if (handlerInfos.stopPropagation(eventName)) {\r\n          stopPropagationWasRequested = true;\r\n        }\r\n\r\n        if (handlerInfos.preventDefault(eventName)) {\r\n          browserEvent.preventDefault();\r\n        }\r\n      }\r\n\r\n      candidateEventTarget = (eventIsNonBubbling || stopPropagationWasRequested) ? undefined : path.shift();\r\n    }\r\n  }\r\n\r\n  private getEventHandlerInfosForElement(element: Element, createIfNeeded: boolean): EventHandlerInfosForElement | null {\r\n    if (Object.prototype.hasOwnProperty.call(element, this.eventsCollectionKey)) {\r\n      return element[this.eventsCollectionKey];\r\n    } else if (createIfNeeded) {\r\n      return (element[this.eventsCollectionKey] = new EventHandlerInfosForElement());\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n// Responsible for adding and removing the global listener when the number of listeners\r\n// for a given event name changes between zero and nonzero\r\nclass EventInfoStore {\r\n  private infosByEventHandlerId: { [eventHandlerId: number]: EventHandlerInfo } = {};\r\n\r\n  private countByEventName: { [eventName: string]: number } = {};\r\n\r\n  constructor(private globalListener: EventListener) {\r\n    eventNameAliasRegisteredCallbacks.push(this.handleEventNameAliasAdded.bind(this));\r\n  }\r\n\r\n  public add(info: EventHandlerInfo) {\r\n    if (this.infosByEventHandlerId[info.eventHandlerId]) {\r\n      // Should never happen, but we want to know if it does\r\n      throw new Error(`Event ${info.eventHandlerId} is already tracked`);\r\n    }\r\n\r\n    this.infosByEventHandlerId[info.eventHandlerId] = info;\r\n\r\n    this.addGlobalListener(info.eventName);\r\n  }\r\n\r\n  public get(eventHandlerId: number) {\r\n    return this.infosByEventHandlerId[eventHandlerId];\r\n  }\r\n\r\n  public addGlobalListener(eventName: string) {\r\n    // If this event name is an alias, update the global listener for the corresponding browser event\r\n    eventName = getBrowserEventName(eventName);\r\n\r\n    if (Object.prototype.hasOwnProperty.call(this.countByEventName, eventName)) {\r\n      this.countByEventName[eventName]++;\r\n    } else {\r\n      this.countByEventName[eventName] = 1;\r\n\r\n      // To make delegation work with non-bubbling events, register a 'capture' listener.\r\n      // We preserve the non-bubbling behavior by only dispatching such events to the targeted element.\r\n      const useCapture = Object.prototype.hasOwnProperty.call(nonBubblingEvents, eventName);\r\n      document.addEventListener(eventName, this.globalListener, useCapture);\r\n    }\r\n  }\r\n\r\n  public update(oldEventHandlerId: number, newEventHandlerId: number) {\r\n    if (Object.prototype.hasOwnProperty.call(this.infosByEventHandlerId, newEventHandlerId)) {\r\n      // Should never happen, but we want to know if it does\r\n      throw new Error(`Event ${newEventHandlerId} is already tracked`);\r\n    }\r\n\r\n    // Since we're just updating the event handler ID, there's no need to update the global counts\r\n    const info = this.infosByEventHandlerId[oldEventHandlerId];\r\n    delete this.infosByEventHandlerId[oldEventHandlerId];\r\n    info.eventHandlerId = newEventHandlerId;\r\n    this.infosByEventHandlerId[newEventHandlerId] = info;\r\n  }\r\n\r\n  public remove(eventHandlerId: number): EventHandlerInfo {\r\n    const info = this.infosByEventHandlerId[eventHandlerId];\r\n    if (info) {\r\n      delete this.infosByEventHandlerId[eventHandlerId];\r\n\r\n      // If this event name is an alias, update the global listener for the corresponding browser event\r\n      const eventName = getBrowserEventName(info.eventName);\r\n\r\n      if (--this.countByEventName[eventName] === 0) {\r\n        delete this.countByEventName[eventName];\r\n        document.removeEventListener(eventName, this.globalListener);\r\n      }\r\n    }\r\n\r\n    return info;\r\n  }\r\n\r\n  private handleEventNameAliasAdded(aliasEventName, browserEventName) {\r\n    // If an event name alias gets registered later, we need to update the global listener\r\n    // registrations to match. This makes it equivalent to the alias having been registered\r\n    // before the elements with event handlers got rendered.\r\n    if (Object.prototype.hasOwnProperty.call(this.countByEventName, aliasEventName)) {\r\n      // Delete old\r\n      const countByAliasEventName = this.countByEventName[aliasEventName];\r\n      delete this.countByEventName[aliasEventName];\r\n      document.removeEventListener(aliasEventName, this.globalListener);\r\n\r\n      // Ensure corresponding count is added to new\r\n      this.addGlobalListener(browserEventName);\r\n      this.countByEventName[browserEventName] += countByAliasEventName - 1;\r\n    }\r\n  }\r\n}\r\n\r\nclass EventHandlerInfosForElement {\r\n  // Although we *could* track multiple event handlers per (element, eventName) pair\r\n  // (since they have distinct eventHandlerId values), there's no point doing so because\r\n  // our programming model is that you declare event handlers as attributes. An element\r\n  // can only have one attribute with a given name, hence only one event handler with\r\n  // that name at any one time.\r\n  // So to keep things simple, only track one EventHandlerInfo per (element, eventName)\r\n  private handlers: { [eventName: string]: EventHandlerInfo } = {};\r\n\r\n  private preventDefaultFlags: { [eventName: string]: boolean } | null = null;\r\n\r\n  private stopPropagationFlags: { [eventName: string]: boolean } | null = null;\r\n\r\n  public getHandler(eventName: string): EventHandlerInfo | null {\r\n    return Object.prototype.hasOwnProperty.call(this.handlers, eventName) ? this.handlers[eventName] : null;\r\n  }\r\n\r\n  public setHandler(eventName: string, handler: EventHandlerInfo) {\r\n    this.handlers[eventName] = handler;\r\n  }\r\n\r\n  public removeHandler(eventName: string) {\r\n    delete this.handlers[eventName];\r\n  }\r\n\r\n  public preventDefault(eventName: string, setValue?: boolean): boolean {\r\n    if (setValue !== undefined) {\r\n      this.preventDefaultFlags = this.preventDefaultFlags || {};\r\n      this.preventDefaultFlags[eventName] = setValue;\r\n    }\r\n\r\n    return this.preventDefaultFlags ? this.preventDefaultFlags[eventName] : false;\r\n  }\r\n\r\n  public stopPropagation(eventName: string, setValue?: boolean): boolean {\r\n    if (setValue !== undefined) {\r\n      this.stopPropagationFlags = this.stopPropagationFlags || {};\r\n      this.stopPropagationFlags[eventName] = setValue;\r\n    }\r\n\r\n    return this.stopPropagationFlags ? this.stopPropagationFlags[eventName] : false;\r\n  }\r\n}\r\n\r\nexport interface EventDescriptor {\r\n  eventHandlerId: number;\r\n  eventName: string;\r\n  eventFieldInfo: EventFieldInfo | null;\r\n}\r\n\r\ninterface EventHandlerInfo {\r\n  element: Element;\r\n  eventName: string;\r\n  eventHandlerId: number;\r\n\r\n  // The component whose tree includes the event handler attribute frame, *not* necessarily the\r\n  // same component that will be re-rendered after the event is handled (since we re-render the\r\n  // component that supplied the delegate, not the one that rendered the event handler frame)\r\n  renderingComponentId: number;\r\n}\r\n\r\nfunction toLookup(items: string[]): { [key: string]: boolean } {\r\n  const result = {};\r\n  items.forEach(value => {\r\n    result[value] = true;\r\n  });\r\n  return result;\r\n}\r\n\r\nfunction eventIsDisabledOnElement(element: Element, rawBrowserEventName: string): boolean {\r\n  // We want to replicate the normal DOM event behavior that, for 'interactive' elements\r\n  // with a 'disabled' attribute, certain mouse events are suppressed\r\n  return (element instanceof HTMLButtonElement || element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement || element instanceof HTMLSelectElement)\r\n    && Object.prototype.hasOwnProperty.call(disableableEventNames, rawBrowserEventName)\r\n    && element.disabled;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ComponentDescriptor } from '../Services/ComponentDescriptorDiscovery';\r\n\r\n/*\r\n  A LogicalElement plays the same role as an Element instance from the point of view of the\r\n  API consumer. Inserting and removing logical elements updates the browser DOM just the same.\r\n\r\n  The difference is that, unlike regular DOM mutation APIs, the LogicalElement APIs don't use\r\n  the underlying DOM structure as the data storage for the element hierarchy. Instead, the\r\n  LogicalElement APIs take care of tracking hierarchical relationships separately. The point\r\n  of this is to permit a logical tree structure in which parent/child relationships don't\r\n  have to be materialized in terms of DOM element parent/child relationships. And the reason\r\n  why we want that is so that hierarchies of Razor components can be tracked even when those\r\n  components' render output need not be a single literal DOM element.\r\n\r\n  Consumers of the API don't need to know about the implementation, but how it's done is:\r\n  - Each LogicalElement is materialized in the DOM as either:\r\n    - A Node instance, for actual Node instances inserted using 'insertLogicalChild' or\r\n      for Element instances promoted to LogicalElement via 'toLogicalElement'\r\n    - A Comment instance, for 'logical container' instances inserted using 'createAndInsertLogicalContainer'\r\n  - Then, on that instance (i.e., the Node or Comment), we store an array of 'logical children'\r\n    instances, e.g.,\r\n      [firstChild, secondChild, thirdChild, ...]\r\n    ... plus we store a reference to the 'logical parent' (if any)\r\n  - The 'logical children' array means we can look up in O(1):\r\n    - The number of logical children (not currently implemented because not required, but trivial)\r\n    - The logical child at any given index\r\n  - Whenever a logical child is added or removed, we update the parent's array of logical children\r\n*/\r\n\r\nconst logicalChildrenPropname = Symbol();\r\nconst logicalParentPropname = Symbol();\r\nconst logicalRootDescriptorPropname = Symbol();\r\n\r\nexport function toLogicalRootCommentElement(descriptor: ComponentDescriptor): LogicalElement {\r\n  // Now that we support start/end comments as component delimiters we are going to be setting up\r\n  // adding the components rendered output as siblings of the start/end tags (between).\r\n  // For that to work, we need to appropriately configure the parent element to be a logical element\r\n  // with all their children being the child elements.\r\n  // For example, imagine you have\r\n  // <app>\r\n  // <div><p>Static content</p></div>\r\n  // <!-- start component\r\n  // <!-- end component\r\n  // <footer>Some other content</footer>\r\n  // <app>\r\n  // We want the parent element to be something like\r\n  // *app\r\n  // |- *div\r\n  // |- *component\r\n  // |- *footer\r\n  const { start, end } = descriptor;\r\n  const existingDescriptor = start[logicalRootDescriptorPropname];\r\n  if (existingDescriptor) {\r\n    if (existingDescriptor !== descriptor) {\r\n      throw new Error('The start component comment was already associated with another component descriptor.');\r\n    }\r\n    return start as unknown as LogicalElement;\r\n  }\r\n\r\n  const parent = start.parentNode;\r\n  if (!parent) {\r\n    throw new Error(`Comment not connected to the DOM ${start.textContent}`);\r\n  }\r\n\r\n  const parentLogicalElement = toLogicalElement(parent, /* allow existing contents */ true);\r\n  const children = getLogicalChildrenArray(parentLogicalElement);\r\n\r\n  start[logicalParentPropname] = parentLogicalElement;\r\n  start[logicalRootDescriptorPropname] = descriptor;\r\n  const startLogicalElement = toLogicalElement(start);\r\n\r\n  if (end) {\r\n    // We need to make each element between the start and end comments a logical child\r\n    // of the start node.\r\n    const rootCommentChildren = getLogicalChildrenArray(startLogicalElement);\r\n    const startNextChildIndex = Array.prototype.indexOf.call(children, startLogicalElement) + 1;\r\n    let lastMovedChild: LogicalElement | null = null;\r\n\r\n    while (lastMovedChild !== end as unknown as LogicalElement) {\r\n      const childToMove = children.splice(startNextChildIndex, 1)[0];\r\n      if (!childToMove) {\r\n        throw new Error('Could not find the end component comment in the parent logical node list');\r\n      }\r\n      childToMove[logicalParentPropname] = start;\r\n      rootCommentChildren.push(childToMove);\r\n      lastMovedChild = childToMove;\r\n    }\r\n  }\r\n\r\n  return startLogicalElement;\r\n}\r\n\r\nexport function toLogicalElement(element: Node, allowExistingContents?: boolean): LogicalElement {\r\n  if (logicalChildrenPropname in element) { // If it's already a logical element, leave it alone\r\n    return element as unknown as LogicalElement;\r\n  }\r\n\r\n  const childrenArray: LogicalElement[] = [];\r\n\r\n  if (element.childNodes.length > 0) {\r\n    // Normally it's good to assert that the element has started empty, because that's the usual\r\n    // situation and we probably have a bug if it's not. But for the elements that contain prerendered\r\n    // root components, we want to let them keep their content until we replace it.\r\n    if (!allowExistingContents) {\r\n      throw new Error('New logical elements must start empty, or allowExistingContents must be true');\r\n    }\r\n\r\n    element.childNodes.forEach(child => {\r\n      const childLogicalElement = toLogicalElement(child, /* allowExistingContents */ true);\r\n      childLogicalElement[logicalParentPropname] = element;\r\n      childrenArray.push(childLogicalElement);\r\n    });\r\n  }\r\n\r\n  element[logicalChildrenPropname] = childrenArray;\r\n  return element as unknown as LogicalElement;\r\n}\r\n\r\nexport function emptyLogicalElement(element: LogicalElement): void {\r\n  const childrenArray = getLogicalChildrenArray(element);\r\n  while (childrenArray.length) {\r\n    removeLogicalChild(element, 0);\r\n  }\r\n}\r\n\r\nexport function createAndInsertLogicalContainer(parent: LogicalElement, childIndex: number): LogicalElement {\r\n  const containerElement = document.createComment('!');\r\n  insertLogicalChild(containerElement, parent, childIndex);\r\n  return containerElement as unknown as LogicalElement;\r\n}\r\n\r\nexport function insertLogicalChildBefore(child: Node, parent: LogicalElement, before: LogicalElement | null): void {\r\n  const childrenArray = getLogicalChildrenArray(parent);\r\n  let childIndex: number;\r\n  if (before) {\r\n    childIndex = Array.prototype.indexOf.call(childrenArray, before);\r\n    if (childIndex < 0) {\r\n      throw new Error('Could not find logical element in the parent logical node list');\r\n    }\r\n  } else {\r\n    childIndex = childrenArray.length;\r\n  }\r\n  insertLogicalChild(child, parent, childIndex);\r\n}\r\n\r\nexport function insertLogicalChild(child: Node, parent: LogicalElement, childIndex: number): void {\r\n  const childAsLogicalElement = child as unknown as LogicalElement;\r\n\r\n  // If the child is a component comment with logical siblings, its siblings also\r\n  // need to be inserted into the parent node\r\n  let nodeToInsert = child;\r\n  if (isLogicalElement(child)) {\r\n    const lastNodeToInsert = findLastDomNodeInRange(childAsLogicalElement);\r\n    if (lastNodeToInsert !== child) {\r\n      const range = new Range();\r\n      range.setStartBefore(child);\r\n      range.setEndAfter(lastNodeToInsert);\r\n      nodeToInsert = range.extractContents();\r\n    }\r\n  }\r\n\r\n  // If the node we're inserting already has a logical parent,\r\n  // remove it from its sibling array\r\n  const existingLogicalParent = getLogicalParent(childAsLogicalElement);\r\n  if (existingLogicalParent) {\r\n    const existingSiblingArray = getLogicalChildrenArray(existingLogicalParent);\r\n    const existingChildIndex = Array.prototype.indexOf.call(existingSiblingArray, childAsLogicalElement);\r\n    existingSiblingArray.splice(existingChildIndex, 1);\r\n    delete childAsLogicalElement[logicalParentPropname];\r\n  }\r\n\r\n  const newSiblings = getLogicalChildrenArray(parent);\r\n  if (childIndex < newSiblings.length) {\r\n    // Insert\r\n    const nextSibling = newSiblings[childIndex] as any as Node;\r\n    nextSibling.parentNode!.insertBefore(nodeToInsert, nextSibling);\r\n    newSiblings.splice(childIndex, 0, childAsLogicalElement);\r\n  } else {\r\n    // Append\r\n    appendDomNode(nodeToInsert, parent);\r\n    newSiblings.push(childAsLogicalElement);\r\n  }\r\n\r\n  childAsLogicalElement[logicalParentPropname] = parent;\r\n  if (!(logicalChildrenPropname in childAsLogicalElement)) {\r\n    childAsLogicalElement[logicalChildrenPropname] = [];\r\n  }\r\n}\r\n\r\nexport function removeLogicalChild(parent: LogicalElement, childIndex: number): void {\r\n  const childrenArray = getLogicalChildrenArray(parent);\r\n  const childToRemove = childrenArray.splice(childIndex, 1)[0];\r\n\r\n  // If it's a logical container, also remove its descendants\r\n  if (childToRemove instanceof Comment) {\r\n    const grandchildrenArray = getLogicalChildrenArray(childToRemove);\r\n    if (grandchildrenArray) {\r\n      while (grandchildrenArray.length > 0) {\r\n        removeLogicalChild(childToRemove, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Finally, remove the node itself\r\n  const domNodeToRemove = childToRemove as any as Node;\r\n  domNodeToRemove.parentNode!.removeChild(domNodeToRemove);\r\n}\r\n\r\nexport function getLogicalParent(element: LogicalElement): LogicalElement | null {\r\n  return (element[logicalParentPropname] as LogicalElement) || null;\r\n}\r\n\r\nexport function getLogicalChild(parent: LogicalElement, childIndex: number): LogicalElement {\r\n  return getLogicalChildrenArray(parent)[childIndex];\r\n}\r\n\r\nexport function getLogicalRootDescriptor(element: LogicalElement): ComponentDescriptor {\r\n  return element[logicalRootDescriptorPropname] || null;\r\n}\r\n\r\n// SVG elements support `foreignObject` children that can hold arbitrary HTML.\r\n// For these scenarios, the parent SVG and `foreignObject` elements should\r\n// be rendered under the SVG namespace, while the HTML content should be rendered\r\n// under the XHTML namespace. If the correct namespaces are not provided, most\r\n// browsers will fail to render the foreign object content. Here, we ensure that if\r\n// we encounter a `foreignObject` in the SVG, then all its children will be placed\r\n// under the XHTML namespace.\r\nexport function isSvgElement(element: LogicalElement): boolean {\r\n  // Note: This check is intentionally case-sensitive since we expect this element\r\n  // to appear as a child of an SVG element and SVGs are case-sensitive.\r\n  const closestElement = getClosestDomElement(element) as any;\r\n  return closestElement.namespaceURI === 'http://www.w3.org/2000/svg' && closestElement['tagName'] !== 'foreignObject';\r\n}\r\n\r\nexport function getLogicalChildrenArray(element: LogicalElement): LogicalElement[] {\r\n  return element[logicalChildrenPropname] as LogicalElement[];\r\n}\r\n\r\nexport function getLogicalNextSibling(element: LogicalElement): LogicalElement | null {\r\n  const siblings = getLogicalChildrenArray(getLogicalParent(element)!);\r\n  const siblingIndex = Array.prototype.indexOf.call(siblings, element);\r\n  return siblings[siblingIndex + 1] || null;\r\n}\r\n\r\nexport function isLogicalElement(element: Node): boolean {\r\n  return logicalChildrenPropname in element;\r\n}\r\n\r\nexport function permuteLogicalChildren(parent: LogicalElement, permutationList: PermutationListEntry[]): void {\r\n  // The permutationList must represent a valid permutation, i.e., the list of 'from' indices\r\n  // is distinct, and the list of 'to' indices is a permutation of it. The algorithm here\r\n  // relies on that assumption.\r\n\r\n  // Each of the phases here has to happen separately, because each one is designed not to\r\n  // interfere with the indices or DOM entries used by subsequent phases.\r\n\r\n  // Phase 1: track which nodes we will move\r\n  const siblings = getLogicalChildrenArray(parent);\r\n  permutationList.forEach((listEntry: PermutationListEntryWithTrackingData) => {\r\n    listEntry.moveRangeStart = siblings[listEntry.fromSiblingIndex];\r\n    listEntry.moveRangeEnd = findLastDomNodeInRange(listEntry.moveRangeStart);\r\n  });\r\n\r\n  // Phase 2: insert markers\r\n  permutationList.forEach((listEntry: PermutationListEntryWithTrackingData) => {\r\n    const marker = document.createComment('marker');\r\n    listEntry.moveToBeforeMarker = marker;\r\n    const insertBeforeNode = siblings[listEntry.toSiblingIndex + 1] as any as Node;\r\n    if (insertBeforeNode) {\r\n      insertBeforeNode.parentNode!.insertBefore(marker, insertBeforeNode);\r\n    } else {\r\n      appendDomNode(marker, parent);\r\n    }\r\n  });\r\n\r\n  // Phase 3: move descendants & remove markers\r\n  permutationList.forEach((listEntry: PermutationListEntryWithTrackingData) => {\r\n    const insertBefore = listEntry.moveToBeforeMarker!;\r\n    const parentDomNode = insertBefore.parentNode!;\r\n    const elementToMove = listEntry.moveRangeStart!;\r\n    const moveEndNode = listEntry.moveRangeEnd!;\r\n    let nextToMove = elementToMove as unknown as Node | null;\r\n    while (nextToMove) {\r\n      const nextNext = nextToMove.nextSibling;\r\n      parentDomNode.insertBefore(nextToMove, insertBefore);\r\n\r\n      if (nextToMove === moveEndNode) {\r\n        break;\r\n      } else {\r\n        nextToMove = nextNext;\r\n      }\r\n    }\r\n\r\n    parentDomNode.removeChild(insertBefore);\r\n  });\r\n\r\n  // Phase 4: update siblings index\r\n  permutationList.forEach((listEntry: PermutationListEntryWithTrackingData) => {\r\n    siblings[listEntry.toSiblingIndex] = listEntry.moveRangeStart!;\r\n  });\r\n}\r\n\r\nexport function getClosestDomElement(logicalElement: LogicalElement): Element | (LogicalElement & DocumentFragment) {\r\n  if (logicalElement instanceof Element || logicalElement instanceof DocumentFragment) {\r\n    return logicalElement;\r\n  } else if (logicalElement instanceof Comment) {\r\n    return logicalElement.parentNode! as Element;\r\n  } else {\r\n    throw new Error('Not a valid logical element');\r\n  }\r\n}\r\n\r\nexport interface PermutationListEntry {\r\n  fromSiblingIndex: number,\r\n  toSiblingIndex: number,\r\n}\r\n\r\ninterface PermutationListEntryWithTrackingData extends PermutationListEntry {\r\n  // These extra properties are used internally when processing the permutation list\r\n  moveRangeStart?: LogicalElement,\r\n  moveRangeEnd?: Node,\r\n  moveToBeforeMarker?: Node,\r\n}\r\n\r\nfunction appendDomNode(child: Node, parent: LogicalElement) {\r\n  // This function only puts 'child' into the DOM in the right place relative to 'parent'\r\n  // It does not update the logical children array of anything\r\n  if (parent instanceof Element || parent instanceof DocumentFragment) {\r\n    parent.appendChild(child);\r\n  } else if (parent instanceof Comment) {\r\n    const parentLogicalNextSibling = getLogicalNextSibling(parent) as any as Node;\r\n    if (parentLogicalNextSibling) {\r\n      // Since the parent has a logical next-sibling, its appended child goes right before that\r\n      parentLogicalNextSibling.parentNode!.insertBefore(child, parentLogicalNextSibling);\r\n    } else {\r\n      // Since the parent has no logical next-sibling, keep recursing upwards until we find\r\n      // a logical ancestor that does have a next-sibling or is a physical element.\r\n      appendDomNode(child, getLogicalParent(parent)!);\r\n    }\r\n  } else {\r\n    // Should never happen\r\n    throw new Error(`Cannot append node because the parent is not a valid logical element. Parent: ${parent}`);\r\n  }\r\n}\r\n\r\n// Returns the final node (in depth-first evaluation order) that is a descendant of the logical element.\r\n// As such, the entire subtree is between 'element' and 'findLastDomNodeInRange(element)' inclusive.\r\nfunction findLastDomNodeInRange(element: LogicalElement): Node {\r\n  if (element instanceof Element || element instanceof DocumentFragment) {\r\n    return element;\r\n  }\r\n\r\n  const nextSibling = getLogicalNextSibling(element);\r\n  if (nextSibling) {\r\n    // Simple case: not the last logical sibling, so take the node before the next sibling\r\n    return (nextSibling as any as Node).previousSibling!;\r\n  } else {\r\n    // Harder case: there's no logical next-sibling, so recurse upwards until we find\r\n    // a logical ancestor that does have one, or a physical element\r\n    const logicalParent = getLogicalParent(element)!;\r\n    return logicalParent instanceof Element || logicalParent instanceof DocumentFragment\r\n      ? logicalParent.lastChild!\r\n      : findLastDomNodeInRange(logicalParent);\r\n  }\r\n}\r\n\r\n// Nominal type to represent a logical element without needing to allocate any object for instances\r\nexport interface LogicalElement { LogicalElement__DO_NOT_IMPLEMENT: any }\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\n\r\nexport function applyCaptureIdToElement(element: Element, referenceCaptureId: string): void {\r\n  element.setAttribute(getCaptureIdAttributeName(referenceCaptureId), '');\r\n}\r\n\r\nfunction getElementByCaptureId(referenceCaptureId: string) {\r\n  const selector = `[${getCaptureIdAttributeName(referenceCaptureId)}]`;\r\n  return document.querySelector(selector);\r\n}\r\n\r\nfunction getCaptureIdAttributeName(referenceCaptureId: string) {\r\n  return `_bl_${referenceCaptureId}`;\r\n}\r\n\r\n// Support receiving ElementRef instances as args in interop calls\r\nconst elementRefKey = '__internalId'; // Keep in sync with ElementRef.cs\r\nDotNet.attachReviver((key, value) => {\r\n  if (value && typeof value === 'object' && Object.prototype.hasOwnProperty.call(value, elementRefKey) && typeof value[elementRefKey] === 'string') {\r\n    return getElementByCaptureId(value[elementRefKey]);\r\n  } else {\r\n    return value;\r\n  }\r\n});\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Updating the attributes/properties on DOM elements involves a whole range of special cases, because\r\n// depending on the element type, there are special rules for needing to update other properties or\r\n// to only perform the changes in a specific order.\r\n//\r\n// This module provides helpers for doing that, and is shared by the interactive renderer (BrowserRenderer)\r\n// and the SSR DOM merging logic.\r\n\r\nconst deferredValuePropname = '_blazorDeferredValue';\r\n\r\nexport function tryApplySpecialProperty(element: Element, name: string, value: string | null) {\r\n  switch (name) {\r\n    case 'value':\r\n      return tryApplyValueProperty(element, value);\r\n    case 'checked':\r\n      return tryApplyCheckedProperty(element, value);\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nexport function applyAnyDeferredValue(element: Element) {\r\n  // We handle setting 'value' on a <select> in three different ways:\r\n  // [1] When inserting a corresponding <option>, in case you're dynamically adding options.\r\n  //     This is the case below.\r\n  // [2] After we finish inserting the <select>, in case the descendant options are being\r\n  //     added as an opaque markup block rather than individually. This is the other case below.\r\n  // [3] In case the the value of the select and the option value is changed in the same batch.\r\n  //     We just receive an attribute frame and have to set the select value afterwards.\r\n\r\n  // We also defer setting the 'value' property for <input> because certain types of inputs have\r\n  // default attribute values that may incorrectly constain the specified 'value'.\r\n  // For example, range inputs have default 'min' and 'max' attributes that may incorrectly\r\n  // clamp the 'value' property if it is applied before custom 'min' and 'max' attributes.\r\n\r\n  if (element instanceof HTMLOptionElement) {\r\n    // Situation 1\r\n    trySetSelectValueFromOptionElement(element);\r\n  } else if (deferredValuePropname in element) {\r\n    // Situation 2\r\n    const deferredValue = element[deferredValuePropname];\r\n    setDeferredElementValue(element, deferredValue);\r\n  }\r\n}\r\n\r\nfunction tryApplyCheckedProperty(element: Element, value: string | null) {\r\n  // Certain elements have built-in behaviour for their 'checked' property\r\n  if (element.tagName === 'INPUT') {\r\n    (element as any).checked = value !== null;\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction tryApplyValueProperty(element: Element, value: string | null): boolean {\r\n  // Certain elements have built-in behaviour for their 'value' property\r\n  if (value && element.tagName === 'INPUT') {\r\n    value = normalizeInputValue(value, element);\r\n  }\r\n\r\n  switch (element.tagName) {\r\n    case 'INPUT':\r\n    case 'SELECT':\r\n    case 'TEXTAREA': {\r\n      // <select> is special, in that anything we write to .value will be lost if there\r\n      // isn't yet a matching <option>. To maintain the expected behavior no matter the\r\n      // element insertion/update order, preserve the desired value separately so\r\n      // we can recover it when inserting any matching <option> or after inserting an\r\n      // entire markup block of descendants.\r\n\r\n      // We also defer setting the 'value' property for <input> because certain types of inputs have\r\n      // default attribute values that may incorrectly constain the specified 'value'.\r\n      // For example, range inputs have default 'min' and 'max' attributes that may incorrectly\r\n      // clamp the 'value' property if it is applied before custom 'min' and 'max' attributes.\r\n\r\n      if (value && element instanceof HTMLSelectElement && isMultipleSelectElement(element)) {\r\n        value = JSON.parse(value);\r\n      }\r\n\r\n      setDeferredElementValue(element, value);\r\n      element[deferredValuePropname] = value;\r\n\r\n      return true;\r\n    }\r\n    case 'OPTION': {\r\n      if (value || value === '') {\r\n        element.setAttribute('value', value);\r\n      } else {\r\n        element.removeAttribute('value');\r\n      }\r\n\r\n      // See above for why we have this special handling for <select>/<option>\r\n      // Situation 3\r\n      trySetSelectValueFromOptionElement(<HTMLOptionElement>element);\r\n      return true;\r\n    }\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nfunction normalizeInputValue(value: string, element: Element): string {\r\n  // Time inputs (e.g. 'time' and 'datetime-local') misbehave on chromium-based\r\n  // browsers when a time is set that includes a seconds value of '00', most notably\r\n  // when entered from keyboard input. This behavior is not limited to specific\r\n  // 'step' attribute values, so we always remove the trailing seconds value if the\r\n  // time ends in '00'.\r\n  // Similarly, if a time-related element doesn't have any 'step' attribute, browsers\r\n  // treat this as \"round to whole number of minutes\" making it invalid to pass any\r\n  // 'seconds' value, so in that case we strip off the 'seconds' part of the value.\r\n\r\n  switch (element.getAttribute('type')) {\r\n    case 'time':\r\n      return value.length === 8 && (value.endsWith('00') || !element.hasAttribute('step'))\r\n        ? value.substring(0, 5)\r\n        : value;\r\n    case 'datetime-local':\r\n      return value.length === 19 && (value.endsWith('00') || !element.hasAttribute('step'))\r\n        ? value.substring(0, 16)\r\n        : value;\r\n    default:\r\n      return value;\r\n  }\r\n}\r\n\r\nfunction isMultipleSelectElement(element: HTMLSelectElement) {\r\n  return element.type === 'select-multiple';\r\n}\r\n\r\ntype BlazorHtmlSelectElement = HTMLSelectElement & { _blazorDeferredValue?: string };\r\n\r\nfunction setSingleSelectElementValue(element: HTMLSelectElement, value: string | null) {\r\n  // There's no sensible way to represent a select option with value 'null', because\r\n  // (1) HTML attributes can't have null values - the closest equivalent is absence of the attribute\r\n  // (2) When picking an <option> with no 'value' attribute, the browser treats the value as being the\r\n  //     *text content* on that <option> element. Trying to suppress that default behavior would involve\r\n  //     a long chain of special-case hacks, as well as being breaking vs 3.x.\r\n  // So, the most plausible 'null' equivalent is an empty string. It's unfortunate that people can't\r\n  // write <option value=@someNullVariable>, and that we can never distinguish between null and empty\r\n  // string in a bound <select>, but that's a limit in the representational power of HTML.\r\n  element.value = value || '';\r\n}\r\n\r\nfunction setMultipleSelectElementValue(element: HTMLSelectElement, value: string[] | null) {\r\n  value ||= [];\r\n  for (let i = 0; i < element.options.length; i++) {\r\n    element.options[i].selected = value.indexOf(element.options[i].value) !== -1;\r\n  }\r\n}\r\n\r\nfunction setDeferredElementValue(element: Element, value: any) {\r\n  if (element instanceof HTMLSelectElement) {\r\n    if (isMultipleSelectElement(element)) {\r\n      setMultipleSelectElementValue(element, value);\r\n    } else {\r\n      setSingleSelectElementValue(element, value);\r\n    }\r\n  } else {\r\n    (element as any).value = value;\r\n  }\r\n}\r\n\r\nfunction trySetSelectValueFromOptionElement(optionElement: HTMLOptionElement) {\r\n  const selectElem = findClosestAncestorSelectElement(optionElement);\r\n\r\n  if (!isBlazorSelectElement(selectElem)) {\r\n    return false;\r\n  }\r\n\r\n  if (isMultipleSelectElement(selectElem)) {\r\n    optionElement.selected = selectElem._blazorDeferredValue!.indexOf(optionElement.value) !== -1;\r\n  } else {\r\n    if (selectElem._blazorDeferredValue !== optionElement.value) {\r\n      return false;\r\n    }\r\n\r\n    setSingleSelectElementValue(selectElem, optionElement.value);\r\n    delete selectElem._blazorDeferredValue;\r\n  }\r\n\r\n  return true;\r\n\r\n  function isBlazorSelectElement(selectElem: HTMLSelectElement | null) : selectElem is BlazorHtmlSelectElement {\r\n    return !!selectElem && (deferredValuePropname in selectElem);\r\n  }\r\n}\r\n\r\nfunction findClosestAncestorSelectElement(element: Element | null) {\r\n  while (element) {\r\n    if (element instanceof HTMLSelectElement) {\r\n      return element;\r\n    } else {\r\n      element = element.parentElement;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { RenderBatch, ArrayBuilderSegment, RenderTreeEdit, RenderTreeFrame, EditType, FrameType, ArrayValues } from './RenderBatch/RenderBatch';\r\nimport { EventDelegator } from './Events/EventDelegator';\r\nimport { LogicalElement, PermutationListEntry, toLogicalElement, insertLogicalChild, removeLogicalChild, getLogicalParent, getLogicalChild, createAndInsertLogicalContainer, isSvgElement, permuteLogicalChildren, getClosestDomElement, emptyLogicalElement, getLogicalChildrenArray } from './LogicalElements';\r\nimport { applyCaptureIdToElement } from './ElementReferenceCapture';\r\nimport { attachToEventDelegator as attachNavigationManagerToEventDelegator } from '../Services/NavigationManager';\r\nimport { applyAnyDeferredValue, tryApplySpecialProperty } from './DomSpecialPropertyUtil';\r\nconst sharedTemplateElemForParsing = document.createElement('template');\r\nconst sharedSvgElemForParsing = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r\nconst elementsToClearOnRootComponentRender = new Set<LogicalElement>();\r\nconst internalAttributeNamePrefix = '__internal_';\r\nconst eventPreventDefaultAttributeNamePrefix = 'preventDefault_';\r\nconst eventStopPropagationAttributeNamePrefix = 'stopPropagation_';\r\nconst interactiveRootComponentPropname = Symbol();\r\nconst preserveContentOnDisposalPropname = Symbol();\r\n\r\nexport class BrowserRenderer {\r\n  public eventDelegator: EventDelegator;\r\n\r\n  private rootComponentIds = new Set<number>();\r\n\r\n  private childComponentLocations: { [componentId: number]: LogicalElement } = {};\r\n\r\n  public constructor(browserRendererId: number) {\r\n    this.eventDelegator = new EventDelegator(browserRendererId);\r\n\r\n    // We don't yet know whether or not navigation interception will be enabled, but in case it will be,\r\n    // we wire up the navigation manager to the event delegator so it has the option to participate\r\n    // in the synthetic event bubbling process later\r\n    attachNavigationManagerToEventDelegator(this.eventDelegator);\r\n  }\r\n\r\n  public getRootComponentCount(): number {\r\n    return this.rootComponentIds.size;\r\n  }\r\n\r\n  public attachRootComponentToLogicalElement(componentId: number, element: LogicalElement, appendContent: boolean): void {\r\n    if (isInteractiveRootComponentElement(element)) {\r\n      throw new Error(`Root component '${componentId}' could not be attached because its target element is already associated with a root component`);\r\n    }\r\n\r\n    // If we want to append content to the end of the element, we create a new logical child container\r\n    // at the end of the element and treat that as the new parent.\r\n    if (appendContent) {\r\n      const indexAfterLastChild = getLogicalChildrenArray(element).length;\r\n      element = createAndInsertLogicalContainer(element, indexAfterLastChild);\r\n    }\r\n\r\n    markAsInteractiveRootComponentElement(element, true);\r\n    this.attachComponentToElement(componentId, element);\r\n    this.rootComponentIds.add(componentId);\r\n\r\n    elementsToClearOnRootComponentRender.add(element);\r\n  }\r\n\r\n  public updateComponent(batch: RenderBatch, componentId: number, edits: ArrayBuilderSegment<RenderTreeEdit>, referenceFrames: ArrayValues<RenderTreeFrame>): void {\r\n    const element = this.childComponentLocations[componentId];\r\n    if (!element) {\r\n      throw new Error(`No element is currently associated with component ${componentId}`);\r\n    }\r\n\r\n    // On the first render for each root component, clear any existing content (e.g., prerendered)\r\n    if (elementsToClearOnRootComponentRender.delete(element)) {\r\n      emptyLogicalElement(element);\r\n\r\n      if (element instanceof Comment) {\r\n        // We sanitize start comments by removing all the information from it now that we don't need it anymore\r\n        // as it adds noise to the DOM.\r\n        element.textContent = '!';\r\n      }\r\n    }\r\n\r\n    const ownerDocument = getClosestDomElement(element)?.getRootNode() as Document;\r\n    const activeElementBefore = ownerDocument && ownerDocument.activeElement;\r\n\r\n    this.applyEdits(batch, componentId, element, 0, edits, referenceFrames);\r\n\r\n    // Try to restore focus in case it was lost due to an element move\r\n    if ((activeElementBefore instanceof HTMLElement) && ownerDocument && ownerDocument.activeElement !== activeElementBefore) {\r\n      activeElementBefore.focus();\r\n    }\r\n  }\r\n\r\n  public disposeComponent(componentId: number): void {\r\n    if (this.rootComponentIds.delete(componentId)) {\r\n      // When disposing a root component, the container element won't be removed from the DOM (because there's\r\n      // no parent to remove that child), so we empty it to restore it to the state it was in before the root\r\n      // component was added.\r\n      const logicalElement = this.childComponentLocations[componentId];\r\n      markAsInteractiveRootComponentElement(logicalElement, false);\r\n\r\n      if (shouldPreserveContentOnInteractiveComponentDisposal(logicalElement)) {\r\n        elementsToClearOnRootComponentRender.add(logicalElement);\r\n      } else {\r\n        emptyLogicalElement(logicalElement);\r\n      }\r\n    }\r\n\r\n    delete this.childComponentLocations[componentId];\r\n  }\r\n\r\n  public disposeEventHandler(eventHandlerId: number): void {\r\n    this.eventDelegator.removeListener(eventHandlerId);\r\n  }\r\n\r\n  private attachComponentToElement(componentId: number, element: LogicalElement) {\r\n    this.childComponentLocations[componentId] = element;\r\n  }\r\n\r\n  private applyEdits(batch: RenderBatch, componentId: number, parent: LogicalElement, childIndex: number, edits: ArrayBuilderSegment<RenderTreeEdit>, referenceFrames: ArrayValues<RenderTreeFrame>) {\r\n    let currentDepth = 0;\r\n    let childIndexAtCurrentDepth = childIndex;\r\n    let permutationList: PermutationListEntry[] | undefined;\r\n\r\n    const arrayBuilderSegmentReader = batch.arrayBuilderSegmentReader;\r\n    const editReader = batch.editReader;\r\n    const frameReader = batch.frameReader;\r\n    const editsValues = arrayBuilderSegmentReader.values(edits);\r\n    const editsOffset = arrayBuilderSegmentReader.offset(edits);\r\n    const editsLength = arrayBuilderSegmentReader.count(edits);\r\n    const maxEditIndexExcl = editsOffset + editsLength;\r\n\r\n    for (let editIndex = editsOffset; editIndex < maxEditIndexExcl; editIndex++) {\r\n      const edit = batch.diffReader.editsEntry(editsValues, editIndex);\r\n      const editType = editReader.editType(edit);\r\n      switch (editType) {\r\n        case EditType.prependFrame: {\r\n          const frameIndex = editReader.newTreeIndex(edit);\r\n          const frame = batch.referenceFramesEntry(referenceFrames, frameIndex);\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          this.insertFrame(batch, componentId, parent, childIndexAtCurrentDepth + siblingIndex, referenceFrames, frame, frameIndex);\r\n          break;\r\n        }\r\n        case EditType.removeFrame: {\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          removeLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          break;\r\n        }\r\n        case EditType.setAttribute: {\r\n          const frameIndex = editReader.newTreeIndex(edit);\r\n          const frame = batch.referenceFramesEntry(referenceFrames, frameIndex);\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          const element = getLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          if (element instanceof Element) {\r\n            this.applyAttribute(batch, componentId, element, frame);\r\n          } else {\r\n            throw new Error('Cannot set attribute on non-element child');\r\n          }\r\n          break;\r\n        }\r\n        case EditType.removeAttribute: {\r\n          // Note that we don't have to dispose the info we track about event handlers here, because the\r\n          // disposed event handler IDs are delivered separately (in the 'disposedEventHandlerIds' array)\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          const element = getLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          if (element instanceof Element) {\r\n            const attributeName = editReader.removedAttributeName(edit)!;\r\n            this.setOrRemoveAttributeOrProperty(element, attributeName, null);\r\n          } else {\r\n            throw new Error('Cannot remove attribute from non-element child');\r\n          }\r\n          break;\r\n        }\r\n        case EditType.updateText: {\r\n          const frameIndex = editReader.newTreeIndex(edit);\r\n          const frame = batch.referenceFramesEntry(referenceFrames, frameIndex);\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          const textNode = getLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          if (textNode instanceof Text) {\r\n            textNode.textContent = frameReader.textContent(frame);\r\n          } else {\r\n            throw new Error('Cannot set text content on non-text child');\r\n          }\r\n          break;\r\n        }\r\n        case EditType.updateMarkup: {\r\n          const frameIndex = editReader.newTreeIndex(edit);\r\n          const frame = batch.referenceFramesEntry(referenceFrames, frameIndex);\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          removeLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          this.insertMarkup(batch, parent, childIndexAtCurrentDepth + siblingIndex, frame);\r\n          break;\r\n        }\r\n        case EditType.stepIn: {\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          parent = getLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          currentDepth++;\r\n          childIndexAtCurrentDepth = 0;\r\n          break;\r\n        }\r\n        case EditType.stepOut: {\r\n          parent = getLogicalParent(parent)!;\r\n          currentDepth--;\r\n          childIndexAtCurrentDepth = currentDepth === 0 ? childIndex : 0; // The childIndex is only ever nonzero at zero depth\r\n          break;\r\n        }\r\n        case EditType.permutationListEntry: {\r\n          permutationList = permutationList || [];\r\n          permutationList.push({\r\n            fromSiblingIndex: childIndexAtCurrentDepth + editReader.siblingIndex(edit),\r\n            toSiblingIndex: childIndexAtCurrentDepth + editReader.moveToSiblingIndex(edit),\r\n          });\r\n          break;\r\n        }\r\n        case EditType.permutationListEnd: {\r\n          permuteLogicalChildren(parent, permutationList!);\r\n          permutationList = undefined;\r\n          break;\r\n        }\r\n        default: {\r\n          const unknownType: never = editType; // Compile-time verification that the switch was exhaustive\r\n          throw new Error(`Unknown edit type: ${unknownType}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private insertFrame(batch: RenderBatch, componentId: number, parent: LogicalElement, childIndex: number, frames: ArrayValues<RenderTreeFrame>, frame: RenderTreeFrame, frameIndex: number): number {\r\n    const frameReader = batch.frameReader;\r\n    const frameType = frameReader.frameType(frame);\r\n    switch (frameType) {\r\n      case FrameType.element:\r\n        this.insertElement(batch, componentId, parent, childIndex, frames, frame, frameIndex);\r\n        return 1;\r\n      case FrameType.text:\r\n        this.insertText(batch, parent, childIndex, frame);\r\n        return 1;\r\n      case FrameType.attribute:\r\n        throw new Error('Attribute frames should only be present as leading children of element frames.');\r\n      case FrameType.component:\r\n        this.insertComponent(batch, parent, childIndex, frame);\r\n        return 1;\r\n      case FrameType.region:\r\n        return this.insertFrameRange(batch, componentId, parent, childIndex, frames, frameIndex + 1, frameIndex + frameReader.subtreeLength(frame));\r\n      case FrameType.elementReferenceCapture:\r\n        if (parent instanceof Element) {\r\n          applyCaptureIdToElement(parent, frameReader.elementReferenceCaptureId(frame)!);\r\n          return 0; // A \"capture\" is a child in the diff, but has no node in the DOM\r\n        } else {\r\n          throw new Error('Reference capture frames can only be children of element frames.');\r\n        }\r\n      case FrameType.markup:\r\n        this.insertMarkup(batch, parent, childIndex, frame);\r\n        return 1;\r\n      case FrameType.namedEvent: // Not used on the JS side\r\n        return 0;\r\n      default: {\r\n        const unknownType: never = frameType; // Compile-time verification that the switch was exhaustive\r\n        throw new Error(`Unknown frame type: ${unknownType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private insertElement(batch: RenderBatch, componentId: number, parent: LogicalElement, childIndex: number, frames: ArrayValues<RenderTreeFrame>, frame: RenderTreeFrame, frameIndex: number) {\r\n    const frameReader = batch.frameReader;\r\n    const tagName = frameReader.elementName(frame)!;\r\n\r\n    const newDomElementRaw = (tagName === 'svg' || isSvgElement(parent)) ?\r\n      document.createElementNS('http://www.w3.org/2000/svg', tagName) :\r\n      document.createElement(tagName);\r\n    const newElement = toLogicalElement(newDomElementRaw);\r\n\r\n    let inserted = false;\r\n\r\n    // Apply attributes\r\n    const descendantsEndIndexExcl = frameIndex + frameReader.subtreeLength(frame);\r\n    for (let descendantIndex = frameIndex + 1; descendantIndex < descendantsEndIndexExcl; descendantIndex++) {\r\n      const descendantFrame = batch.referenceFramesEntry(frames, descendantIndex);\r\n      if (frameReader.frameType(descendantFrame) === FrameType.attribute) {\r\n        this.applyAttribute(batch, componentId, newDomElementRaw, descendantFrame);\r\n      } else {\r\n        insertLogicalChild(newDomElementRaw, parent, childIndex);\r\n        inserted = true;\r\n        // As soon as we see a non-attribute child, all the subsequent child frames are\r\n        // not attributes, so bail out and insert the remnants recursively\r\n        this.insertFrameRange(batch, componentId, newElement, 0, frames, descendantIndex, descendantsEndIndexExcl);\r\n        break;\r\n      }\r\n    }\r\n\r\n    // this element did not have any children, so it's not inserted yet.\r\n    if (!inserted) {\r\n      insertLogicalChild(newDomElementRaw, parent, childIndex);\r\n    }\r\n\r\n    applyAnyDeferredValue(newDomElementRaw);\r\n  }\r\n\r\n  private insertComponent(batch: RenderBatch, parent: LogicalElement, childIndex: number, frame: RenderTreeFrame) {\r\n    const containerElement = createAndInsertLogicalContainer(parent, childIndex);\r\n\r\n    // All we have to do is associate the child component ID with its location. We don't actually\r\n    // do any rendering here, because the diff for the child will appear later in the render batch.\r\n    const childComponentId = batch.frameReader.componentId(frame);\r\n    this.attachComponentToElement(childComponentId, containerElement);\r\n  }\r\n\r\n  private insertText(batch: RenderBatch, parent: LogicalElement, childIndex: number, textFrame: RenderTreeFrame) {\r\n    const textContent = batch.frameReader.textContent(textFrame)!;\r\n    const newTextNode = document.createTextNode(textContent);\r\n    insertLogicalChild(newTextNode, parent, childIndex);\r\n  }\r\n\r\n  private insertMarkup(batch: RenderBatch, parent: LogicalElement, childIndex: number, markupFrame: RenderTreeFrame) {\r\n    const markupContainer = createAndInsertLogicalContainer(parent, childIndex);\r\n\r\n    const markupContent = batch.frameReader.markupContent(markupFrame);\r\n    const parsedMarkup = parseMarkup(markupContent, isSvgElement(parent));\r\n    let logicalSiblingIndex = 0;\r\n    while (parsedMarkup.firstChild) {\r\n      insertLogicalChild(parsedMarkup.firstChild, markupContainer, logicalSiblingIndex++);\r\n    }\r\n  }\r\n\r\n  private applyAttribute(batch: RenderBatch, componentId: number, toDomElement: Element, attributeFrame: RenderTreeFrame) {\r\n    const frameReader = batch.frameReader;\r\n    const attributeName = frameReader.attributeName(attributeFrame)!;\r\n    const eventHandlerId = frameReader.attributeEventHandlerId(attributeFrame);\r\n\r\n    if (eventHandlerId) {\r\n      const eventName = stripOnPrefix(attributeName);\r\n      this.eventDelegator.setListener(toDomElement, eventName, eventHandlerId, componentId);\r\n      return;\r\n    }\r\n\r\n    const value = frameReader.attributeValue(attributeFrame);\r\n    this.setOrRemoveAttributeOrProperty(toDomElement, attributeName, value);\r\n  }\r\n\r\n  private insertFrameRange(batch: RenderBatch, componentId: number, parent: LogicalElement, childIndex: number, frames: ArrayValues<RenderTreeFrame>, startIndex: number, endIndexExcl: number): number {\r\n    const origChildIndex = childIndex;\r\n    for (let index = startIndex; index < endIndexExcl; index++) {\r\n      const frame = batch.referenceFramesEntry(frames, index);\r\n      const numChildrenInserted = this.insertFrame(batch, componentId, parent, childIndex, frames, frame, index);\r\n      childIndex += numChildrenInserted;\r\n\r\n      // Skip over any descendants, since they are already dealt with recursively\r\n      index += countDescendantFrames(batch, frame);\r\n    }\r\n\r\n    return (childIndex - origChildIndex); // Total number of children inserted\r\n  }\r\n\r\n  private setOrRemoveAttributeOrProperty(element: Element, name: string, valueOrNullToRemove: string | null) {\r\n    // First see if we have special handling for this attribute\r\n    if (!tryApplySpecialProperty(element, name, valueOrNullToRemove)) {\r\n      // If not, maybe it's one of our internal attributes\r\n      if (name.startsWith(internalAttributeNamePrefix)) {\r\n        this.applyInternalAttribute(element, name.substring(internalAttributeNamePrefix.length), valueOrNullToRemove);\r\n      } else {\r\n        // If not, treat it as a regular DOM attribute\r\n        if (valueOrNullToRemove !== null) {\r\n          element.setAttribute(name, valueOrNullToRemove);\r\n        } else {\r\n          element.removeAttribute(name);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private applyInternalAttribute(element: Element, internalAttributeName: string, value: string | null) {\r\n    if (internalAttributeName.startsWith(eventStopPropagationAttributeNamePrefix)) {\r\n      // Stop propagation\r\n      const eventName = stripOnPrefix(internalAttributeName.substring(eventStopPropagationAttributeNamePrefix.length));\r\n      this.eventDelegator.setStopPropagation(element, eventName, value !== null);\r\n    } else if (internalAttributeName.startsWith(eventPreventDefaultAttributeNamePrefix)) {\r\n      // Prevent default\r\n      const eventName = stripOnPrefix(internalAttributeName.substring(eventPreventDefaultAttributeNamePrefix.length));\r\n      this.eventDelegator.setPreventDefault(element, eventName, value !== null);\r\n    } else {\r\n      // The prefix makes this attribute name reserved, so any other usage is disallowed\r\n      throw new Error(`Unsupported internal attribute '${internalAttributeName}'`);\r\n    }\r\n  }\r\n}\r\n\r\nfunction markAsInteractiveRootComponentElement(element: LogicalElement, isInteractive: boolean) {\r\n  element[interactiveRootComponentPropname] = isInteractive;\r\n}\r\n\r\nexport function isInteractiveRootComponentElement(element: LogicalElement): boolean | undefined {\r\n  return element[interactiveRootComponentPropname];\r\n}\r\n\r\nexport function setShouldPreserveContentOnInteractiveComponentDisposal(element: LogicalElement, shouldPreserve: boolean) {\r\n  element[preserveContentOnDisposalPropname] = shouldPreserve;\r\n}\r\n\r\nfunction shouldPreserveContentOnInteractiveComponentDisposal(element: LogicalElement): boolean {\r\n  return element[preserveContentOnDisposalPropname] === true;\r\n}\r\n\r\nexport interface ComponentDescriptor {\r\n  start: Node;\r\n  end: Node;\r\n}\r\n\r\nfunction parseMarkup(markup: string, isSvg: boolean) {\r\n  if (isSvg) {\r\n    sharedSvgElemForParsing.innerHTML = markup || ' ';\r\n    return sharedSvgElemForParsing;\r\n  } else {\r\n    sharedTemplateElemForParsing.innerHTML = markup || ' ';\r\n\r\n    // Since this is a markup string, we want to honor the developer's intent to\r\n    // evaluate any scripts it may contain. Scripts parsed from an innerHTML assignment\r\n    // won't be executable by default (https://stackoverflow.com/questions/1197575/can-scripts-be-inserted-with-innerhtml)\r\n    // but that's inconsistent with anything constructed from a sequence like:\r\n    // - OpenElement(\"script\")\r\n    // - AddContent(js) or AddMarkupContent(js)\r\n    // - CloseElement()\r\n    // It doesn't make sense to have such an inconsistency in Blazor's interactive\r\n    // renderer, and for back-compat with pre-.NET 8 code (when the Razor compiler always\r\n    // used OpenElement like above), as well as consistency with static SSR, we need to make it work.\r\n    sharedTemplateElemForParsing.content.querySelectorAll('script').forEach(oldScriptElem => {\r\n      const newScriptElem = document.createElement('script');\r\n      newScriptElem.textContent = oldScriptElem.textContent;\r\n\r\n      oldScriptElem.getAttributeNames().forEach(attribName => {\r\n        newScriptElem.setAttribute(attribName, oldScriptElem.getAttribute(attribName)!);\r\n      });\r\n\r\n      oldScriptElem.parentNode!.replaceChild(newScriptElem, oldScriptElem);\r\n    });\r\n\r\n    return sharedTemplateElemForParsing.content;\r\n  }\r\n}\r\n\r\nfunction countDescendantFrames(batch: RenderBatch, frame: RenderTreeFrame): number {\r\n  const frameReader = batch.frameReader;\r\n  switch (frameReader.frameType(frame)) {\r\n    // The following frame types have a subtree length. Other frames may use that memory slot\r\n    // to mean something else, so we must not read it. We should consider having nominal subtypes\r\n    // of RenderTreeFramePointer that prevent access to non-applicable fields.\r\n    case FrameType.component:\r\n    case FrameType.element:\r\n    case FrameType.region:\r\n      return frameReader.subtreeLength(frame) - 1;\r\n    default:\r\n      return 0;\r\n  }\r\n}\r\n\r\nfunction stripOnPrefix(attributeName: string) {\r\n  if (attributeName.startsWith('on')) {\r\n    return attributeName.substring(2);\r\n  }\r\n\r\n  throw new Error(`Attribute should be an event name, but doesn't start with 'on'. Value: '${attributeName}'`);\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport '@microsoft/dotnet-js-interop';\r\nimport { resetScrollAfterNextBatch } from '../Rendering/Renderer';\r\nimport { EventDelegator } from '../Rendering/Events/EventDelegator';\r\nimport { attachEnhancedNavigationListener, getInteractiveRouterRendererId, handleClickForNavigationInterception, hasInteractiveRouter, hasProgrammaticEnhancedNavigationHandler, isWithinBaseUriSpace, performProgrammaticEnhancedNavigation, setHasInteractiveRouter, toAbsoluteUri } from './NavigationUtils';\r\nimport { WebRendererId } from '../Rendering/WebRendererId';\r\nimport { isRendererAttached } from '../Rendering/WebRendererInteropMethods';\r\nimport { IBlazor } from '../GlobalExports';\r\n\r\nlet hasRegisteredNavigationEventListeners = false;\r\nlet currentHistoryIndex = 0;\r\nlet currentLocationChangingCallId = 0;\r\n\r\ntype NavigationCallbacks = {\r\n  rendererId: WebRendererId;\r\n  hasLocationChangingEventListeners: boolean;\r\n  locationChanged(uri: string, state: string | undefined, intercepted: boolean): Promise<void>;\r\n  locationChanging(callId: number, uri: string, state: string | undefined, intercepted: boolean): Promise<void>;\r\n};\r\n\r\nconst navigationCallbacks = new Map<WebRendererId, NavigationCallbacks>();\r\n\r\nlet popStateCallback: ((state: PopStateEvent) => Promise<void> | void) = onBrowserInitiatedPopState;\r\nlet resolveCurrentNavigation: ((shouldContinueNavigation: boolean) => void) | null = null;\r\n\r\n// These are the functions we're making available for invocation from .NET\r\nexport const internalFunctions = {\r\n  listenForNavigationEvents,\r\n  enableNavigationInterception: setHasInteractiveRouter,\r\n  setHasLocationChangingListeners,\r\n  endLocationChanging,\r\n  navigateTo: navigateToFromDotNet,\r\n  refresh,\r\n  getBaseURI: (): string => document.baseURI,\r\n  getLocationHref: (): string => location.href,\r\n  scrollToElement,\r\n};\r\n\r\nfunction listenForNavigationEvents(\r\n  rendererId: WebRendererId,\r\n  locationChangedCallback: (uri: string, state: string | undefined, intercepted: boolean) => Promise<void>,\r\n  locationChangingCallback: (callId: number, uri: string, state: string | undefined, intercepted: boolean) => Promise<void>\r\n): void {\r\n  navigationCallbacks.set(rendererId, {\r\n    rendererId,\r\n    hasLocationChangingEventListeners: false,\r\n    locationChanged: locationChangedCallback,\r\n    locationChanging: locationChangingCallback,\r\n  });\r\n\r\n  if (hasRegisteredNavigationEventListeners) {\r\n    return;\r\n  }\r\n\r\n  hasRegisteredNavigationEventListeners = true;\r\n  window.addEventListener('popstate', onPopState);\r\n  currentHistoryIndex = history.state?._index ?? 0;\r\n\r\n  attachEnhancedNavigationListener((internalDestinationHref, interceptedLink) => {\r\n    notifyLocationChanged(interceptedLink, internalDestinationHref);\r\n  });\r\n}\r\n\r\nfunction setHasLocationChangingListeners(rendererId: WebRendererId, hasListeners: boolean) {\r\n  const callbacks = navigationCallbacks.get(rendererId);\r\n  if (!callbacks) {\r\n    throw new Error(`Renderer with ID '${rendererId}' is not listening for navigation events`);\r\n  }\r\n  callbacks.hasLocationChangingEventListeners = hasListeners;\r\n}\r\n\r\nexport function scrollToElement(identifier: string): boolean {\r\n  const element = document.getElementById(identifier);\r\n\r\n  if (element) {\r\n    element.scrollIntoView();\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function attachToEventDelegator(eventDelegator: EventDelegator): void {\r\n  // We need to respond to clicks on <a> elements *after* the EventDelegator has finished\r\n  // running its simulated bubbling process so that we can respect any preventDefault requests.\r\n  // So instead of registering our own native event, register using the EventDelegator.\r\n  eventDelegator.notifyAfterClick(event => {\r\n    if (!hasInteractiveRouter()) {\r\n      return;\r\n    }\r\n\r\n    handleClickForNavigationInterception(event, absoluteInternalHref => {\r\n      performInternalNavigation(absoluteInternalHref, /* interceptedLink */ true, /* replace */ false);\r\n    });\r\n  });\r\n}\r\n\r\nfunction isSamePageWithHash(absoluteHref: string): boolean {\r\n  const hashIndex = absoluteHref.indexOf('#');\r\n  return hashIndex > -1 && location.href.replace(location.hash, '') === absoluteHref.substring(0, hashIndex);\r\n}\r\n\r\nfunction performScrollToElementOnTheSamePage(absoluteHref : string, replace: boolean, state: string | undefined = undefined): void {\r\n  saveToBrowserHistory(absoluteHref, replace, state);\r\n\r\n  const hashIndex = absoluteHref.indexOf('#');\r\n  if (hashIndex === absoluteHref.length - 1) {\r\n    return;\r\n  }\r\n\r\n  const identifier = absoluteHref.substring(hashIndex + 1);\r\n  scrollToElement(identifier);\r\n}\r\n\r\nfunction refresh(forceReload: boolean): void {\r\n  if (!forceReload && hasProgrammaticEnhancedNavigationHandler()) {\r\n    performProgrammaticEnhancedNavigation(location.href, /* replace */ true);\r\n  } else {\r\n    location.reload();\r\n  }\r\n}\r\n\r\n// For back-compat, we need to accept multiple overloads\r\nexport function navigateTo(uri: string, options: NavigationOptions): void;\r\nexport function navigateTo(uri: string, forceLoad: boolean): void;\r\nexport function navigateTo(uri: string, forceLoad: boolean, replace: boolean): void;\r\nexport function navigateTo(uri: string, forceLoadOrOptions: NavigationOptions | boolean, replaceIfUsingOldOverload = false): void {\r\n  // Normalize the parameters to the newer overload (i.e., using NavigationOptions)\r\n  const options: NavigationOptions = forceLoadOrOptions instanceof Object\r\n    ? forceLoadOrOptions\r\n    : { forceLoad: forceLoadOrOptions, replaceHistoryEntry: replaceIfUsingOldOverload };\r\n\r\n  navigateToCore(uri, options);\r\n}\r\n\r\nfunction navigateToFromDotNet(uri: string, options: NavigationOptions): void {\r\n  // The location changing callback is called from .NET for programmatic navigations originating from .NET.\r\n  // In this case, we shouldn't invoke the callback again from the JS side.\r\n  navigateToCore(uri, options, /* skipLocationChangingCallback */ true);\r\n}\r\n\r\nfunction navigateToCore(uri: string, options: NavigationOptions, skipLocationChangingCallback = false): void {\r\n  const absoluteUri = toAbsoluteUri(uri);\r\n  const pageLoadMechanism = currentPageLoadMechanism();\r\n\r\n  if (options.forceLoad || !isWithinBaseUriSpace(absoluteUri) || pageLoadMechanism === 'serverside-fullpageload') {\r\n    // For external navigation, we work in terms of the originally-supplied uri string,\r\n    // not the computed absoluteUri. This is in case there are some special URI formats\r\n    // we're unable to translate into absolute URIs.\r\n    performExternalNavigation(uri, options.replaceHistoryEntry);\r\n  } else if (pageLoadMechanism === 'clientside-router') {\r\n    performInternalNavigation(absoluteUri, false, options.replaceHistoryEntry, options.historyEntryState, skipLocationChangingCallback);\r\n  } else if (pageLoadMechanism === 'serverside-enhanced') {\r\n    performProgrammaticEnhancedNavigation(absoluteUri, options.replaceHistoryEntry);\r\n  } else {\r\n    // Force a compile-time error if some other case needs to be handled in the future\r\n    const unreachable: never = pageLoadMechanism;\r\n    throw new Error(`Unsupported page load mechanism: ${unreachable}`);\r\n  }\r\n}\r\n\r\nfunction performExternalNavigation(uri: string, replace: boolean) {\r\n  if (location.href === uri) {\r\n    // If you're already on this URL, you can't append another copy of it to the history stack,\r\n    // so we can ignore the 'replace' flag. However, reloading the same URL you're already on\r\n    // requires special handling to avoid triggering browser-specific behavior issues.\r\n    // For details about what this fixes and why, see https://github.com/dotnet/aspnetcore/pull/10839\r\n    const temporaryUri = uri + '?';\r\n    history.replaceState(null, '', temporaryUri);\r\n    location.replace(uri);\r\n  } else if (replace) {\r\n    location.replace(uri);\r\n  } else {\r\n    location.href = uri;\r\n  }\r\n}\r\n\r\nasync function performInternalNavigation(absoluteInternalHref: string, interceptedLink: boolean, replace: boolean, state: string | undefined = undefined, skipLocationChangingCallback = false) {\r\n  ignorePendingNavigation();\r\n\r\n  if (isSamePageWithHash(absoluteInternalHref)) {\r\n    performScrollToElementOnTheSamePage(absoluteInternalHref, replace, state);\r\n    return;\r\n  }\r\n\r\n  const callbacks = getInteractiveRouterNavigationCallbacks();\r\n  if (!skipLocationChangingCallback && callbacks?.hasLocationChangingEventListeners) {\r\n    const shouldContinueNavigation = await notifyLocationChanging(absoluteInternalHref, state, interceptedLink, callbacks);\r\n    if (!shouldContinueNavigation) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Since this was *not* triggered by a back/forward gesture (that goes through a different\r\n  // code path starting with a popstate event), we don't want to preserve the current scroll\r\n  // position, so reset it.\r\n  // To avoid ugly flickering effects, we don't want to change the scroll position until\r\n  // we render the new page. As a best approximation, wait until the next batch.\r\n  resetScrollAfterNextBatch();\r\n\r\n  saveToBrowserHistory(absoluteInternalHref, replace, state);\r\n\r\n  await notifyLocationChanged(interceptedLink);\r\n}\r\n\r\nfunction saveToBrowserHistory(absoluteInternalHref: string, replace: boolean, state: string | undefined = undefined): void {\r\n  if (!replace) {\r\n    currentHistoryIndex++;\r\n    history.pushState({\r\n      userState: state,\r\n      _index: currentHistoryIndex,\r\n    }, /* ignored title */ '', absoluteInternalHref);\r\n  } else {\r\n    history.replaceState({\r\n      userState: state,\r\n      _index: currentHistoryIndex,\r\n    }, /* ignored title */ '', absoluteInternalHref);\r\n  }\r\n}\r\n\r\nfunction navigateHistoryWithoutPopStateCallback(delta: number): Promise<void> {\r\n  return new Promise(resolve => {\r\n    const oldPopStateCallback = popStateCallback;\r\n\r\n    popStateCallback = () => {\r\n      popStateCallback = oldPopStateCallback;\r\n      resolve();\r\n    };\r\n\r\n    history.go(delta);\r\n  });\r\n}\r\n\r\nfunction ignorePendingNavigation() {\r\n  if (resolveCurrentNavigation) {\r\n    resolveCurrentNavigation(false);\r\n    resolveCurrentNavigation = null;\r\n  }\r\n}\r\n\r\nfunction notifyLocationChanging(uri: string, state: string | undefined, intercepted: boolean, callbacks: NavigationCallbacks): Promise<boolean> {\r\n  return new Promise<boolean>(resolve => {\r\n    ignorePendingNavigation();\r\n    currentLocationChangingCallId++;\r\n    resolveCurrentNavigation = resolve;\r\n    callbacks.locationChanging(currentLocationChangingCallId, uri, state, intercepted);\r\n  });\r\n}\r\n\r\nfunction endLocationChanging(callId: number, shouldContinueNavigation: boolean) {\r\n  if (resolveCurrentNavigation && callId === currentLocationChangingCallId) {\r\n    resolveCurrentNavigation(shouldContinueNavigation);\r\n    resolveCurrentNavigation = null;\r\n  }\r\n}\r\n\r\nasync function onBrowserInitiatedPopState(state: PopStateEvent) {\r\n  ignorePendingNavigation();\r\n\r\n  const callbacks = getInteractiveRouterNavigationCallbacks();\r\n  if (callbacks?.hasLocationChangingEventListeners) {\r\n    const index = state.state?._index ?? 0;\r\n    const userState = state.state?.userState;\r\n    const delta = index - currentHistoryIndex;\r\n    const uri = location.href;\r\n\r\n    // Temporarily revert the navigation until we confirm if the navigation should continue.\r\n    await navigateHistoryWithoutPopStateCallback(-delta);\r\n\r\n    const shouldContinueNavigation = await notifyLocationChanging(uri, userState, false, callbacks);\r\n    if (!shouldContinueNavigation) {\r\n      return;\r\n    }\r\n\r\n    await navigateHistoryWithoutPopStateCallback(delta);\r\n  }\r\n\r\n  await notifyLocationChanged(false);\r\n}\r\n\r\nasync function notifyLocationChanged(interceptedLink: boolean, internalDestinationHref?: string) {\r\n  const uri = internalDestinationHref ?? location.href;\r\n\r\n  await Promise.all(Array.from(navigationCallbacks, async ([rendererId, callbacks]) => {\r\n    if (isRendererAttached(rendererId)) {\r\n      await callbacks.locationChanged(uri, history.state?.userState, interceptedLink);\r\n    }\r\n  }));\r\n}\r\n\r\nasync function onPopState(state: PopStateEvent) {\r\n  if (popStateCallback && currentPageLoadMechanism() !== 'serverside-enhanced') {\r\n    await popStateCallback(state);\r\n  }\r\n\r\n  currentHistoryIndex = history.state?._index ?? 0;\r\n}\r\n\r\nfunction getInteractiveRouterNavigationCallbacks(): NavigationCallbacks | undefined {\r\n  const interactiveRouterRendererId = getInteractiveRouterRendererId();\r\n  if (interactiveRouterRendererId === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  return navigationCallbacks.get(interactiveRouterRendererId);\r\n}\r\n\r\nfunction currentPageLoadMechanism(): PageLoadMechanism {\r\n  if (hasInteractiveRouter()) {\r\n    return 'clientside-router';\r\n  } else if (hasProgrammaticEnhancedNavigationHandler()) {\r\n    return 'serverside-enhanced';\r\n  } else {\r\n    // For back-compat, in blazor.server.js or blazor.webassembly.js, we always behave as if there's an interactive\r\n    // router even if there isn't one attached. This preserves a niche case where people may call Blazor.navigateTo\r\n    // without a router and expect to receive a notification on the .NET side but no page load occurs.\r\n    // In blazor.web.js, we explicitly recognize the case where you have neither an interactive nor enhanced SSR router\r\n    // attached, and then handle Blazor.navigateTo by doing a full page load because that's more useful (issue #51636).\r\n    const isBlazorWeb = (window['Blazor'] as IBlazor)._internal.isBlazorWeb;\r\n    return isBlazorWeb ? 'serverside-fullpageload' : 'clientside-router';\r\n  }\r\n}\r\n\r\ntype PageLoadMechanism = 'clientside-router' | 'serverside-enhanced' | 'serverside-fullpageload';\r\n\r\n// Keep in sync with Components/src/NavigationOptions.cs\r\nexport interface NavigationOptions {\r\n  forceLoad: boolean;\r\n  replaceHistoryEntry: boolean;\r\n  historyEntryState?: string;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport '../Platform/Platform';\r\nimport '../Environment';\r\nimport { RenderBatch } from './RenderBatch/RenderBatch';\r\nimport { BrowserRenderer } from './BrowserRenderer';\r\nimport { toLogicalElement, LogicalElement } from './LogicalElements';\r\nimport { getAndRemovePendingRootComponentContainer } from './JSRootComponents';\r\n\r\ninterface BrowserRendererRegistry {\r\n  [browserRendererId: number]: BrowserRenderer;\r\n}\r\nconst browserRenderers: BrowserRendererRegistry = {};\r\nlet shouldResetScrollAfterNextBatch = false;\r\n\r\nexport function attachRootComponentToLogicalElement(browserRendererId: number, logicalElement: LogicalElement, componentId: number, appendContent: boolean): void {\r\n  let browserRenderer = browserRenderers[browserRendererId];\r\n  if (!browserRenderer) {\r\n    browserRenderer = new BrowserRenderer(browserRendererId);\r\n    browserRenderers[browserRendererId] = browserRenderer;\r\n  }\r\n\r\n  browserRenderer.attachRootComponentToLogicalElement(componentId, logicalElement, appendContent);\r\n}\r\n\r\nexport function attachRootComponentToElement(elementSelector: string, componentId: number, browserRendererId: number): void {\r\n  const afterElementSelector = '::after';\r\n  const beforeElementSelector = '::before';\r\n  let appendContent = false;\r\n\r\n  if (elementSelector.endsWith(afterElementSelector)) {\r\n    elementSelector = elementSelector.slice(0, -afterElementSelector.length);\r\n    appendContent = true;\r\n  } else if (elementSelector.endsWith(beforeElementSelector)) {\r\n    throw new Error(`The '${beforeElementSelector}' selector is not supported.`);\r\n  }\r\n\r\n  const element = getAndRemovePendingRootComponentContainer(elementSelector)\r\n    || document.querySelector(elementSelector);\r\n  if (!element) {\r\n    throw new Error(`Could not find any element matching selector '${elementSelector}'.`);\r\n  }\r\n\r\n  // 'allowExistingContents' to keep any prerendered content until we do the first client-side render\r\n  // Only client-side Blazor supplies a browser renderer ID\r\n  attachRootComponentToLogicalElement(browserRendererId, toLogicalElement(element, /* allow existing contents */ true), componentId, appendContent);\r\n}\r\n\r\nexport function getRendererer(browserRendererId: number): BrowserRenderer | undefined {\r\n  return browserRenderers[browserRendererId];\r\n}\r\n\r\nexport function renderBatch(browserRendererId: number, batch: RenderBatch): void {\r\n  const browserRenderer = browserRenderers[browserRendererId];\r\n  if (!browserRenderer) {\r\n    throw new Error(`There is no browser renderer with ID ${browserRendererId}.`);\r\n  }\r\n\r\n  const arrayRangeReader = batch.arrayRangeReader;\r\n  const updatedComponentsRange = batch.updatedComponents();\r\n  const updatedComponentsValues = arrayRangeReader.values(updatedComponentsRange);\r\n  const updatedComponentsLength = arrayRangeReader.count(updatedComponentsRange);\r\n  const referenceFrames = batch.referenceFrames();\r\n  const referenceFramesValues = arrayRangeReader.values(referenceFrames);\r\n  const diffReader = batch.diffReader;\r\n\r\n  for (let i = 0; i < updatedComponentsLength; i++) {\r\n    const diff = batch.updatedComponentsEntry(updatedComponentsValues, i);\r\n    const componentId = diffReader.componentId(diff);\r\n    const edits = diffReader.edits(diff);\r\n    browserRenderer.updateComponent(batch, componentId, edits, referenceFramesValues);\r\n  }\r\n\r\n  const disposedComponentIdsRange = batch.disposedComponentIds();\r\n  const disposedComponentIdsValues = arrayRangeReader.values(disposedComponentIdsRange);\r\n  const disposedComponentIdsLength = arrayRangeReader.count(disposedComponentIdsRange);\r\n  for (let i = 0; i < disposedComponentIdsLength; i++) {\r\n    const componentId = batch.disposedComponentIdsEntry(disposedComponentIdsValues, i);\r\n    browserRenderer.disposeComponent(componentId);\r\n  }\r\n\r\n  const disposedEventHandlerIdsRange = batch.disposedEventHandlerIds();\r\n  const disposedEventHandlerIdsValues = arrayRangeReader.values(disposedEventHandlerIdsRange);\r\n  const disposedEventHandlerIdsLength = arrayRangeReader.count(disposedEventHandlerIdsRange);\r\n  for (let i = 0; i < disposedEventHandlerIdsLength; i++) {\r\n    const eventHandlerId = batch.disposedEventHandlerIdsEntry(disposedEventHandlerIdsValues, i);\r\n    browserRenderer.disposeEventHandler(eventHandlerId);\r\n  }\r\n\r\n  resetScrollIfNeeded();\r\n}\r\n\r\nexport function resetScrollAfterNextBatch(): void {\r\n  shouldResetScrollAfterNextBatch = true;\r\n}\r\n\r\nfunction resetScrollIfNeeded() {\r\n  if (shouldResetScrollAfterNextBatch) {\r\n    shouldResetScrollAfterNextBatch = false;\r\n\r\n    // This assumes the scroller is on the window itself. There isn't a general way to know\r\n    // if some other element is playing the role of the primary scroll region.\r\n    window.scrollTo && window.scrollTo(0, 0);\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { WebRendererId } from '../Rendering/WebRendererId';\r\n\r\nlet interactiveRouterRendererId: WebRendererId | undefined = undefined;\r\nlet programmaticEnhancedNavigationHandler: typeof performProgrammaticEnhancedNavigation | undefined;\r\nlet enhancedNavigationListener: typeof notifyEnhancedNavigationListners | undefined;\r\n\r\n/**\r\n * Checks if a click event corresponds to an <a> tag referencing a URL within the base href, and that interception\r\n * isn't bypassed (e.g., by a 'download' attribute or the user holding a meta key while clicking).\r\n * @param event The event that occurred\r\n * @param callbackIfIntercepted A callback that will be invoked if the event corresponds to a click on an <a> that can be intercepted.\r\n */\r\nexport function handleClickForNavigationInterception(event: MouseEvent, callbackIfIntercepted: (absoluteInternalHref: string) => void): void {\r\n  if (event.button !== 0 || eventHasSpecialKey(event)) {\r\n    // Don't stop ctrl/meta-click (etc) from opening links in new tabs/windows\r\n    return;\r\n  }\r\n\r\n  if (event.defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  // Intercept clicks on all <a> elements where the href is within the <base href> URI space\r\n  // We must explicitly check if it has an 'href' attribute, because if it doesn't, the result might be null or an empty string depending on the browser\r\n  const anchorTarget = findAnchorTarget(event);\r\n\r\n  if (anchorTarget && canProcessAnchor(anchorTarget)) {\r\n    const anchorHref = anchorTarget.getAttribute('href')!;\r\n\r\n    const absoluteHref = toAbsoluteUri(anchorHref);\r\n\r\n    if (isWithinBaseUriSpace(absoluteHref)) {\r\n      event.preventDefault();\r\n      callbackIfIntercepted(absoluteHref);\r\n    }\r\n  }\r\n}\r\n\r\nexport function isWithinBaseUriSpace(href: string) {\r\n  const baseUriWithoutTrailingSlash = toBaseUriWithoutTrailingSlash(document.baseURI!);\r\n  const nextChar = href.charAt(baseUriWithoutTrailingSlash.length);\r\n\r\n  return href.startsWith(baseUriWithoutTrailingSlash)\r\n  && (nextChar === '' || nextChar === '/' || nextChar === '?' || nextChar === '#');\r\n}\r\n\r\nexport function attachEnhancedNavigationListener(listener: typeof enhancedNavigationListener) {\r\n  enhancedNavigationListener = listener;\r\n}\r\n\r\nexport function notifyEnhancedNavigationListners(internalDestinationHref: string, interceptedLink: boolean) {\r\n  enhancedNavigationListener?.(internalDestinationHref, interceptedLink);\r\n}\r\n\r\nexport function hasProgrammaticEnhancedNavigationHandler(): boolean {\r\n  return programmaticEnhancedNavigationHandler !== undefined;\r\n}\r\n\r\nexport function attachProgrammaticEnhancedNavigationHandler(handler: typeof programmaticEnhancedNavigationHandler) {\r\n  programmaticEnhancedNavigationHandler = handler;\r\n}\r\n\r\nexport function performProgrammaticEnhancedNavigation(absoluteInternalHref: string, replace: boolean): void {\r\n  if (!programmaticEnhancedNavigationHandler) {\r\n    throw new Error('No enhanced programmatic navigation handler has been attached');\r\n  }\r\n\r\n  programmaticEnhancedNavigationHandler(absoluteInternalHref, replace);\r\n}\r\n\r\nfunction toBaseUriWithoutTrailingSlash(baseUri: string) {\r\n  return baseUri.substring(0, baseUri.lastIndexOf('/'));\r\n}\r\n\r\nlet testAnchor: HTMLAnchorElement;\r\nexport function toAbsoluteUri(relativeUri: string): string {\r\n  testAnchor = testAnchor || document.createElement('a');\r\n  testAnchor.href = relativeUri;\r\n  return testAnchor.href;\r\n}\r\n\r\nfunction eventHasSpecialKey(event: MouseEvent) {\r\n  return event.ctrlKey || event.shiftKey || event.altKey || event.metaKey;\r\n}\r\n\r\nfunction canProcessAnchor(anchorTarget: HTMLAnchorElement) {\r\n  const targetAttributeValue = anchorTarget.getAttribute('target');\r\n  const opensInSameFrame = !targetAttributeValue || targetAttributeValue === '_self';\r\n  return opensInSameFrame && anchorTarget.hasAttribute('href') && !anchorTarget.hasAttribute('download');\r\n}\r\n\r\nfunction findAnchorTarget(event: MouseEvent): HTMLAnchorElement | null {\r\n  // _blazorDisableComposedPath is a temporary escape hatch in case any problems are discovered\r\n  // in this logic. It can be removed in a later release, and should not be considered supported API.\r\n  const path = !window['_blazorDisableComposedPath'] && event.composedPath && event.composedPath();\r\n  if (path) {\r\n    // This logic works with events that target elements within a shadow root,\r\n    // as long as the shadow mode is 'open'. For closed shadows, we can't possibly\r\n    // know what internal element was clicked.\r\n    for (let i = 0; i < path.length; i++) {\r\n      const candidate = path[i];\r\n      if (candidate instanceof Element && candidate.tagName === 'A') {\r\n        return candidate as HTMLAnchorElement;\r\n      }\r\n    }\r\n    return null;\r\n  } else {\r\n    // Since we're adding use of composedPath in a patch, retain compatibility with any\r\n    // legacy browsers that don't support it by falling back on the older logic, even\r\n    // though it won't work properly with ShadowDOM. This can be removed in the next\r\n    // major release.\r\n    return findClosestAnchorAncestorLegacy(event.target as Element | null, 'A');\r\n  }\r\n}\r\n\r\nfunction findClosestAnchorAncestorLegacy(element: Element | null, tagName: string) {\r\n  return !element\r\n    ? null\r\n    : element.tagName === tagName\r\n      ? element\r\n      : findClosestAnchorAncestorLegacy(element.parentElement, tagName);\r\n}\r\n\r\nexport function hasInteractiveRouter(): boolean {\r\n  return interactiveRouterRendererId !== undefined;\r\n}\r\n\r\nexport function getInteractiveRouterRendererId() : WebRendererId | undefined {\r\n  return interactiveRouterRendererId;\r\n}\r\n\r\nexport function setHasInteractiveRouter(rendererId: WebRendererId) {\r\n  if (interactiveRouterRendererId !== undefined && interactiveRouterRendererId !== rendererId) {\r\n    throw new Error('Only one interactive runtime may enable navigation interception at a time.');\r\n  }\r\n\r\n  interactiveRouterRendererId = rendererId;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport '@microsoft/dotnet-js-interop';\r\n\r\nexport const domFunctions = {\r\n  focus,\r\n  focusBySelector\r\n};\r\n\r\nfunction focus(element: HTMLOrSVGElement, preventScroll: boolean): void {\r\n  if (element instanceof HTMLElement) {\r\n    element.focus({ preventScroll });\r\n  } else if (element instanceof SVGElement) {\r\n    if (element.hasAttribute('tabindex')) {\r\n      element.focus({ preventScroll });\r\n    } else {\r\n      throw new Error('Unable to focus an SVG element that does not have a tabindex.');\r\n    }\r\n  } else {\r\n    throw new Error('Unable to focus an invalid element.');\r\n  }\r\n}\r\n\r\nfunction focusBySelector(selector: string, preventScroll: boolean): void {\r\n  const element = document.querySelector(selector) as HTMLElement;\r\n  if (element) {\r\n    // If no explicit tabindex is defined, mark it as programmatically-focusable.\r\n    // This does actually add a new HTML attribute, but it shouldn't interfere with\r\n    // diffing because diffing only deals with the attributes you have in your code.\r\n    if (!element.hasAttribute('tabindex')) {\r\n      element.tabIndex = -1;\r\n    }\r\n\r\n    element.focus({ preventScroll: true });\r\n  }\r\n}","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\n\r\nexport const Virtualize = {\r\n  init,\r\n  dispose,\r\n};\r\n\r\nconst dispatcherObserversByDotNetIdPropname = Symbol();\r\n\r\nfunction findClosestScrollContainer(element: HTMLElement | null): HTMLElement | null {\r\n  // If we recurse up as far as body or the document root, return null so that the\r\n  // IntersectionObserver observes intersection with the top-level scroll viewport\r\n  // instead of the with body/documentElement which can be arbitrarily tall.\r\n  // See https://github.com/dotnet/aspnetcore/issues/37659 for more about what this fixes.\r\n  if (!element || element === document.body || element === document.documentElement) {\r\n    return null;\r\n  }\r\n\r\n  const style = getComputedStyle(element);\r\n\r\n  if (style.overflowY !== 'visible') {\r\n    return element;\r\n  }\r\n\r\n  return findClosestScrollContainer(element.parentElement);\r\n}\r\n\r\nfunction init(dotNetHelper: DotNet.DotNetObject, spacerBefore: HTMLElement, spacerAfter: HTMLElement, rootMargin = 50): void {\r\n  // Overflow anchoring can cause an ongoing scroll loop, because when we resize the spacers, the browser\r\n  // would update the scroll position to compensate. Then the spacer would remain visible and we'd keep on\r\n  // trying to resize it.\r\n  const scrollContainer = findClosestScrollContainer(spacerBefore);\r\n  (scrollContainer || document.documentElement).style.overflowAnchor = 'none';\r\n\r\n  const rangeBetweenSpacers = document.createRange();\r\n\r\n  if (isValidTableElement(spacerAfter.parentElement)) {\r\n    spacerBefore.style.display = 'table-row';\r\n    spacerAfter.style.display = 'table-row';\r\n  }\r\n\r\n  const intersectionObserver = new IntersectionObserver(intersectionCallback, {\r\n    root: scrollContainer,\r\n    rootMargin: `${rootMargin}px`,\r\n  });\r\n\r\n  intersectionObserver.observe(spacerBefore);\r\n  intersectionObserver.observe(spacerAfter);\r\n\r\n  const mutationObserverBefore = createSpacerMutationObserver(spacerBefore);\r\n  const mutationObserverAfter = createSpacerMutationObserver(spacerAfter);\r\n\r\n  const { observersByDotNetObjectId, id } = getObserversMapEntry(dotNetHelper);\r\n  observersByDotNetObjectId[id] = {\r\n    intersectionObserver,\r\n    mutationObserverBefore,\r\n    mutationObserverAfter,\r\n  };\r\n\r\n  function createSpacerMutationObserver(spacer: HTMLElement): MutationObserver {\r\n    // Without the use of thresholds, IntersectionObserver only detects binary changes in visibility,\r\n    // so if a spacer gets resized but remains visible, no additional callbacks will occur. By unobserving\r\n    // and reobserving spacers when they get resized, the intersection callback will re-run if they remain visible.\r\n    const observerOptions = { attributes: true };\r\n    const mutationObserver = new MutationObserver((mutations: MutationRecord[], observer: MutationObserver): void => {\r\n      if (isValidTableElement(spacer.parentElement)) {\r\n        observer.disconnect();\r\n        spacer.style.display = 'table-row';\r\n        observer.observe(spacer, observerOptions);\r\n      }\r\n\r\n      intersectionObserver.unobserve(spacer);\r\n      intersectionObserver.observe(spacer);\r\n    });\r\n\r\n    mutationObserver.observe(spacer, observerOptions);\r\n\r\n    return mutationObserver;\r\n  }\r\n\r\n  function intersectionCallback(entries: IntersectionObserverEntry[]): void {\r\n    entries.forEach((entry): void => {\r\n      if (!entry.isIntersecting) {\r\n        return;\r\n      }\r\n\r\n      // To compute the ItemSize, work out the separation between the two spacers. We can't just measure an individual element\r\n      // because each conceptual item could be made from multiple elements. Using getBoundingClientRect allows for the size to be\r\n      // a fractional value. It's important not to add or subtract any such fractional values (e.g., to subtract the 'top' of\r\n      // one item from the 'bottom' of another to get the distance between them) because floating point errors would cause\r\n      // scrolling glitches.\r\n      rangeBetweenSpacers.setStartAfter(spacerBefore);\r\n      rangeBetweenSpacers.setEndBefore(spacerAfter);\r\n      const spacerSeparation = rangeBetweenSpacers.getBoundingClientRect().height;\r\n      const containerSize = entry.rootBounds?.height;\r\n\r\n      if (entry.target === spacerBefore) {\r\n        dotNetHelper.invokeMethodAsync('OnSpacerBeforeVisible', entry.intersectionRect.top - entry.boundingClientRect.top, spacerSeparation, containerSize);\r\n      } else if (entry.target === spacerAfter && spacerAfter.offsetHeight > 0) {\r\n        // When we first start up, both the \"before\" and \"after\" spacers will be visible, but it's only relevant to raise a\r\n        // single event to load the initial data. To avoid raising two events, skip the one for the \"after\" spacer if we know\r\n        // it's meaningless to talk about any overlap into it.\r\n        dotNetHelper.invokeMethodAsync('OnSpacerAfterVisible', entry.boundingClientRect.bottom - entry.intersectionRect.bottom, spacerSeparation, containerSize);\r\n      }\r\n    });\r\n  }\r\n\r\n  function isValidTableElement(element: HTMLElement | null): boolean {\r\n    if (element === null) {\r\n      return false;\r\n    }\r\n\r\n    return ((element instanceof HTMLTableElement && element.style.display === '') || element.style.display === 'table')\r\n      || ((element instanceof HTMLTableSectionElement && element.style.display === '') || element.style.display === 'table-row-group');\r\n  }\r\n}\r\n\r\nfunction getObserversMapEntry(dotNetHelper: DotNet.DotNetObject): { observersByDotNetObjectId: {[id: number]: any }, id: number } {\r\n  const dotNetHelperDispatcher = dotNetHelper['_callDispatcher'];\r\n  const dotNetHelperId = dotNetHelper['_id'];\r\n  dotNetHelperDispatcher[dispatcherObserversByDotNetIdPropname] ??= { };\r\n\r\n  return {\r\n    observersByDotNetObjectId: dotNetHelperDispatcher[dispatcherObserversByDotNetIdPropname],\r\n    id: dotNetHelperId,\r\n  };\r\n}\r\n\r\nfunction dispose(dotNetHelper: DotNet.DotNetObject): void {\r\n  const { observersByDotNetObjectId, id } = getObserversMapEntry(dotNetHelper);\r\n  const observers = observersByDotNetObjectId[id];\r\n\r\n  if (observers) {\r\n    observers.intersectionObserver.disconnect();\r\n    observers.mutationObserverBefore.disconnect();\r\n    observers.mutationObserverAfter.disconnect();\r\n\r\n    dotNetHelper.dispose();\r\n\r\n    delete observersByDotNetObjectId[id];\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { getLogicalParent, LogicalElement } from './Rendering/LogicalElements';\r\n\r\nexport const PageTitle = {\r\n  getAndRemoveExistingTitle,\r\n};\r\n\r\nfunction getAndRemoveExistingTitle(): string | null {\r\n  // Other <title> elements may exist outside <head> (e.g., inside <svg> elements) but they aren't page titles\r\n  const titleElements = document.head ? document.head.getElementsByTagName('title') : [];\r\n\r\n  if (titleElements.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let existingTitle: string | null = null;\r\n\r\n  for (let index = titleElements.length - 1; index >= 0; index--) {\r\n    const currentTitleElement = titleElements[index];\r\n    const previousSibling = currentTitleElement.previousSibling;\r\n    const isBlazorTitle = previousSibling instanceof Comment && getLogicalParent(previousSibling as unknown as LogicalElement) !== null;\r\n\r\n    if (isBlazorTitle) {\r\n      continue;\r\n    }\r\n\r\n    if (existingTitle === null) {\r\n      existingTitle = currentTitleElement.textContent;\r\n    }\r\n\r\n    currentTitleElement.parentNode?.removeChild(currentTitleElement);\r\n  }\r\n\r\n  return existingTitle;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport const InputFile = {\r\n  init,\r\n  toImageFile,\r\n  readFileData,\r\n};\r\n\r\ninterface BrowserFile {\r\n  id: number;\r\n  lastModified: string;\r\n  name: string;\r\n  size: number;\r\n  contentType: string;\r\n  blob: Blob;\r\n}\r\n\r\nexport interface InputElement extends HTMLInputElement {\r\n  _blazorInputFileNextFileId: number;\r\n  _blazorFilesById: { [id: number]: BrowserFile };\r\n}\r\n\r\nfunction init(callbackWrapper: any, elem: InputElement): void {\r\n  elem._blazorInputFileNextFileId = 0;\r\n\r\n  elem.addEventListener('click', function(): void {\r\n    // Permits replacing an existing file with a new one of the same file name.\r\n    elem.value = '';\r\n  });\r\n\r\n  elem.addEventListener('change', function(): void {\r\n    // Reduce to purely serializable data, plus an index by ID.\r\n    elem._blazorFilesById = {};\r\n\r\n    const fileList = Array.prototype.map.call(elem.files, function(file: File): BrowserFile {\r\n      const result = {\r\n        id: ++elem._blazorInputFileNextFileId,\r\n        lastModified: new Date(file.lastModified).toISOString(),\r\n        name: file.name,\r\n        size: file.size,\r\n        contentType: file.type,\r\n        readPromise: undefined,\r\n        arrayBuffer: undefined,\r\n        blob: file,\r\n      };\r\n\r\n      elem._blazorFilesById[result.id] = result;\r\n\r\n      return result;\r\n    });\r\n\r\n    callbackWrapper.invokeMethodAsync('NotifyChange', fileList);\r\n  });\r\n}\r\n\r\nasync function toImageFile(elem: InputElement, fileId: number, format: string, maxWidth: number, maxHeight: number): Promise<BrowserFile> {\r\n  const originalFile = getFileById(elem, fileId);\r\n\r\n  const loadedImage = await new Promise(function(resolve: (loadedImage: HTMLImageElement) => void): void {\r\n    const originalFileImage = new Image();\r\n    originalFileImage.onload = function(): void {\r\n      URL.revokeObjectURL(originalFileImage.src);\r\n      resolve(originalFileImage);\r\n    };\r\n    originalFileImage.onerror = function(): void {\r\n      originalFileImage.onerror = null;\r\n      URL.revokeObjectURL(originalFileImage.src);\r\n    };\r\n    originalFileImage.src = URL.createObjectURL(originalFile['blob']);\r\n  });\r\n\r\n  const resizedImageBlob = await new Promise(function(resolve: BlobCallback): void {\r\n    const desiredWidthRatio = Math.min(1, maxWidth / loadedImage.width);\r\n    const desiredHeightRatio = Math.min(1, maxHeight / loadedImage.height);\r\n    const chosenSizeRatio = Math.min(desiredWidthRatio, desiredHeightRatio);\r\n\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = Math.round(loadedImage.width * chosenSizeRatio);\r\n    canvas.height = Math.round(loadedImage.height * chosenSizeRatio);\r\n    canvas.getContext('2d')?.drawImage(loadedImage, 0, 0, canvas.width, canvas.height);\r\n    canvas.toBlob(resolve, format);\r\n  });\r\n\r\n  const result: BrowserFile = {\r\n    id: ++elem._blazorInputFileNextFileId,\r\n    lastModified: originalFile.lastModified,\r\n    name: originalFile.name,\r\n    size: resizedImageBlob?.size || 0,\r\n    contentType: format,\r\n    blob: resizedImageBlob ? resizedImageBlob : originalFile.blob,\r\n  };\r\n\r\n  elem._blazorFilesById[result.id] = result;\r\n\r\n  return result;\r\n}\r\n\r\nasync function readFileData(elem: InputElement, fileId: number): Promise<Blob> {\r\n  const file = getFileById(elem, fileId);\r\n  return file.blob;\r\n}\r\n\r\nexport function getFileById(elem: InputElement, fileId: number): BrowserFile {\r\n  const file = elem._blazorFilesById[fileId];\r\n\r\n  if (!file) {\r\n    throw new Error(`There is no file with ID ${fileId}. The file list may have changed. See https://aka.ms/aspnet/blazor-input-file-multiple-selections.`);\r\n  }\r\n\r\n  return file;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nconst registeredLocks = new Set<string>();\r\n\r\nexport const NavigationLock = {\r\n  enableNavigationPrompt,\r\n  disableNavigationPrompt,\r\n};\r\n\r\nfunction onBeforeUnload(event: BeforeUnloadEvent) {\r\n  event.preventDefault();\r\n  // Modern browsers display a confirmation prompt when returnValue is some value other than\r\n  // null or undefined.\r\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event#compatibility_notes\r\n  event.returnValue = true;\r\n}\r\n\r\nfunction enableNavigationPrompt(id: string) {\r\n  if (registeredLocks.size === 0) {\r\n    window.addEventListener('beforeunload', onBeforeUnload);\r\n  }\r\n\r\n  registeredLocks.add(id);\r\n}\r\n\r\nfunction disableNavigationPrompt(id: string) {\r\n  registeredLocks.delete(id);\r\n\r\n  if (registeredLocks.size === 0) {\r\n    window.removeEventListener('beforeunload', onBeforeUnload);\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\n\r\nexport async function getNextChunk(data: ArrayBufferView | Blob, position: number, nextChunkSize: number): Promise<Uint8Array> {\r\n  if (data instanceof Blob) {\r\n    return await getChunkFromBlob(data, position, nextChunkSize);\r\n  } else {\r\n    return getChunkFromArrayBufferView(data, position, nextChunkSize);\r\n  }\r\n}\r\n\r\nasync function getChunkFromBlob(data: Blob, position: number, nextChunkSize: number): Promise<Uint8Array> {\r\n  const chunkBlob = data.slice(position, position + nextChunkSize);\r\n  const arrayBuffer = await chunkBlob.arrayBuffer();\r\n  const nextChunkData = new Uint8Array(arrayBuffer);\r\n  return nextChunkData;\r\n}\r\n\r\nfunction getChunkFromArrayBufferView(data: ArrayBufferView, position: number, nextChunkSize: number): Uint8Array {\r\n  const nextChunkData = new Uint8Array(data.buffer, data.byteOffset + position, nextChunkSize);\r\n  return nextChunkData;\r\n}\r\n\r\nconst transmittingDotNetToJSStreams = new Map<number, ReadableStreamController<any>>();\r\nexport function receiveDotNetDataStream(dispatcher: DotNet.ICallDispatcher, streamId: number, data: Uint8Array, bytesRead: number, errorMessage: string): void {\r\n  let streamController = transmittingDotNetToJSStreams.get(streamId);\r\n  if (!streamController) {\r\n    const readableStream = new ReadableStream({\r\n      start(controller) {\r\n        transmittingDotNetToJSStreams.set(streamId, controller);\r\n        streamController = controller;\r\n      },\r\n    });\r\n\r\n    dispatcher.supplyDotNetStream(streamId, readableStream);\r\n  }\r\n\r\n  if (errorMessage) {\r\n    streamController!.error(errorMessage);\r\n    transmittingDotNetToJSStreams.delete(streamId);\r\n  } else if (bytesRead === 0) {\r\n    streamController!.close();\r\n    transmittingDotNetToJSStreams.delete(streamId);\r\n  } else {\r\n    streamController!.enqueue(data.length === bytesRead ? data : data.subarray(0, bytesRead));\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { navigateTo, internalFunctions as navigationManagerInternalFunctions, NavigationOptions } from './Services/NavigationManager';\r\nimport { domFunctions } from './DomWrapper';\r\nimport { Virtualize } from './Virtualize';\r\nimport { PageTitle } from './PageTitle';\r\nimport { registerCustomEventType, EventTypeOptions } from './Rendering/Events/EventTypes';\r\nimport { HubConnection } from '@microsoft/signalr';\r\nimport { InputFile } from './InputFile';\r\nimport { NavigationLock } from './NavigationLock';\r\nimport { DefaultReconnectionHandler } from './Platform/Circuits/DefaultReconnectionHandler';\r\nimport { CircuitStartOptions } from './Platform/Circuits/CircuitStartOptions';\r\nimport { WebAssemblyStartOptions } from './Platform/WebAssemblyStartOptions';\r\nimport { Platform, Pointer } from './Platform/Platform';\r\nimport { getNextChunk } from './StreamingInterop';\r\nimport { RootComponentsFunctions } from './Rendering/JSRootComponents';\r\nimport { attachWebRendererInterop } from './Rendering/WebRendererInteropMethods';\r\nimport { WebStartOptions } from './Platform/WebStartOptions';\r\nimport { RuntimeAPI } from 'dotnet';\r\nimport { JSEventRegistry } from './Services/JSEventRegistry';\r\nimport { WebRootComponentManager } from './Services/WebRootComponentManager';\r\n\r\n// TODO: It's kind of hard to tell which .NET platform(s) some of these APIs are relevant to.\r\n// It's important to know this information when dealing with the possibility of mulitple .NET platforms being available.\r\n// e.g., which of these APIs need to account for there being multiple .NET runtimes, and which don't?\r\n\r\n// We should consider separating it all out so that we can easily identify the platform requirements of each API.\r\n// For example:\r\n// * Blazor.{foo}: public Blazor APIs\r\n// * Blazor._internal.{foo}: internal, platform-agnostic Blazor APIs\r\n// * Blazor.platform.{somePlatformName}.{foo}: public, platform-specific Blazor APIs (would be empty at first, so no initial breaking changes)\r\n// * Blazor.platform.{somePlatformName}.{_internal}.{foo}: internal, platform-specific Blazor APIs\r\nexport interface IBlazor {\r\n  navigateTo: (uri: string, options: NavigationOptions) => void;\r\n  registerCustomEventType: (eventName: string, options: EventTypeOptions) => void;\r\n\r\n  blazekit: {\r\n    loadComponents:() => void;\r\n    hasWebAssemblyStarted: () => boolean;\r\n  }\r\n\r\n  addEventListener?: typeof JSEventRegistry.prototype.addEventListener;\r\n  removeEventListener?: typeof JSEventRegistry.prototype.removeEventListener;\r\n  disconnect?: () => void;\r\n  reconnect?: (existingConnection?: HubConnection) => Promise<boolean>;\r\n  defaultReconnectionHandler?: DefaultReconnectionHandler;\r\n  start?: ((userOptions?: Partial<CircuitStartOptions>) => Promise<void>) | ((options?: Partial<WebAssemblyStartOptions>) => Promise<void>) | ((options?: Partial<WebStartOptions>) => Promise<void>);\r\n  platform?: Platform;\r\n  rootComponents: typeof RootComponentsFunctions;\r\n  runtime: RuntimeAPI,\r\n\r\n  _internal: {\r\n    navigationManager: typeof navigationManagerInternalFunctions | any;\r\n    domWrapper: typeof domFunctions;\r\n    Virtualize: typeof Virtualize;\r\n    PageTitle: typeof PageTitle;\r\n    forceCloseConnection?: () => Promise<void>;\r\n    InputFile?: typeof InputFile;\r\n    NavigationLock: typeof NavigationLock;\r\n    invokeJSFromDotNet?: (callInfo: Pointer, arg0: any, arg1: any, arg2: any) => any;\r\n    invokeJSJson?: (identifier: string, targetInstanceId: number, resultType: number, argsJson: string, asyncHandle: number) => string | null;\r\n    endInvokeDotNetFromJS?: (callId: string, success: boolean, resultJsonOrErrorMessage: string) => void;\r\n    receiveByteArray?: (id: number, data: Uint8Array) => void;\r\n    getPersistedState?: () => string;\r\n    getInitialComponentsUpdate?: () => Promise<string>;\r\n    updateRootComponents?: (operations: string) => void;\r\n    endUpdateRootComponents?: (batchId: number) => void;\r\n    attachRootComponentToElement?: (arg0: any, arg1: any, arg2: any, arg3: any) => void;\r\n    registeredComponents?: {\r\n      getRegisteredComponentsCount: () => number;\r\n      getAssembly: (id) => string;\r\n      getTypeName: (id) => string;\r\n      getParameterDefinitions: (id) => string;\r\n      getParameterValues: (id) => any;\r\n    };\r\n    renderBatch?: (browserRendererId: number, batchAddress: Pointer) => void;\r\n    getConfig?: (fileName: string) => Uint8Array | undefined;\r\n    getApplicationEnvironment?: () => string;\r\n    dotNetCriticalError?: any;\r\n    loadLazyAssembly?: any;\r\n    loadSatelliteAssemblies?: any;\r\n    sendJSDataStream?: (data: any, streamId: number, chunkSize: number) => void;\r\n    getJSDataStreamChunk?: (data: any, position: number, chunkSize: number) => Promise<Uint8Array>;\r\n    receiveWebAssemblyDotNetDataStream?: (streamId: number, data: any, bytesRead: number, errorMessage: string) => void;\r\n    receiveWebViewDotNetDataStream?: (streamId: number, data: any, bytesRead: number, errorMessage: string) => void;\r\n    attachWebRendererInterop?: typeof attachWebRendererInterop;\r\n    loadWebAssemblyQuicklyTimeout?: number;\r\n    isBlazorWeb?: boolean;\r\n\r\n    // JSExport APIs\r\n    dotNetExports?: {\r\n      InvokeDotNet: (assemblyName: string | null, methodIdentifier: string, dotNetObjectId: number, argsJson: string) => string | null;\r\n      EndInvokeJS: (argsJson: string) => void;\r\n      BeginInvokeDotNet: (callId: string | null, assemblyNameOrDotNetObjectId: string, methodIdentifier: string, argsJson: string) => void;\r\n      ReceiveByteArrayFromJS: (id: number, data: Uint8Array) => void;\r\n      UpdateRootComponentsCore: (operationsJson: string) => void;\r\n    }\r\n\r\n    // APIs invoked by hot reload\r\n    applyHotReload?: (id: string, metadataDelta: string, ilDelta: string, pdbDelta: string | undefined) => void;\r\n    getApplyUpdateCapabilities?: () => string;\r\n    hotReloadApplied?: () => void;\r\n  }\r\n}\r\n\r\nexport const Blazor: IBlazor = {\r\n  navigateTo,\r\n  registerCustomEventType,\r\n  blazekit: {\r\n    loadComponents: () => {\r\n      console.log('Loading components...');\r\n    },\r\n    hasWebAssemblyStarted: () => false,\r\n  },\r\n  rootComponents: RootComponentsFunctions,\r\n  runtime: {} as RuntimeAPI,\r\n  _internal: {\r\n    navigationManager: navigationManagerInternalFunctions,\r\n    domWrapper: domFunctions,\r\n    Virtualize,\r\n    PageTitle,\r\n    InputFile,\r\n    NavigationLock,\r\n    getJSDataStreamChunk: getNextChunk,\r\n    attachWebRendererInterop,\r\n  },\r\n};\r\n\r\n// Make the following APIs available in global scope for invocation from JS\r\nwindow['Blazor'] = Blazor;\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n  /** Log level for very low severity diagnostic messages. */\r\n  Trace = 0,\r\n  /** Log level for low severity diagnostic messages. */\r\n  Debug = 1,\r\n  /** Log level for informational diagnostic messages. */\r\n  Information = 2,\r\n  /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n  Warning = 3,\r\n  /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n  Error = 4,\r\n  /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n  Critical = 5,\r\n  /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n  None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface Logger {\r\n  /** Called by the framework to emit a diagnostic message.\r\n   *\r\n   * @param {LogLevel} logLevel The severity level of the message.\r\n   * @param {string} message The message.\r\n   */\r\n  log(logLevel: LogLevel, message: string | Error): void;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n/* eslint-disable no-console */\r\n\r\nimport { Logger, LogLevel } from './Logger';\r\n\r\nexport class NullLogger implements Logger {\r\n  public static instance: Logger = new NullLogger();\r\n\r\n  public log(_logLevel: LogLevel, _message: string): void { // eslint-disable-line @typescript-eslint/no-unused-vars\r\n  }\r\n}\r\n\r\nexport class ConsoleLogger implements Logger {\r\n  private readonly minLevel: LogLevel;\r\n\r\n  public constructor(minimumLogLevel: LogLevel) {\r\n    this.minLevel = minimumLogLevel;\r\n  }\r\n\r\n  public log(logLevel: LogLevel, message: string | Error): void {\r\n    if (logLevel >= this.minLevel) {\r\n      const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n      switch (logLevel) {\r\n        case LogLevel.Critical:\r\n        case LogLevel.Error:\r\n          console.error(msg);\r\n          break;\r\n        case LogLevel.Warning:\r\n          console.warn(msg);\r\n          break;\r\n        case LogLevel.Information:\r\n          console.info(msg);\r\n          break;\r\n        default:\r\n          // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n          console.log(msg);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport function discoverComponents(root: Node, type: 'webassembly' | 'server' | 'auto'): ComponentDescriptor[] {\r\n  switch (type) {\r\n    case 'webassembly':\r\n      return discoverWebAssemblyComponents(root);\r\n    case 'server':\r\n      return discoverServerComponents(root);\r\n    case 'auto':\r\n      return discoverAutoComponents(root);\r\n  }\r\n}\r\n\r\nconst blazorServerStateCommentRegularExpression = /^\\s*Blazor-Server-Component-State:(?<state>[a-zA-Z0-9+/=]+)$/;\r\nconst blazorWebAssemblyStateCommentRegularExpression = /^\\s*Blazor-WebAssembly-Component-State:(?<state>[a-zA-Z0-9+/=]+)$/;\r\nconst blazorWebInitializerCommentRegularExpression = /^\\s*Blazor-Web-Initializers:(?<initializers>[a-zA-Z0-9+/=]+)$/;\r\n\r\nexport function discoverServerPersistedState(node: Node): string | null | undefined {\r\n  return discoverBlazorComment(node, blazorServerStateCommentRegularExpression);\r\n}\r\n\r\nexport function discoverWebAssemblyPersistedState(node: Node): string | null | undefined {\r\n  return discoverBlazorComment(node, blazorWebAssemblyStateCommentRegularExpression);\r\n}\r\n\r\nexport function discoverWebInitializers(node: Node): string | null | undefined {\r\n  return discoverBlazorComment(node, blazorWebInitializerCommentRegularExpression, 'initializers');\r\n}\r\n\r\nfunction discoverBlazorComment(node: Node, comment: RegExp, captureName = 'state'): string | null | undefined {\r\n  if (node.nodeType === Node.COMMENT_NODE) {\r\n    const content = node.textContent || '';\r\n    const parsedState = comment.exec(content);\r\n    const value = parsedState && parsedState.groups && parsedState.groups[captureName];\r\n    if (value){\r\n      node.parentNode?.removeChild(node);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  if (!node.hasChildNodes()) {\r\n    return;\r\n  }\r\n\r\n  const nodes = node.childNodes;\r\n  for (let index = 0; index < nodes.length; index++) {\r\n    const candidate = nodes[index];\r\n    const result = discoverBlazorComment(candidate, comment, captureName);\r\n    if (result){\r\n      return result;\r\n    }\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nfunction discoverServerComponents(root: Node): ServerComponentDescriptor[] {\r\n  const componentComments = resolveComponentComments(root, 'server') as ServerComponentDescriptor[];\r\n  return componentComments.sort((a, b): number => a.sequence - b.sequence);\r\n}\r\n\r\nfunction discoverWebAssemblyComponents(node: Node): WebAssemblyComponentDescriptor[] {\r\n  const componentComments = resolveComponentComments(node, 'webassembly') as WebAssemblyComponentDescriptor[];\r\n  return componentComments;\r\n}\r\n\r\nfunction discoverAutoComponents(node: Node): AutoComponentDescriptor[] {\r\n  const componentComments = resolveComponentComments(node, 'auto') as AutoComponentDescriptor[];\r\n  return componentComments;\r\n}\r\n\r\nfunction resolveComponentComments(node: Node, type: 'webassembly' | 'server' | 'auto'): ComponentDescriptor[] {\r\n  const result: ComponentDescriptor[] = [];\r\n  const childNodeIterator = new ComponentCommentIterator(node.childNodes);\r\n  while (childNodeIterator.next() && childNodeIterator.currentElement) {\r\n    const componentComment = getComponentComment(childNodeIterator, type);\r\n    if (componentComment) {\r\n      result.push(componentComment);\r\n    } else if (childNodeIterator.currentElement.hasChildNodes()) {\r\n      const childResults = resolveComponentComments(childNodeIterator.currentElement, type);\r\n      for (let j = 0; j < childResults.length; j++) {\r\n        const childResult = childResults[j];\r\n        result.push(childResult);\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst blazorCommentRegularExpression = new RegExp(/^\\s*Blazor:[^{]*(?<descriptor>.*)$/);\r\n\r\nfunction getComponentComment(commentNodeIterator: ComponentCommentIterator, type: 'webassembly' | 'server' | 'auto'): ComponentDescriptor | undefined {\r\n  const candidateStart = commentNodeIterator.currentElement;\r\n\r\n  if (!candidateStart || candidateStart.nodeType !== Node.COMMENT_NODE) {\r\n    return;\r\n  }\r\n  if (candidateStart.textContent) {\r\n    const definition = blazorCommentRegularExpression.exec(candidateStart.textContent);\r\n    const json = definition && definition.groups && definition.groups['descriptor'];\r\n\r\n    if (json) {\r\n      assertNotDirectlyOnDocument(candidateStart);\r\n      try {\r\n        const componentComment = parseCommentPayload(json);\r\n\r\n        // Regardless of whether this comment matches the type we're looking for, we still need to move the iterator\r\n        // on to its end position since we don't want to recurse into unrelated prerendered components, nor do we want to get confused\r\n        // by the end marker.\r\n        const candidateEnd = getComponentEndComment(componentComment, candidateStart as Comment, commentNodeIterator);\r\n\r\n        if (type !== componentComment.type) {\r\n          return undefined;\r\n        }\r\n\r\n        switch (componentComment.type) {\r\n          case 'webassembly':\r\n            return createWebAssemblyComponentComment(componentComment, candidateStart as Comment, candidateEnd);\r\n          case 'server':\r\n            return createServerComponentComment(componentComment, candidateStart as Comment, candidateEnd);\r\n          case 'auto':\r\n            return createAutoComponentComment(componentComment, candidateStart as Comment, candidateEnd);\r\n        }\r\n      } catch (error) {\r\n        throw new Error(`Found malformed component comment at ${candidateStart.textContent}`);\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseCommentPayload(json: string): ServerComponentMarker | WebAssemblyComponentMarker | AutoComponentMarker {\r\n  const payload = JSON.parse(json);\r\n  const { type } = payload;\r\n  if (type !== 'server' && type !== 'webassembly' && type !== 'auto') {\r\n    throw new Error(`Invalid component type '${type}'.`);\r\n  }\r\n\r\n  return payload;\r\n}\r\n\r\nfunction assertNotDirectlyOnDocument(marker: Node) {\r\n  if (marker.parentNode instanceof Document) {\r\n    throw new Error('Root components cannot be marked as interactive. The <html> element must be rendered statically so that scripts are not evaluated multiple times.');\r\n  }\r\n}\r\n\r\nfunction getComponentEndComment(payload: ComponentMarker, start: Comment, iterator: ComponentCommentIterator): Comment | undefined {\r\n  const { prerenderId } = payload;\r\n  if (!prerenderId) {\r\n    return undefined;\r\n  }\r\n\r\n  while (iterator.next() && iterator.currentElement) {\r\n    const node = iterator.currentElement;\r\n    if (node.nodeType !== Node.COMMENT_NODE) {\r\n      continue;\r\n    }\r\n    if (!node.textContent) {\r\n      continue;\r\n    }\r\n\r\n    const definition = blazorCommentRegularExpression.exec(node.textContent);\r\n    const json = definition && definition[1];\r\n    if (!json) {\r\n      continue;\r\n    }\r\n\r\n    validateEndComponentPayload(json, prerenderId);\r\n\r\n    return node as Comment;\r\n  }\r\n\r\n  throw new Error(`Could not find an end component comment for '${start}'.`);\r\n}\r\n\r\nlet nextUniqueDescriptorId = 0;\r\n\r\nfunction createServerComponentComment(payload: ServerComponentMarker, start: Comment, end: Comment | undefined): ServerComponentDescriptor {\r\n  validateServerComponentPayload(payload);\r\n\r\n  return {\r\n    ...payload,\r\n    uniqueId: nextUniqueDescriptorId++,\r\n    start,\r\n    end,\r\n  };\r\n}\r\n\r\nfunction createWebAssemblyComponentComment(payload: WebAssemblyComponentMarker, start: Comment, end: Comment | undefined): WebAssemblyComponentDescriptor {\r\n  validateWebAssemblyComponentPayload(payload);\r\n\r\n  return {\r\n    ...payload,\r\n    uniqueId: nextUniqueDescriptorId++,\r\n    start,\r\n    end,\r\n  };\r\n}\r\n\r\nfunction createAutoComponentComment(payload: AutoComponentMarker, start: Comment, end: Comment | undefined): AutoComponentDescriptor {\r\n  validateServerComponentPayload(payload);\r\n  validateWebAssemblyComponentPayload(payload);\r\n\r\n  return {\r\n    ...payload,\r\n    uniqueId: nextUniqueDescriptorId++,\r\n    start,\r\n    end,\r\n  };\r\n}\r\n\r\nfunction validateServerComponentPayload(payload: ServerMarkerData) {\r\n  const { descriptor, sequence } = payload;\r\n\r\n  if (!descriptor) {\r\n    throw new Error('descriptor must be defined when using a descriptor.');\r\n  }\r\n\r\n  if (sequence === undefined) {\r\n    throw new Error('sequence must be defined when using a descriptor.');\r\n  }\r\n\r\n  if (!Number.isInteger(sequence)) {\r\n    throw new Error(`Error parsing the sequence '${sequence}' for component '${JSON.stringify(payload)}'`);\r\n  }\r\n}\r\n\r\nfunction validateWebAssemblyComponentPayload(payload: WebAssemblyMarkerData) {\r\n  const { assembly, typeName } = payload;\r\n\r\n  if (!assembly) {\r\n    throw new Error('assembly must be defined when using a descriptor.');\r\n  }\r\n\r\n  if (!typeName) {\r\n    throw new Error('typeName must be defined when using a descriptor.');\r\n  }\r\n\r\n  // Parameter definitions and values come Base64 encoded from the server, since they contain random data and can make the\r\n  // comment invalid. We could unencode them in .NET Code, but that would be slower to do and we can leverage the fact that\r\n  // JS provides a native function that will be much faster and that we are doing this work while we are fetching\r\n  // blazor.boot.json\r\n  payload.parameterDefinitions = payload.parameterDefinitions && atob(payload.parameterDefinitions);\r\n  payload.parameterValues = payload.parameterValues && atob(payload.parameterValues);\r\n}\r\n\r\nfunction validateEndComponentPayload(json: string, prerenderId: string): void {\r\n  const payload = JSON.parse(json) as ComponentEndMarker;\r\n  if (Object.keys(payload).length !== 1) {\r\n    throw new Error(`Invalid end of component comment: '${json}'`);\r\n  }\r\n  const prerenderEndId = payload.prerenderId;\r\n  if (!prerenderEndId) {\r\n    throw new Error(`End of component comment must have a value for the prerendered property: '${json}'`);\r\n  }\r\n  if (prerenderEndId !== prerenderId) {\r\n    throw new Error(`End of component comment prerendered property must match the start comment prerender id: '${prerenderId}', '${prerenderEndId}'`);\r\n  }\r\n}\r\n\r\nclass ComponentCommentIterator {\r\n  private childNodes: NodeListOf<ChildNode>;\r\n\r\n  private currentIndex: number;\r\n\r\n  private length: number;\r\n\r\n  public currentElement: ChildNode | undefined;\r\n\r\n  public constructor(childNodes: NodeListOf<ChildNode>) {\r\n    this.childNodes = childNodes;\r\n    this.currentIndex = -1;\r\n    this.length = childNodes.length;\r\n  }\r\n\r\n  public next(): boolean {\r\n    this.currentIndex++;\r\n    if (this.currentIndex < this.length) {\r\n      this.currentElement = this.childNodes[this.currentIndex];\r\n      return true;\r\n    } else {\r\n      this.currentElement = undefined;\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport function descriptorToMarker(descriptor: ComponentDescriptor): ComponentMarker {\r\n  return {\r\n    ...descriptor,\r\n\r\n    // We remove descriptor-specific information to produce a JSON-serializable marker\r\n    start: undefined,\r\n    end: undefined,\r\n  } as unknown as ComponentMarker;\r\n}\r\n\r\nfunction doKeysMatch(a: MarkerKey | undefined, b: MarkerKey | undefined) {\r\n  if (!a || !b) {\r\n    // Unspecified keys are never considered to be matching\r\n    return false;\r\n  }\r\n\r\n  return a.locationHash === b.locationHash && a.formattedComponentKey === b.formattedComponentKey;\r\n}\r\n\r\nexport function canMergeDescriptors(target: ComponentDescriptor, source: ComponentDescriptor): boolean {\r\n  return target.type === source.type && doKeysMatch(target.key, source.key);\r\n}\r\n\r\nexport function mergeDescriptors(target: ComponentDescriptor, source: ComponentDescriptor) {\r\n  if (!canMergeDescriptors(target, source)) {\r\n    throw new Error(`Cannot merge mismatching component descriptors:\\n${JSON.stringify(target)}\\nand\\n${JSON.stringify(source)}`);\r\n  }\r\n\r\n  target.uniqueId = source.uniqueId;\r\n\r\n  if (target.type === 'webassembly' || target.type === 'auto') {\r\n    const sourceWebAssemblyData = source as WebAssemblyMarkerData;\r\n    target.parameterDefinitions = sourceWebAssemblyData.parameterDefinitions;\r\n    target.parameterValues = sourceWebAssemblyData.parameterValues;\r\n  }\r\n\r\n  if (target.type === 'server' || target.type === 'auto') {\r\n    const sourceServerData = source as ServerMarkerData;\r\n    target.sequence = sourceServerData.sequence;\r\n    target.descriptor = sourceServerData.descriptor;\r\n  }\r\n}\r\n\r\nexport type ComponentDescriptor = ServerComponentDescriptor | WebAssemblyComponentDescriptor | AutoComponentDescriptor;\r\nexport type ComponentMarker = ServerComponentMarker | WebAssemblyComponentMarker | AutoComponentMarker;\r\n\r\nexport type ServerComponentDescriptor = ServerComponentMarker & DescriptorData;\r\nexport type WebAssemblyComponentDescriptor = WebAssemblyComponentMarker & DescriptorData;\r\nexport type AutoComponentDescriptor = AutoComponentMarker & DescriptorData;\r\n\r\ntype DescriptorData = {\r\n  uniqueId: number;\r\n  start: Comment;\r\n  end?: Comment;\r\n};\r\n\r\ntype ComponentEndMarker = {\r\n  prerenderId: string;\r\n}\r\n\r\ntype ServerComponentMarker = {\r\n  type: 'server';\r\n} & ServerMarkerData;\r\n\r\ntype WebAssemblyComponentMarker = {\r\n  type: 'webassembly';\r\n} & WebAssemblyMarkerData;\r\n\r\ntype AutoComponentMarker = {\r\n  type: 'auto';\r\n} & ServerMarkerData & WebAssemblyMarkerData;\r\n\r\ntype CommonMarkerData = {\r\n  type: string;\r\n  prerenderId?: string;\r\n  key?: MarkerKey;\r\n}\r\n\r\ntype MarkerKey = {\r\n  locationHash: string;\r\n  formattedComponentKey?: string;\r\n}\r\n\r\ntype ServerMarkerData = {\r\n  sequence: number;\r\n  descriptor: string;\r\n} & CommonMarkerData;\r\n\r\ntype WebAssemblyMarkerData = {\r\n  typeName: string;\r\n  assembly: string;\r\n  parameterDefinitions: string;\r\n  parameterValues: string;\r\n} & CommonMarkerData;\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    static write(output) {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n    static parse(input) {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\nTextMessageFormat.RecordSeparatorCode = 0x1e;\r\nTextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n//# sourceMappingURL=TextMessageFormat.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport var LogLevel;\r\n(function (LogLevel) {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\r\n    /** Log level for low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\r\n    /** Log level for informational diagnostic messages. */\r\n    LogLevel[LogLevel[\"Information\"] = 2] = \"Information\";\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    LogLevel[LogLevel[\"Warning\"] = 3] = \"Warning\";\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    LogLevel[LogLevel[\"Critical\"] = 5] = \"Critical\";\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    LogLevel[LogLevel[\"None\"] = 6] = \"None\";\r\n})(LogLevel || (LogLevel = {}));\r\n//# sourceMappingURL=ILogger.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger {\r\n    constructor() { }\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    log(_logLevel, _message) {\r\n    }\r\n}\r\n/** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\nNullLogger.instance = new NullLogger();\r\n//# sourceMappingURL=Loggers.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION = \"0.0.0-DEV_BUILD\";\r\n/** @private */\r\nexport class Arg {\r\n    static isRequired(val, name) {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    static isNotEmpty(val, name) {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n    static isIn(val, values, name) {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class Platform {\r\n    // react-native has a window but no document so we should check both\r\n    static get isBrowser() {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"object\";\r\n    }\r\n    // WebWorkers don't have a window object so the isBrowser check would fail\r\n    static get isWebWorker() {\r\n        return !Platform.isNode && typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n    // react-native has a window but no document\r\n    static get isReactNative() {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"undefined\";\r\n    }\r\n    // Node apps shouldn't have a window object, but WebWorkers don't either\r\n    // so we need to check for both WebWorker and window\r\n    static get isNode() {\r\n        return typeof process !== \"undefined\" && process.release && process.release.name === \"node\";\r\n    }\r\n}\r\n/** @private */\r\nexport function getDataDetail(data, includeContent) {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    }\r\n    else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n/** @private */\r\nexport function formatArrayBuffer(data) {\r\n    const view = new Uint8Array(data);\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val) {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n/** @private */\r\nexport async function sendMessage(logger, transportName, httpClient, url, content, options) {\r\n    const headers = {};\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent)}.`);\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers },\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n/** @private */\r\nexport function createLogger(logger) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n    if (logger.log !== undefined) {\r\n        return logger;\r\n    }\r\n    return new ConsoleLogger(logger);\r\n}\r\n/** @private */\r\nexport class SubjectSubscription {\r\n    constructor(subject, observer) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n    dispose() {\r\n        const index = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class ConsoleLogger {\r\n    constructor(minimumLogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n    log(logLevel, message) {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport function getUserAgentHeader() {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion())];\r\n}\r\n/** @private */\r\nexport function constructUserAgent(version, os, runtime, runtimeVersion) {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent = \"Microsoft SignalR/\";\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    }\r\n    else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n    userAgent += `${runtime}`;\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    }\r\n    else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName() {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    }\r\n    else {\r\n        return \"\";\r\n    }\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion() {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\nfunction getRuntime() {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    }\r\n    else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n/** @private */\r\nexport function getErrorString(e) {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    }\r\n    else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n/** @private */\r\nexport function getGlobalThis() {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}\r\n//# sourceMappingURL=Utils.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    writeHandshakeRequest(handshakeRequest) {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n    parseHandshakeResponse(data) {\r\n        let messageData;\r\n        let remainingData;\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        }\r\n        else {\r\n            const textData = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage = response;\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n//# sourceMappingURL=HandshakeProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage, statusCode) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when multiple errors have occurred. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message, innerErrors) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.innerErrors = innerErrors;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n//# sourceMappingURL=Errors.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Defines the type of a Hub Message. */\r\nexport var MessageType;\r\n(function (MessageType) {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    MessageType[MessageType[\"Invocation\"] = 1] = \"Invocation\";\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    MessageType[MessageType[\"StreamItem\"] = 2] = \"StreamItem\";\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    MessageType[MessageType[\"Completion\"] = 3] = \"Completion\";\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    MessageType[MessageType[\"StreamInvocation\"] = 4] = \"StreamInvocation\";\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    MessageType[MessageType[\"CancelInvocation\"] = 5] = \"CancelInvocation\";\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    MessageType[MessageType[\"Ping\"] = 6] = \"Ping\";\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    MessageType[MessageType[\"Close\"] = 7] = \"Close\";\r\n    MessageType[MessageType[\"Ack\"] = 8] = \"Ack\";\r\n    MessageType[MessageType[\"Sequence\"] = 9] = \"Sequence\";\r\n})(MessageType || (MessageType = {}));\r\n//# sourceMappingURL=IHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\r\nimport { AbortError } from \"./Errors\";\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\nimport { MessageBuffer } from \"./MessageBuffer\";\r\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\r\nconst DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE = 100000;\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport var HubConnectionState;\r\n(function (HubConnectionState) {\r\n    /** The hub connection is disconnected. */\r\n    HubConnectionState[\"Disconnected\"] = \"Disconnected\";\r\n    /** The hub connection is connecting. */\r\n    HubConnectionState[\"Connecting\"] = \"Connecting\";\r\n    /** The hub connection is connected. */\r\n    HubConnectionState[\"Connected\"] = \"Connected\";\r\n    /** The hub connection is disconnecting. */\r\n    HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\r\n    /** The hub connection is reconnecting. */\r\n    HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\r\n})(HubConnectionState || (HubConnectionState = {}));\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    static create(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize) {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize);\r\n    }\r\n    constructor(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize) {\r\n        this._nextKeepAlive = 0;\r\n        this._freezeEventListener = () => {\r\n            this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n        };\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.serverTimeoutInMilliseconds = serverTimeoutInMilliseconds !== null && serverTimeoutInMilliseconds !== void 0 ? serverTimeoutInMilliseconds : DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = keepAliveIntervalInMilliseconds !== null && keepAliveIntervalInMilliseconds !== void 0 ? keepAliveIntervalInMilliseconds : DEFAULT_PING_INTERVAL_IN_MS;\r\n        this._statefulReconnectBufferSize = statefulReconnectBufferSize !== null && statefulReconnectBufferSize !== void 0 ? statefulReconnectBufferSize : DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE;\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n        this.connection.onreceive = (data) => this._processIncomingData(data);\r\n        this.connection.onclose = (error) => this._connectionClosed(error);\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state() {\r\n        return this._connectionState;\r\n    }\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId() {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl() {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n        this.connection.baseUrl = url;\r\n    }\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    start() {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n    async _startWithStateTransitions() {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n        try {\r\n            await this._startInternal();\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        }\r\n        catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n        await this.connection.start(this._protocol.transferFormat);\r\n        try {\r\n            let version = this._protocol.version;\r\n            if (!this.connection.features.reconnect) {\r\n                // Stateful Reconnect starts with HubProtocol version 2, newer clients connecting to older servers will fail to connect due to\r\n                // the handshake only supporting version 1, so we will try to send version 1 during the handshake to keep old servers working.\r\n                version = 1;\r\n            }\r\n            const handshakeRequest = {\r\n                protocol: this._protocol.name,\r\n                version,\r\n            };\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n            await handshakePromise;\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n            const useStatefulReconnect = this.connection.features.reconnect || false;\r\n            if (useStatefulReconnect) {\r\n                this._messageBuffer = new MessageBuffer(this._protocol, this.connection, this._statefulReconnectBufferSize);\r\n                this.connection.features.disconnected = this._messageBuffer._disconnected.bind(this._messageBuffer);\r\n                this.connection.features.resend = () => {\r\n                    if (this._messageBuffer) {\r\n                        return this._messageBuffer._resend();\r\n                    }\r\n                };\r\n            }\r\n            if (!this.connection.features.inherentKeepAlive) {\r\n                await this._sendMessage(this._cachedPingMessage);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    async stop() {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n        this.connection.features.reconnect = false;\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n    _stopInternal(error) {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        const state = this._connectionState;\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n        if (state === HubConnectionState.Connected) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._sendCloseMessage();\r\n        }\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new AbortError(\"The connection was stopped before the hub handshake could complete.\");\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n    async _sendCloseMessage() {\r\n        try {\r\n            await this._sendWithProtocol(this._createCloseMessage());\r\n        }\r\n        catch {\r\n            // Ignore, this is a best effort attempt to let the server know the client closed gracefully.\r\n        }\r\n    }\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    stream(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue;\r\n        const subject = new Subject();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n            else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    }\r\n                    else {\r\n                        subject.complete();\r\n                    }\r\n                }\r\n                else {\r\n                    subject.next((invocationEvent.item));\r\n                }\r\n            }\r\n        };\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n            subject.error(e);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n        });\r\n        this._launchStreams(streams, promiseQueue);\r\n        return subject;\r\n    }\r\n    _sendMessage(message) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    _sendWithProtocol(message) {\r\n        if (this._messageBuffer) {\r\n            return this._messageBuffer._send(message);\r\n        }\r\n        else {\r\n            return this._sendMessage(this._protocol.writeMessage(message));\r\n        }\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    send(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n        this._launchStreams(streams, sendPromise);\r\n        return sendPromise;\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    invoke(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n        const p = new Promise((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        }\r\n                        else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    }\r\n                    else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                reject(e);\r\n                // invocationId will always have a value for a non-blocking invocation\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n        return p;\r\n    }\r\n    on(methodName, newMethod) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n    off(methodName, method) {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            delete this._methods[methodName];\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    onclose(callback) {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    onreconnecting(callback) {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    onreconnected(callback) {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n    _processIncomingData(data) {\r\n        this._cleanupTimeout();\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n            for (const message of messages) {\r\n                if (this._messageBuffer && !this._messageBuffer._shouldProcessMessage(message)) {\r\n                    // Don't process the message, we are either waiting for a SequenceMessage or received a duplicate message\r\n                    continue;\r\n                }\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            }\r\n                            catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        }\r\n                        else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ack:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._ack(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Sequence:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._resetSequence(message);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        this._resetTimeoutPeriod();\r\n    }\r\n    _processHandshakeResponse(data) {\r\n        let responseMessage;\r\n        let remainingData;\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        }\r\n        catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n    _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n        this._cleanupPingTimer();\r\n    }\r\n    _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined) {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        }\r\n                        catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n    async _invokeClientMethod(invocationMessage) {\r\n        const methodName = invocationMessage.target.toLowerCase();\r\n        const methods = this._methods[methodName];\r\n        if (!methods) {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${methodName}' found.`);\r\n            // No handlers provided by client but the server is expecting a response still, so we send an error\r\n            if (invocationMessage.invocationId) {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                await this._sendWithProtocol(this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null));\r\n            }\r\n            return;\r\n        }\r\n        // Avoid issues with handlers removing themselves thus modifying the list while iterating through it\r\n        const methodsCopy = methods.slice();\r\n        // Server expects a response\r\n        const expectsResponse = invocationMessage.invocationId ? true : false;\r\n        // We preserve the last result or exception but still call all handlers\r\n        let res;\r\n        let exception;\r\n        let completionMessage;\r\n        for (const m of methodsCopy) {\r\n            try {\r\n                const prevRes = res;\r\n                res = await m.apply(this, invocationMessage.arguments);\r\n                if (expectsResponse && res && prevRes) {\r\n                    this._logger.log(LogLevel.Error, `Multiple results provided for '${methodName}'. Sending error to server.`);\r\n                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId, `Client provided multiple results.`, null);\r\n                }\r\n                // Ignore exception if we got a result after, the exception will be logged\r\n                exception = undefined;\r\n            }\r\n            catch (e) {\r\n                exception = e;\r\n                this._logger.log(LogLevel.Error, `A callback for the method '${methodName}' threw error '${e}'.`);\r\n            }\r\n        }\r\n        if (completionMessage) {\r\n            await this._sendWithProtocol(completionMessage);\r\n        }\r\n        else if (expectsResponse) {\r\n            // If there is an exception that means either no result was given or a handler after a result threw\r\n            if (exception) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, `${exception}`, null);\r\n            }\r\n            else if (res !== undefined) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, null, res);\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                // Client didn't provide a result or throw from a handler, server expects a response so we send an error\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null);\r\n            }\r\n            await this._sendWithProtocol(completionMessage);\r\n        }\r\n        else {\r\n            if (res) {\r\n                this._logger.log(LogLevel.Error, `Result given for '${methodName}' method but server is not expecting a result.`);\r\n            }\r\n        }\r\n    }\r\n    _connectionClosed(error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new AbortError(\"The underlying connection was closed before the hub handshake could complete.\");\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n    _completeClose(error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n            if (this._messageBuffer) {\r\n                this._messageBuffer._dispose(error !== null && error !== void 0 ? error : new Error(\"Connection closed.\"));\r\n                this._messageBuffer = undefined;\r\n            }\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    async _reconnect(error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n            try {\r\n                await this._startInternal();\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    }\r\n                    catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n        this._completeClose();\r\n    }\r\n    _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\r\n        try {\r\n            return this._reconnectPolicy.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n    _cancelCallbacksWithError(error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n            const callback = callbacks[key];\r\n            try {\r\n                callback(null, error);\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n            }\r\n        });\r\n    }\r\n    _cleanupPingTimer() {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n    _cleanupTimeout() {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n    _createInvocation(methodName, args, nonblocking, streamIds) {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    _launchStreams(streams, promiseQueue) {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    }\r\n                    else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    }\r\n                    else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n    _replaceStreamingParams(args) {\r\n        const streams = [];\r\n        const streamIds = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n        return [streams, streamIds];\r\n    }\r\n    _isObservable(arg) {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n    _createStreamInvocation(methodName, args, streamIds) {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n    _createCancelInvocation(id) {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n    _createStreamItemMessage(id, item) {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n    _createCompletionMessage(id, error, result) {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n    _createCloseMessage() {\r\n        return { type: MessageType.Close };\r\n    }\r\n}\r\n//# sourceMappingURL=HubConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { SubjectSubscription } from \"./Utils\";\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject {\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n    next(item) {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n    error(err) {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n    complete() {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n    subscribe(observer) {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n//# sourceMappingURL=Subject.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n/** @private */\r\nexport class MessageBuffer {\r\n    constructor(protocol, connection, bufferSize) {\r\n        this._bufferSize = 100000;\r\n        this._messages = [];\r\n        this._totalMessageCount = 0;\r\n        this._waitForSequenceMessage = false;\r\n        // Message IDs start at 1 and always increment by 1\r\n        this._nextReceivingSequenceId = 1;\r\n        this._latestReceivedSequenceId = 0;\r\n        this._bufferedByteCount = 0;\r\n        this._reconnectInProgress = false;\r\n        this._protocol = protocol;\r\n        this._connection = connection;\r\n        this._bufferSize = bufferSize;\r\n    }\r\n    async _send(message) {\r\n        const serializedMessage = this._protocol.writeMessage(message);\r\n        let backpressurePromise = Promise.resolve();\r\n        // Only count invocation messages. Acks, pings, etc. don't need to be resent on reconnect\r\n        if (this._isInvocationMessage(message)) {\r\n            this._totalMessageCount++;\r\n            let backpressurePromiseResolver = () => { };\r\n            let backpressurePromiseRejector = () => { };\r\n            if (isArrayBuffer(serializedMessage)) {\r\n                this._bufferedByteCount += serializedMessage.byteLength;\r\n            }\r\n            else {\r\n                this._bufferedByteCount += serializedMessage.length;\r\n            }\r\n            if (this._bufferedByteCount >= this._bufferSize) {\r\n                backpressurePromise = new Promise((resolve, reject) => {\r\n                    backpressurePromiseResolver = resolve;\r\n                    backpressurePromiseRejector = reject;\r\n                });\r\n            }\r\n            this._messages.push(new BufferedItem(serializedMessage, this._totalMessageCount, backpressurePromiseResolver, backpressurePromiseRejector));\r\n        }\r\n        try {\r\n            // If this is set it means we are reconnecting or resending\r\n            // We don't want to send on a disconnected connection\r\n            // And we don't want to send if resend is running since that would mean sending\r\n            // this message twice\r\n            if (!this._reconnectInProgress) {\r\n                await this._connection.send(serializedMessage);\r\n            }\r\n        }\r\n        catch {\r\n            this._disconnected();\r\n        }\r\n        await backpressurePromise;\r\n    }\r\n    _ack(ackMessage) {\r\n        let newestAckedMessage = -1;\r\n        // Find index of newest message being acked\r\n        for (let index = 0; index < this._messages.length; index++) {\r\n            const element = this._messages[index];\r\n            if (element._id <= ackMessage.sequenceId) {\r\n                newestAckedMessage = index;\r\n                if (isArrayBuffer(element._message)) {\r\n                    this._bufferedByteCount -= element._message.byteLength;\r\n                }\r\n                else {\r\n                    this._bufferedByteCount -= element._message.length;\r\n                }\r\n                // resolve items that have already been sent and acked\r\n                element._resolver();\r\n            }\r\n            else if (this._bufferedByteCount < this._bufferSize) {\r\n                // resolve items that now fall under the buffer limit but haven't been acked\r\n                element._resolver();\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (newestAckedMessage !== -1) {\r\n            // We're removing everything including the message pointed to, so add 1\r\n            this._messages = this._messages.slice(newestAckedMessage + 1);\r\n        }\r\n    }\r\n    _shouldProcessMessage(message) {\r\n        if (this._waitForSequenceMessage) {\r\n            if (message.type !== MessageType.Sequence) {\r\n                return false;\r\n            }\r\n            else {\r\n                this._waitForSequenceMessage = false;\r\n                return true;\r\n            }\r\n        }\r\n        // No special processing for acks, pings, etc.\r\n        if (!this._isInvocationMessage(message)) {\r\n            return true;\r\n        }\r\n        const currentId = this._nextReceivingSequenceId;\r\n        this._nextReceivingSequenceId++;\r\n        if (currentId <= this._latestReceivedSequenceId) {\r\n            if (currentId === this._latestReceivedSequenceId) {\r\n                // Should only hit this if we just reconnected and the server is sending\r\n                // Messages it has buffered, which would mean it hasn't seen an Ack for these messages\r\n                this._ackTimer();\r\n            }\r\n            // Ignore, this is a duplicate message\r\n            return false;\r\n        }\r\n        this._latestReceivedSequenceId = currentId;\r\n        // Only start the timer for sending an Ack message when we have a message to ack. This also conveniently solves\r\n        // timer throttling by not having a recursive timer, and by starting the timer via a network call (recv)\r\n        this._ackTimer();\r\n        return true;\r\n    }\r\n    _resetSequence(message) {\r\n        if (message.sequenceId > this._nextReceivingSequenceId) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._connection.stop(new Error(\"Sequence ID greater than amount of messages we've received.\"));\r\n            return;\r\n        }\r\n        this._nextReceivingSequenceId = message.sequenceId;\r\n    }\r\n    _disconnected() {\r\n        this._reconnectInProgress = true;\r\n        this._waitForSequenceMessage = true;\r\n    }\r\n    async _resend() {\r\n        const sequenceId = this._messages.length !== 0\r\n            ? this._messages[0]._id\r\n            : this._totalMessageCount + 1;\r\n        await this._connection.send(this._protocol.writeMessage({ type: MessageType.Sequence, sequenceId }));\r\n        // Get a local variable to the _messages, just in case messages are acked while resending\r\n        // Which would slice the _messages array (which creates a new copy)\r\n        const messages = this._messages;\r\n        for (const element of messages) {\r\n            await this._connection.send(element._message);\r\n        }\r\n        this._reconnectInProgress = false;\r\n    }\r\n    _dispose(error) {\r\n        error !== null && error !== void 0 ? error : (error = new Error(\"Unable to reconnect to server.\"));\r\n        // Unblock backpressure if any\r\n        for (const element of this._messages) {\r\n            element._rejector(error);\r\n        }\r\n    }\r\n    _isInvocationMessage(message) {\r\n        // There is no way to check if something implements an interface.\r\n        // So we individually check the messages in a switch statement.\r\n        // To make sure we don't miss any message types we rely on the compiler\r\n        // seeing the function returns a value and it will do the\r\n        // exhaustive check for us on the switch statement, since we don't use 'case default'\r\n        switch (message.type) {\r\n            case MessageType.Invocation:\r\n            case MessageType.StreamItem:\r\n            case MessageType.Completion:\r\n            case MessageType.StreamInvocation:\r\n            case MessageType.CancelInvocation:\r\n                return true;\r\n            case MessageType.Close:\r\n            case MessageType.Sequence:\r\n            case MessageType.Ping:\r\n            case MessageType.Ack:\r\n                return false;\r\n        }\r\n    }\r\n    _ackTimer() {\r\n        if (this._ackTimerHandle === undefined) {\r\n            this._ackTimerHandle = setTimeout(async () => {\r\n                try {\r\n                    if (!this._reconnectInProgress) {\r\n                        await this._connection.send(this._protocol.writeMessage({ type: MessageType.Ack, sequenceId: this._latestReceivedSequenceId }));\r\n                    }\r\n                    // Ignore errors, that means the connection is closed and we don't care about the Ack message anymore.\r\n                }\r\n                catch { }\r\n                clearTimeout(this._ackTimerHandle);\r\n                this._ackTimerHandle = undefined;\r\n                // 1 second delay so we don't spam Ack messages if there are many messages being received at once.\r\n            }, 1000);\r\n        }\r\n    }\r\n}\r\nclass BufferedItem {\r\n    constructor(message, id, resolver, rejector) {\r\n        this._message = message;\r\n        this._id = id;\r\n        this._resolver = resolver;\r\n        this._rejector = rejector;\r\n    }\r\n}\r\n//# sourceMappingURL=MessageBuffer.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n/** @private */\r\nexport class DefaultReconnectPolicy {\r\n    constructor(retryDelays) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n    nextRetryDelayInMilliseconds(retryContext) {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultReconnectPolicy.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nexport class HeaderNames {\r\n}\r\nHeaderNames.Authorization = \"Authorization\";\r\nHeaderNames.Cookie = \"Cookie\";\r\n//# sourceMappingURL=HeaderNames.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    constructor(statusCode, statusText, content) {\r\n        this.statusCode = statusCode;\r\n        this.statusText = statusText;\r\n        this.content = content;\r\n    }\r\n}\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport class HttpClient {\r\n    get(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n    post(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n    delete(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    getCookieString(url) {\r\n        return \"\";\r\n    }\r\n}\r\n//# sourceMappingURL=HttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\n/** @private */\r\nexport class AccessTokenHttpClient extends HttpClient {\r\n    constructor(innerClient, accessTokenFactory) {\r\n        super();\r\n        this._innerClient = innerClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n    }\r\n    async send(request) {\r\n        let allowRetry = true;\r\n        if (this._accessTokenFactory && (!this._accessToken || (request.url && request.url.indexOf(\"/negotiate?\") > 0))) {\r\n            // don't retry if the request is a negotiate or if we just got a potentially new token from the access token factory\r\n            allowRetry = false;\r\n            this._accessToken = await this._accessTokenFactory();\r\n        }\r\n        this._setAuthorizationHeader(request);\r\n        const response = await this._innerClient.send(request);\r\n        if (allowRetry && response.statusCode === 401 && this._accessTokenFactory) {\r\n            this._accessToken = await this._accessTokenFactory();\r\n            this._setAuthorizationHeader(request);\r\n            return await this._innerClient.send(request);\r\n        }\r\n        return response;\r\n    }\r\n    _setAuthorizationHeader(request) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (this._accessToken) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${this._accessToken}`;\r\n        }\r\n        // don't remove the header if there isn't an access token factory, the user manually added the header in this case\r\n        else if (this._accessTokenFactory) {\r\n            if (request.headers[HeaderNames.Authorization]) {\r\n                delete request.headers[HeaderNames.Authorization];\r\n            }\r\n        }\r\n    }\r\n    getCookieString(url) {\r\n        return this._innerClient.getCookieString(url);\r\n    }\r\n}\r\n//# sourceMappingURL=AccessTokenHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis, isArrayBuffer } from \"./Utils\";\r\nimport { configureAbortController, configureFetch } from \"./DynamicImports\";\r\nexport class FetchHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n        // This is how you do \"reference\" arguments\r\n        const fetchObj = { _fetchType: undefined, _jar: undefined };\r\n        if (configureFetch(fetchObj)) {\r\n            this._fetchType = fetchObj._fetchType;\r\n            this._jar = fetchObj._jar;\r\n        }\r\n        else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        this._abortControllerType = AbortController;\r\n        const abortObj = { _abortControllerType: this._abortControllerType };\r\n        if (configureAbortController(abortObj)) {\r\n            this._abortControllerType = abortObj._abortControllerType;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    async send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n        const abortController = new this._abortControllerType();\r\n        let error;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n        if (request.content === \"\") {\r\n            request.content = undefined;\r\n        }\r\n        if (request.content) {\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            request.headers = request.headers || {};\r\n            if (isArrayBuffer(request.content)) {\r\n                request.headers[\"Content-Type\"] = \"application/octet-stream\";\r\n            }\r\n            else {\r\n                request.headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\r\n            }\r\n        }\r\n        let response;\r\n        try {\r\n            response = await this._fetchType(request.url, {\r\n                body: request.content,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        }\r\n        catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(LogLevel.Warning, `Error from HTTP request. ${e}.`);\r\n            throw e;\r\n        }\r\n        finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\");\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n        return new HttpResponse(response.status, response.statusText, payload);\r\n    }\r\n    getCookieString(url) {\r\n        let cookies = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\nfunction deserializeContent(response, responseType) {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n    return content;\r\n}\r\n//# sourceMappingURL=FetchHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { Platform } from \"./Utils\";\r\n/** @private */\r\nexport function configureFetch(obj) {\r\n    // Node added a fetch implementation to the global scope starting in v18.\r\n    // We need to add a cookie jar in node to be able to share cookies with WebSocket\r\n    if (typeof fetch === \"undefined\" || Platform.isNode) {\r\n        // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        obj._jar = new (require(\"tough-cookie\")).CookieJar();\r\n        if (typeof fetch === \"undefined\") {\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            obj._fetchType = require(\"node-fetch\");\r\n        }\r\n        else {\r\n            // Use fetch from Node if available\r\n            obj._fetchType = fetch;\r\n        }\r\n        // node-fetch doesn't have a nice API for getting and setting cookies\r\n        // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        obj._fetchType = require(\"fetch-cookie\")(obj._fetchType, obj._jar);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/** @private */\r\nexport function configureAbortController(obj) {\r\n    if (typeof AbortController === \"undefined\") {\r\n        // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n        obj._abortControllerType = require(\"abort-controller\");\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/** @private */\r\nexport function getWS() {\r\n    return require(\"ws\");\r\n}\r\n/** @private */\r\nexport function getEventSource() {\r\n    return require(\"eventsource\");\r\n}\r\n//# sourceMappingURL=DynamicImports.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\nexport class XhrHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            if (request.content === \"\") {\r\n                request.content = undefined;\r\n            }\r\n            if (request.content) {\r\n                // Explicitly setting the Content-Type header for React Native on Android platform.\r\n                if (isArrayBuffer(request.content)) {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\r\n                }\r\n                else {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n                }\r\n            }\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                    xhr.setRequestHeader(header, headers[header]);\r\n                });\r\n            }\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                }\r\n                else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n            xhr.send(request.content);\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=XhrHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    constructor(logger) {\r\n        super();\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        }\r\n        else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        }\r\n        else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return this._httpClient.send(request);\r\n    }\r\n    getCookieString(url) {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport var HttpTransportType;\r\n(function (HttpTransportType) {\r\n    /** Specifies no transport preference. */\r\n    HttpTransportType[HttpTransportType[\"None\"] = 0] = \"None\";\r\n    /** Specifies the WebSockets transport. */\r\n    HttpTransportType[HttpTransportType[\"WebSockets\"] = 1] = \"WebSockets\";\r\n    /** Specifies the Server-Sent Events transport. */\r\n    HttpTransportType[HttpTransportType[\"ServerSentEvents\"] = 2] = \"ServerSentEvents\";\r\n    /** Specifies the Long Polling transport. */\r\n    HttpTransportType[HttpTransportType[\"LongPolling\"] = 4] = \"LongPolling\";\r\n})(HttpTransportType || (HttpTransportType = {}));\r\n/** Specifies the transfer format for a connection. */\r\nexport var TransferFormat;\r\n(function (TransferFormat) {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Text\"] = 1] = \"Text\";\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Binary\"] = 2] = \"Binary\";\r\n})(TransferFormat || (TransferFormat = {}));\r\n//# sourceMappingURL=ITransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController {\r\n    constructor() {\r\n        this._isAborted = false;\r\n        this.onabort = null;\r\n    }\r\n    abort() {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n    get signal() {\r\n        return this;\r\n    }\r\n    get aborted() {\r\n        return this._isAborted;\r\n    }\r\n}\r\n//# sourceMappingURL=AbortController.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport {\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n    constructor(httpClient, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n        this._running = false;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._url = url;\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n        const pollOptions = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        }\r\n        else {\r\n            this._running = true;\r\n        }\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n    async _poll(url, pollOptions) {\r\n        try {\r\n            while (this._running) {\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n                        this._running = false;\r\n                    }\r\n                    else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    }\r\n                    else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    }\r\n                    else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                        else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n    async send(data) {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, data, this._options);\r\n    }\r\n    async stop() {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n        try {\r\n            await this._receiving;\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n            const deleteOptions = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            let error;\r\n            try {\r\n                await this._httpClient.delete(this._url, deleteOptions);\r\n            }\r\n            catch (err) {\r\n                error = err;\r\n            }\r\n            if (error) {\r\n                if (error instanceof HttpError) {\r\n                    if (error.statusCode === 404) {\r\n                        this._logger.log(LogLevel.Trace, \"(LongPolling transport) A 404 response was returned from sending a DELETE request.\");\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Error sending a DELETE request: ${error}`);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n    _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=LongPollingTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n/** @private */\r\nexport class ServerSentEventsTransport {\r\n    constructor(httpClient, accessToken, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessToken = accessToken;\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n        // set url before accessTokenFactory because this._url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n        if (this._accessToken) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(this._accessToken)}`;\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n            let eventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials });\r\n            }\r\n            else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers } });\r\n            }\r\n            try {\r\n                eventSource.onmessage = (e) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        }\r\n                        catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    }\r\n                    else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    async send(data) {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url, data, this._options);\r\n    }\r\n    stop() {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n    _close(e) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ServerSentEventsTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n/** @private */\r\nexport class WebSocketTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n        let token;\r\n        if (this._accessTokenFactory) {\r\n            token = await this._accessTokenFactory();\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n            if (Platform.isNode || Platform.isReactNative) {\r\n                const headers = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                if (token) {\r\n                    headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n                }\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = cookies;\r\n                }\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n            else {\r\n                if (token) {\r\n                    url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n                }\r\n            }\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n            webSocket.onopen = (_event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n            webSocket.onerror = (event) => {\r\n                let error = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                }\r\n                else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n            webSocket.onmessage = (message) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    }\r\n                    catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n            webSocket.onclose = (event) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                }\r\n                else {\r\n                    let error = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    }\r\n                    else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the endpoint may not be a SignalR endpoint,\"\r\n                            + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n    send(data) {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n    stop() {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _close(event) {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => { };\r\n            this._webSocket.onmessage = () => { };\r\n            this._webSocket.onerror = () => { };\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            }\r\n            else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            }\r\n            else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n    _isCloseEvent(event) {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n//# sourceMappingURL=WebSocketTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { getEventSource, getWS } from \"./DynamicImports\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\nconst MAX_REDIRECTS = 100;\r\n/** @private */\r\nexport class HttpConnection {\r\n    constructor(url, options = {}) {\r\n        this._stopPromiseResolver = () => { };\r\n        this.features = {};\r\n        this._negotiateVersion = 1;\r\n        Arg.isRequired(url, \"url\");\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        }\r\n        else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n        let webSocketModule = null;\r\n        let eventSourceModule = null;\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            webSocketModule = getWS();\r\n            eventSourceModule = getEventSource();\r\n        }\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        }\r\n        else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        }\r\n        else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n        this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\r\n        this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async start(transferFormat) {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n        if (this._connectionState !== \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = \"Connecting\" /* ConnectionState.Connecting */;\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n        else if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n        this._connectionStarted = true;\r\n    }\r\n    send(data) {\r\n        if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport);\r\n        }\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n    async stop(error) {\r\n        if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = \"Disconnecting\" /* ConnectionState.Disconnecting */;\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n    async _stopInternal(error) {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n        try {\r\n            await this._startInternalPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n            this.transport = undefined;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n    async _startInternal(transferFormat) {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        this._httpClient._accessTokenFactory = this._accessTokenFactory;\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                }\r\n                else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            }\r\n            else {\r\n                let negotiateResponse = null;\r\n                let redirects = 0;\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */ || this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n                        throw new AbortError(\"The connection was stopped during negotiation.\");\r\n                    }\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n                    if (negotiateResponse.ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                        // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\r\n                        this._httpClient._accessToken = accessToken;\r\n                        this._httpClient._accessTokenFactory = undefined;\r\n                    }\r\n                    redirects++;\r\n                } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n            if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = \"Connected\" /* ConnectionState.Connected */;\r\n            }\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n            this.transport = undefined;\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _getNegotiationResponse(url) {\r\n        const headers = {};\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n            const negotiateResponse = JSON.parse(response.content);\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            if (negotiateResponse.useStatefulReconnect && this._options._useStatefulReconnect !== true) {\r\n                return Promise.reject(new FailedToNegotiateWithServerError(\"Client didn't negotiate Stateful Reconnect but the server did.\"));\r\n            }\r\n            return negotiateResponse;\r\n        }\r\n        catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n    _createConnectUrl(url, connectionToken) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n    async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n        const transportExceptions = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, (negotiate === null || negotiate === void 0 ? void 0 : negotiate.useStatefulReconnect) === true);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            }\r\n            else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    }\r\n                    catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                }\r\n                catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n                    if (this._connectionState !== \"Connecting\" /* ConnectionState.Connecting */) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new AbortError(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n    _constructTransport(transport) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n    _startTransport(url, transferFormat) {\r\n        this.transport.onreceive = this.onreceive;\r\n        if (this.features.reconnect) {\r\n            this.transport.onclose = async (e) => {\r\n                let callStop = false;\r\n                if (this.features.reconnect) {\r\n                    try {\r\n                        this.features.disconnected();\r\n                        await this.transport.connect(url, transferFormat);\r\n                        await this.features.resend();\r\n                    }\r\n                    catch {\r\n                        callStop = true;\r\n                    }\r\n                }\r\n                else {\r\n                    this._stopConnection(e);\r\n                    return;\r\n                }\r\n                if (callStop) {\r\n                    this._stopConnection(e);\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.transport.onclose = (e) => this._stopConnection(e);\r\n        }\r\n        return this.transport.connect(url, transferFormat);\r\n    }\r\n    _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, useStatefulReconnect) {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        }\r\n        else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            this.features.reconnect = transport === HttpTransportType.WebSockets ? useStatefulReconnect : undefined;\r\n                            return this._constructTransport(transport);\r\n                        }\r\n                        catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n    _isITransport(transport) {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n    _stopConnection(error) {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n        this.transport = undefined;\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n        if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n        if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n        this.connectionId = undefined;\r\n        this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    _resolveUrl(url) {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n    _resolveNegotiateUrl(url) {\r\n        const negotiateUrl = new URL(url);\r\n        if (negotiateUrl.pathname.endsWith('/')) {\r\n            negotiateUrl.pathname += \"negotiate\";\r\n        }\r\n        else {\r\n            negotiateUrl.pathname += \"/negotiate\";\r\n        }\r\n        const searchParams = new URLSearchParams(negotiateUrl.searchParams);\r\n        if (!searchParams.has(\"negotiateVersion\")) {\r\n            searchParams.append(\"negotiateVersion\", this._negotiateVersion.toString());\r\n        }\r\n        if (searchParams.has(\"useStatefulReconnect\")) {\r\n            if (searchParams.get(\"useStatefulReconnect\") === \"true\") {\r\n                this._options._useStatefulReconnect = true;\r\n            }\r\n        }\r\n        else if (this._options._useStatefulReconnect === true) {\r\n            searchParams.append(\"useStatefulReconnect\", \"true\");\r\n        }\r\n        negotiateUrl.search = searchParams.toString();\r\n        return negotiateUrl.toString();\r\n    }\r\n}\r\nfunction transportMatches(requestedTransport, actualTransport) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    constructor(_transport) {\r\n        this._transport = _transport;\r\n        this._buffer = [];\r\n        this._executing = true;\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n    send(data) {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n    stop() {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n    _bufferData(data) {\r\n        if (this._buffer.length && typeof (this._buffer[0]) !== typeof (data)) {\r\n            throw new Error(`Expected data to be of type ${typeof (this._buffer)} but was of type ${typeof (data)}`);\r\n        }\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n    async _sendLoop() {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n                break;\r\n            }\r\n            this._sendBufferedData = new PromiseSource();\r\n            const transportResult = this._transportResult;\r\n            this._transportResult = undefined;\r\n            const data = typeof (this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n            this._buffer.length = 0;\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            }\r\n            catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n    static _concatBuffers(arrayBuffers) {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n        return result.buffer;\r\n    }\r\n}\r\nclass PromiseSource {\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n    resolve() {\r\n        this._resolver();\r\n    }\r\n    reject(reason) {\r\n        this._rejecter(reason);\r\n    }\r\n}\r\n//# sourceMappingURL=HttpConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol {\r\n    constructor() {\r\n        /** @inheritDoc */\r\n        this.name = JSON_HUB_PROTOCOL_NAME;\r\n        /** @inheritDoc */\r\n        this.version = 2;\r\n        /** @inheritDoc */\r\n        this.transferFormat = TransferFormat.Text;\r\n    }\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input, logger) {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n        if (!input) {\r\n            return [];\r\n        }\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message);\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                case MessageType.Ack:\r\n                    this._isAckMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Sequence:\r\n                    this._isSequenceMessage(parsedMessage);\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n        return hubMessages;\r\n    }\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message) {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n    _isInvocationMessage(message) {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n    _isStreamItemMessage(message) {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n    _isCompletionMessage(message) {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n    _isAckMessage(message) {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Ack message.\");\r\n        }\r\n    }\r\n    _isSequenceMessage(message) {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Sequence message.\");\r\n        }\r\n    }\r\n    _assertNotEmptyString(value, errorMessage) {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=JsonHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\nfunction parseLogLevel(name) {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    }\r\n    else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    configureLogging(logging) {\r\n        Arg.isRequired(logging, \"logging\");\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        }\r\n        else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        }\r\n        else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n        return this;\r\n    }\r\n    withUrl(url, transportTypeOrOptions) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n        this.url = url;\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        }\r\n        else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    withHubProtocol(protocol) {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n    withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        }\r\n        else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        }\r\n        else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures {@link @microsoft/signalr.HubConnection.serverTimeoutInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withServerTimeout(milliseconds) {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n        this._serverTimeoutInMilliseconds = milliseconds;\r\n        return this;\r\n    }\r\n    /** Configures {@link @microsoft/signalr.HubConnection.keepAliveIntervalInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withKeepAliveInterval(milliseconds) {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n        this._keepAliveIntervalInMilliseconds = milliseconds;\r\n        return this;\r\n    }\r\n    /** Enables and configures options for the Stateful Reconnect feature.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withStatefulReconnect(options) {\r\n        if (this.httpConnectionOptions === undefined) {\r\n            this.httpConnectionOptions = {};\r\n        }\r\n        this.httpConnectionOptions._useStatefulReconnect = true;\r\n        this._statefulReconnectBufferSize = options === null || options === void 0 ? void 0 : options.bufferSize;\r\n        return this;\r\n    }\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    build() {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n        return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy, this._serverTimeoutInMilliseconds, this._keepAliveIntervalInMilliseconds, this._statefulReconnectBufferSize);\r\n    }\r\n}\r\nfunction isLogger(logger) {\r\n    return logger.log !== undefined;\r\n}\r\n//# sourceMappingURL=HubConnectionBuilder.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// These IDs need to be kept in sync with RendererId.cs\r\nexport enum WebRendererId {\r\n  Default = 0,\r\n  Server = 1,\r\n  WebAssembly = 2,\r\n  WebView = 3,\r\n}\r\n","// Integer Utility\nexport var UINT32_MAX = 4294967295;\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\nexport function setUint64(view, offset, value) {\n    var high = value / 4294967296;\n    var low = value; // high bits are truncated by DataView\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n}\nexport function setInt64(view, offset, value) {\n    var high = Math.floor(value / 4294967296);\n    var low = value; // high bits are truncated by DataView\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n}\nexport function getInt64(view, offset) {\n    var high = view.getInt32(offset);\n    var low = view.getUint32(offset + 4);\n    return high * 4294967296 + low;\n}\nexport function getUint64(view, offset) {\n    var high = view.getUint32(offset);\n    var low = view.getUint32(offset + 4);\n    return high * 4294967296 + low;\n}\n//# sourceMappingURL=int.mjs.map","var _a, _b, _c;\n/* eslint-disable @typescript-eslint/no-unnecessary-condition */\nimport { UINT32_MAX } from \"./int.mjs\";\nvar TEXT_ENCODING_AVAILABLE = (typeof process === \"undefined\" || ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a[\"TEXT_ENCODING\"]) !== \"never\") &&\n    typeof TextEncoder !== \"undefined\" &&\n    typeof TextDecoder !== \"undefined\";\nexport function utf8Count(str) {\n    var strLength = str.length;\n    var byteLength = 0;\n    var pos = 0;\n    while (pos < strLength) {\n        var value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            byteLength++;\n            continue;\n        }\n        else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            byteLength += 2;\n        }\n        else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    var extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                byteLength += 3;\n            }\n            else {\n                // 4-byte\n                byteLength += 4;\n            }\n        }\n    }\n    return byteLength;\n}\nexport function utf8EncodeJs(str, output, outputOffset) {\n    var strLength = str.length;\n    var offset = outputOffset;\n    var pos = 0;\n    while (pos < strLength) {\n        var value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            output[offset++] = value;\n            continue;\n        }\n        else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n        }\n        else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    var extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n                output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n            }\n            else {\n                // 4-byte\n                output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n                output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n                output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n            }\n        }\n        output[offset++] = (value & 0x3f) | 0x80;\n    }\n}\nvar sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexport var TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n    ? UINT32_MAX\n    : typeof process !== \"undefined\" && ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b[\"TEXT_ENCODING\"]) !== \"force\"\n        ? 200\n        : 0;\nfunction utf8EncodeTEencode(str, output, outputOffset) {\n    output.set(sharedTextEncoder.encode(str), outputOffset);\n}\nfunction utf8EncodeTEencodeInto(str, output, outputOffset) {\n    sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));\n}\nexport var utf8EncodeTE = (sharedTextEncoder === null || sharedTextEncoder === void 0 ? void 0 : sharedTextEncoder.encodeInto) ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\nvar CHUNK_SIZE = 4096;\nexport function utf8DecodeJs(bytes, inputOffset, byteLength) {\n    var offset = inputOffset;\n    var end = offset + byteLength;\n    var units = [];\n    var result = \"\";\n    while (offset < end) {\n        var byte1 = bytes[offset++];\n        if ((byte1 & 0x80) === 0) {\n            // 1 byte\n            units.push(byte1);\n        }\n        else if ((byte1 & 0xe0) === 0xc0) {\n            // 2 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            units.push(((byte1 & 0x1f) << 6) | byte2);\n        }\n        else if ((byte1 & 0xf0) === 0xe0) {\n            // 3 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            var byte3 = bytes[offset++] & 0x3f;\n            units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n        }\n        else if ((byte1 & 0xf8) === 0xf0) {\n            // 4 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            var byte3 = bytes[offset++] & 0x3f;\n            var byte4 = bytes[offset++] & 0x3f;\n            var unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n            if (unit > 0xffff) {\n                unit -= 0x10000;\n                units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n                unit = 0xdc00 | (unit & 0x3ff);\n            }\n            units.push(unit);\n        }\n        else {\n            units.push(byte1);\n        }\n        if (units.length >= CHUNK_SIZE) {\n            result += String.fromCharCode.apply(String, units);\n            units.length = 0;\n        }\n    }\n    if (units.length > 0) {\n        result += String.fromCharCode.apply(String, units);\n    }\n    return result;\n}\nvar sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexport var TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n    ? UINT32_MAX\n    : typeof process !== \"undefined\" && ((_c = process === null || process === void 0 ? void 0 : process.env) === null || _c === void 0 ? void 0 : _c[\"TEXT_DECODER\"]) !== \"force\"\n        ? 200\n        : 0;\nexport function utf8DecodeTD(bytes, inputOffset, byteLength) {\n    var stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n    return sharedTextDecoder.decode(stringBytes);\n}\n//# sourceMappingURL=utf8.mjs.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar DecodeError = /** @class */ (function (_super) {\n    __extends(DecodeError, _super);\n    function DecodeError(message) {\n        var _this = _super.call(this, message) || this;\n        // fix the prototype chain in a cross-platform way\n        var proto = Object.create(DecodeError.prototype);\n        Object.setPrototypeOf(_this, proto);\n        Object.defineProperty(_this, \"name\", {\n            configurable: true,\n            enumerable: false,\n            value: DecodeError.name,\n        });\n        return _this;\n    }\n    return DecodeError;\n}(Error));\nexport { DecodeError };\n//# sourceMappingURL=DecodeError.mjs.map","/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */\nvar ExtData = /** @class */ (function () {\n    function ExtData(type, data) {\n        this.type = type;\n        this.data = data;\n    }\n    return ExtData;\n}());\nexport { ExtData };\n//# sourceMappingURL=ExtData.mjs.map","// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { DecodeError } from \"./DecodeError.mjs\";\nimport { getInt64, setInt64 } from \"./utils/int.mjs\";\nexport var EXT_TIMESTAMP = -1;\nvar TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nvar TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\nexport function encodeTimeSpecToTimestamp(_a) {\n    var sec = _a.sec, nsec = _a.nsec;\n    if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n        // Here sec >= 0 && nsec >= 0\n        if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n            // timestamp 32 = { sec32 (unsigned) }\n            var rv = new Uint8Array(4);\n            var view = new DataView(rv.buffer);\n            view.setUint32(0, sec);\n            return rv;\n        }\n        else {\n            // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n            var secHigh = sec / 0x100000000;\n            var secLow = sec & 0xffffffff;\n            var rv = new Uint8Array(8);\n            var view = new DataView(rv.buffer);\n            // nsec30 | secHigh2\n            view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n            // secLow32\n            view.setUint32(4, secLow);\n            return rv;\n        }\n    }\n    else {\n        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n        var rv = new Uint8Array(12);\n        var view = new DataView(rv.buffer);\n        view.setUint32(0, nsec);\n        setInt64(view, 4, sec);\n        return rv;\n    }\n}\nexport function encodeDateToTimeSpec(date) {\n    var msec = date.getTime();\n    var sec = Math.floor(msec / 1e3);\n    var nsec = (msec - sec * 1e3) * 1e6;\n    // Normalizes { sec, nsec } to ensure nsec is unsigned.\n    var nsecInSec = Math.floor(nsec / 1e9);\n    return {\n        sec: sec + nsecInSec,\n        nsec: nsec - nsecInSec * 1e9,\n    };\n}\nexport function encodeTimestampExtension(object) {\n    if (object instanceof Date) {\n        var timeSpec = encodeDateToTimeSpec(object);\n        return encodeTimeSpecToTimestamp(timeSpec);\n    }\n    else {\n        return null;\n    }\n}\nexport function decodeTimestampToTimeSpec(data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    // data may be 32, 64, or 96 bits\n    switch (data.byteLength) {\n        case 4: {\n            // timestamp 32 = { sec32 }\n            var sec = view.getUint32(0);\n            var nsec = 0;\n            return { sec: sec, nsec: nsec };\n        }\n        case 8: {\n            // timestamp 64 = { nsec30, sec34 }\n            var nsec30AndSecHigh2 = view.getUint32(0);\n            var secLow32 = view.getUint32(4);\n            var sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n            var nsec = nsec30AndSecHigh2 >>> 2;\n            return { sec: sec, nsec: nsec };\n        }\n        case 12: {\n            // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n            var sec = getInt64(view, 4);\n            var nsec = view.getUint32(0);\n            return { sec: sec, nsec: nsec };\n        }\n        default:\n            throw new DecodeError(\"Unrecognized data size for timestamp (expected 4, 8, or 12): \".concat(data.length));\n    }\n}\nexport function decodeTimestampExtension(data) {\n    var timeSpec = decodeTimestampToTimeSpec(data);\n    return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\nexport var timestampExtension = {\n    type: EXT_TIMESTAMP,\n    encode: encodeTimestampExtension,\n    decode: decodeTimestampExtension,\n};\n//# sourceMappingURL=timestamp.mjs.map","// ExtensionCodec to handle MessagePack extensions\nimport { ExtData } from \"./ExtData.mjs\";\nimport { timestampExtension } from \"./timestamp.mjs\";\nvar ExtensionCodec = /** @class */ (function () {\n    function ExtensionCodec() {\n        // built-in extensions\n        this.builtInEncoders = [];\n        this.builtInDecoders = [];\n        // custom extensions\n        this.encoders = [];\n        this.decoders = [];\n        this.register(timestampExtension);\n    }\n    ExtensionCodec.prototype.register = function (_a) {\n        var type = _a.type, encode = _a.encode, decode = _a.decode;\n        if (type >= 0) {\n            // custom extensions\n            this.encoders[type] = encode;\n            this.decoders[type] = decode;\n        }\n        else {\n            // built-in extensions\n            var index = 1 + type;\n            this.builtInEncoders[index] = encode;\n            this.builtInDecoders[index] = decode;\n        }\n    };\n    ExtensionCodec.prototype.tryToEncode = function (object, context) {\n        // built-in extensions\n        for (var i = 0; i < this.builtInEncoders.length; i++) {\n            var encodeExt = this.builtInEncoders[i];\n            if (encodeExt != null) {\n                var data = encodeExt(object, context);\n                if (data != null) {\n                    var type = -1 - i;\n                    return new ExtData(type, data);\n                }\n            }\n        }\n        // custom extensions\n        for (var i = 0; i < this.encoders.length; i++) {\n            var encodeExt = this.encoders[i];\n            if (encodeExt != null) {\n                var data = encodeExt(object, context);\n                if (data != null) {\n                    var type = i;\n                    return new ExtData(type, data);\n                }\n            }\n        }\n        if (object instanceof ExtData) {\n            // to keep ExtData as is\n            return object;\n        }\n        return null;\n    };\n    ExtensionCodec.prototype.decode = function (data, type, context) {\n        var decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n        if (decodeExt) {\n            return decodeExt(data, type, context);\n        }\n        else {\n            // decode() does not fail, returns ExtData instead.\n            return new ExtData(type, data);\n        }\n    };\n    ExtensionCodec.defaultCodec = new ExtensionCodec();\n    return ExtensionCodec;\n}());\nexport { ExtensionCodec };\n//# sourceMappingURL=ExtensionCodec.mjs.map","export function ensureUint8Array(buffer) {\n    if (buffer instanceof Uint8Array) {\n        return buffer;\n    }\n    else if (ArrayBuffer.isView(buffer)) {\n        return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    }\n    else if (buffer instanceof ArrayBuffer) {\n        return new Uint8Array(buffer);\n    }\n    else {\n        // ArrayLike<number>\n        return Uint8Array.from(buffer);\n    }\n}\nexport function createDataView(buffer) {\n    if (buffer instanceof ArrayBuffer) {\n        return new DataView(buffer);\n    }\n    var bufferView = ensureUint8Array(buffer);\n    return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\n//# sourceMappingURL=typedArrays.mjs.map","import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8.mjs\";\nimport { ExtensionCodec } from \"./ExtensionCodec.mjs\";\nimport { setInt64, setUint64 } from \"./utils/int.mjs\";\nimport { ensureUint8Array } from \"./utils/typedArrays.mjs\";\nexport var DEFAULT_MAX_DEPTH = 100;\nexport var DEFAULT_INITIAL_BUFFER_SIZE = 2048;\nvar Encoder = /** @class */ (function () {\n    function Encoder(extensionCodec, context, maxDepth, initialBufferSize, sortKeys, forceFloat32, ignoreUndefined, forceIntegerToFloat) {\n        if (extensionCodec === void 0) { extensionCodec = ExtensionCodec.defaultCodec; }\n        if (context === void 0) { context = undefined; }\n        if (maxDepth === void 0) { maxDepth = DEFAULT_MAX_DEPTH; }\n        if (initialBufferSize === void 0) { initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE; }\n        if (sortKeys === void 0) { sortKeys = false; }\n        if (forceFloat32 === void 0) { forceFloat32 = false; }\n        if (ignoreUndefined === void 0) { ignoreUndefined = false; }\n        if (forceIntegerToFloat === void 0) { forceIntegerToFloat = false; }\n        this.extensionCodec = extensionCodec;\n        this.context = context;\n        this.maxDepth = maxDepth;\n        this.initialBufferSize = initialBufferSize;\n        this.sortKeys = sortKeys;\n        this.forceFloat32 = forceFloat32;\n        this.ignoreUndefined = ignoreUndefined;\n        this.forceIntegerToFloat = forceIntegerToFloat;\n        this.pos = 0;\n        this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n        this.bytes = new Uint8Array(this.view.buffer);\n    }\n    Encoder.prototype.reinitializeState = function () {\n        this.pos = 0;\n    };\n    /**\n     * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n     *\n     * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n     */\n    Encoder.prototype.encodeSharedRef = function (object) {\n        this.reinitializeState();\n        this.doEncode(object, 1);\n        return this.bytes.subarray(0, this.pos);\n    };\n    /**\n     * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n     */\n    Encoder.prototype.encode = function (object) {\n        this.reinitializeState();\n        this.doEncode(object, 1);\n        return this.bytes.slice(0, this.pos);\n    };\n    Encoder.prototype.doEncode = function (object, depth) {\n        if (depth > this.maxDepth) {\n            throw new Error(\"Too deep objects in depth \".concat(depth));\n        }\n        if (object == null) {\n            this.encodeNil();\n        }\n        else if (typeof object === \"boolean\") {\n            this.encodeBoolean(object);\n        }\n        else if (typeof object === \"number\") {\n            this.encodeNumber(object);\n        }\n        else if (typeof object === \"string\") {\n            this.encodeString(object);\n        }\n        else {\n            this.encodeObject(object, depth);\n        }\n    };\n    Encoder.prototype.ensureBufferSizeToWrite = function (sizeToWrite) {\n        var requiredSize = this.pos + sizeToWrite;\n        if (this.view.byteLength < requiredSize) {\n            this.resizeBuffer(requiredSize * 2);\n        }\n    };\n    Encoder.prototype.resizeBuffer = function (newSize) {\n        var newBuffer = new ArrayBuffer(newSize);\n        var newBytes = new Uint8Array(newBuffer);\n        var newView = new DataView(newBuffer);\n        newBytes.set(this.bytes);\n        this.view = newView;\n        this.bytes = newBytes;\n    };\n    Encoder.prototype.encodeNil = function () {\n        this.writeU8(0xc0);\n    };\n    Encoder.prototype.encodeBoolean = function (object) {\n        if (object === false) {\n            this.writeU8(0xc2);\n        }\n        else {\n            this.writeU8(0xc3);\n        }\n    };\n    Encoder.prototype.encodeNumber = function (object) {\n        if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n            if (object >= 0) {\n                if (object < 0x80) {\n                    // positive fixint\n                    this.writeU8(object);\n                }\n                else if (object < 0x100) {\n                    // uint 8\n                    this.writeU8(0xcc);\n                    this.writeU8(object);\n                }\n                else if (object < 0x10000) {\n                    // uint 16\n                    this.writeU8(0xcd);\n                    this.writeU16(object);\n                }\n                else if (object < 0x100000000) {\n                    // uint 32\n                    this.writeU8(0xce);\n                    this.writeU32(object);\n                }\n                else {\n                    // uint 64\n                    this.writeU8(0xcf);\n                    this.writeU64(object);\n                }\n            }\n            else {\n                if (object >= -0x20) {\n                    // negative fixint\n                    this.writeU8(0xe0 | (object + 0x20));\n                }\n                else if (object >= -0x80) {\n                    // int 8\n                    this.writeU8(0xd0);\n                    this.writeI8(object);\n                }\n                else if (object >= -0x8000) {\n                    // int 16\n                    this.writeU8(0xd1);\n                    this.writeI16(object);\n                }\n                else if (object >= -0x80000000) {\n                    // int 32\n                    this.writeU8(0xd2);\n                    this.writeI32(object);\n                }\n                else {\n                    // int 64\n                    this.writeU8(0xd3);\n                    this.writeI64(object);\n                }\n            }\n        }\n        else {\n            // non-integer numbers\n            if (this.forceFloat32) {\n                // float 32\n                this.writeU8(0xca);\n                this.writeF32(object);\n            }\n            else {\n                // float 64\n                this.writeU8(0xcb);\n                this.writeF64(object);\n            }\n        }\n    };\n    Encoder.prototype.writeStringHeader = function (byteLength) {\n        if (byteLength < 32) {\n            // fixstr\n            this.writeU8(0xa0 + byteLength);\n        }\n        else if (byteLength < 0x100) {\n            // str 8\n            this.writeU8(0xd9);\n            this.writeU8(byteLength);\n        }\n        else if (byteLength < 0x10000) {\n            // str 16\n            this.writeU8(0xda);\n            this.writeU16(byteLength);\n        }\n        else if (byteLength < 0x100000000) {\n            // str 32\n            this.writeU8(0xdb);\n            this.writeU32(byteLength);\n        }\n        else {\n            throw new Error(\"Too long string: \".concat(byteLength, \" bytes in UTF-8\"));\n        }\n    };\n    Encoder.prototype.encodeString = function (object) {\n        var maxHeaderSize = 1 + 4;\n        var strLength = object.length;\n        if (strLength > TEXT_ENCODER_THRESHOLD) {\n            var byteLength = utf8Count(object);\n            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n            this.writeStringHeader(byteLength);\n            utf8EncodeTE(object, this.bytes, this.pos);\n            this.pos += byteLength;\n        }\n        else {\n            var byteLength = utf8Count(object);\n            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n            this.writeStringHeader(byteLength);\n            utf8EncodeJs(object, this.bytes, this.pos);\n            this.pos += byteLength;\n        }\n    };\n    Encoder.prototype.encodeObject = function (object, depth) {\n        // try to encode objects with custom codec first of non-primitives\n        var ext = this.extensionCodec.tryToEncode(object, this.context);\n        if (ext != null) {\n            this.encodeExtension(ext);\n        }\n        else if (Array.isArray(object)) {\n            this.encodeArray(object, depth);\n        }\n        else if (ArrayBuffer.isView(object)) {\n            this.encodeBinary(object);\n        }\n        else if (typeof object === \"object\") {\n            this.encodeMap(object, depth);\n        }\n        else {\n            // symbol, function and other special object come here unless extensionCodec handles them.\n            throw new Error(\"Unrecognized object: \".concat(Object.prototype.toString.apply(object)));\n        }\n    };\n    Encoder.prototype.encodeBinary = function (object) {\n        var size = object.byteLength;\n        if (size < 0x100) {\n            // bin 8\n            this.writeU8(0xc4);\n            this.writeU8(size);\n        }\n        else if (size < 0x10000) {\n            // bin 16\n            this.writeU8(0xc5);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // bin 32\n            this.writeU8(0xc6);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large binary: \".concat(size));\n        }\n        var bytes = ensureUint8Array(object);\n        this.writeU8a(bytes);\n    };\n    Encoder.prototype.encodeArray = function (object, depth) {\n        var size = object.length;\n        if (size < 16) {\n            // fixarray\n            this.writeU8(0x90 + size);\n        }\n        else if (size < 0x10000) {\n            // array 16\n            this.writeU8(0xdc);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // array 32\n            this.writeU8(0xdd);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large array: \".concat(size));\n        }\n        for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {\n            var item = object_1[_i];\n            this.doEncode(item, depth + 1);\n        }\n    };\n    Encoder.prototype.countWithoutUndefined = function (object, keys) {\n        var count = 0;\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            if (object[key] !== undefined) {\n                count++;\n            }\n        }\n        return count;\n    };\n    Encoder.prototype.encodeMap = function (object, depth) {\n        var keys = Object.keys(object);\n        if (this.sortKeys) {\n            keys.sort();\n        }\n        var size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n        if (size < 16) {\n            // fixmap\n            this.writeU8(0x80 + size);\n        }\n        else if (size < 0x10000) {\n            // map 16\n            this.writeU8(0xde);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // map 32\n            this.writeU8(0xdf);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large map object: \".concat(size));\n        }\n        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n            var key = keys_2[_i];\n            var value = object[key];\n            if (!(this.ignoreUndefined && value === undefined)) {\n                this.encodeString(key);\n                this.doEncode(value, depth + 1);\n            }\n        }\n    };\n    Encoder.prototype.encodeExtension = function (ext) {\n        var size = ext.data.length;\n        if (size === 1) {\n            // fixext 1\n            this.writeU8(0xd4);\n        }\n        else if (size === 2) {\n            // fixext 2\n            this.writeU8(0xd5);\n        }\n        else if (size === 4) {\n            // fixext 4\n            this.writeU8(0xd6);\n        }\n        else if (size === 8) {\n            // fixext 8\n            this.writeU8(0xd7);\n        }\n        else if (size === 16) {\n            // fixext 16\n            this.writeU8(0xd8);\n        }\n        else if (size < 0x100) {\n            // ext 8\n            this.writeU8(0xc7);\n            this.writeU8(size);\n        }\n        else if (size < 0x10000) {\n            // ext 16\n            this.writeU8(0xc8);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // ext 32\n            this.writeU8(0xc9);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large extension object: \".concat(size));\n        }\n        this.writeI8(ext.type);\n        this.writeU8a(ext.data);\n    };\n    Encoder.prototype.writeU8 = function (value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setUint8(this.pos, value);\n        this.pos++;\n    };\n    Encoder.prototype.writeU8a = function (values) {\n        var size = values.length;\n        this.ensureBufferSizeToWrite(size);\n        this.bytes.set(values, this.pos);\n        this.pos += size;\n    };\n    Encoder.prototype.writeI8 = function (value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setInt8(this.pos, value);\n        this.pos++;\n    };\n    Encoder.prototype.writeU16 = function (value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setUint16(this.pos, value);\n        this.pos += 2;\n    };\n    Encoder.prototype.writeI16 = function (value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setInt16(this.pos, value);\n        this.pos += 2;\n    };\n    Encoder.prototype.writeU32 = function (value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setUint32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeI32 = function (value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setInt32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeF32 = function (value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setFloat32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeF64 = function (value) {\n        this.ensureBufferSizeToWrite(8);\n        this.view.setFloat64(this.pos, value);\n        this.pos += 8;\n    };\n    Encoder.prototype.writeU64 = function (value) {\n        this.ensureBufferSizeToWrite(8);\n        setUint64(this.view, this.pos, value);\n        this.pos += 8;\n    };\n    Encoder.prototype.writeI64 = function (value) {\n        this.ensureBufferSizeToWrite(8);\n        setInt64(this.view, this.pos, value);\n        this.pos += 8;\n    };\n    return Encoder;\n}());\nexport { Encoder };\n//# sourceMappingURL=Encoder.mjs.map","export function prettyByte(byte) {\n    return \"\".concat(byte < 0 ? \"-\" : \"\", \"0x\").concat(Math.abs(byte).toString(16).padStart(2, \"0\"));\n}\n//# sourceMappingURL=prettyByte.mjs.map","import { utf8DecodeJs } from \"./utils/utf8.mjs\";\nvar DEFAULT_MAX_KEY_LENGTH = 16;\nvar DEFAULT_MAX_LENGTH_PER_KEY = 16;\nvar CachedKeyDecoder = /** @class */ (function () {\n    function CachedKeyDecoder(maxKeyLength, maxLengthPerKey) {\n        if (maxKeyLength === void 0) { maxKeyLength = DEFAULT_MAX_KEY_LENGTH; }\n        if (maxLengthPerKey === void 0) { maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY; }\n        this.maxKeyLength = maxKeyLength;\n        this.maxLengthPerKey = maxLengthPerKey;\n        this.hit = 0;\n        this.miss = 0;\n        // avoid `new Array(N)`, which makes a sparse array,\n        // because a sparse array is typically slower than a non-sparse array.\n        this.caches = [];\n        for (var i = 0; i < this.maxKeyLength; i++) {\n            this.caches.push([]);\n        }\n    }\n    CachedKeyDecoder.prototype.canBeCached = function (byteLength) {\n        return byteLength > 0 && byteLength <= this.maxKeyLength;\n    };\n    CachedKeyDecoder.prototype.find = function (bytes, inputOffset, byteLength) {\n        var records = this.caches[byteLength - 1];\n        FIND_CHUNK: for (var _i = 0, records_1 = records; _i < records_1.length; _i++) {\n            var record = records_1[_i];\n            var recordBytes = record.bytes;\n            for (var j = 0; j < byteLength; j++) {\n                if (recordBytes[j] !== bytes[inputOffset + j]) {\n                    continue FIND_CHUNK;\n                }\n            }\n            return record.str;\n        }\n        return null;\n    };\n    CachedKeyDecoder.prototype.store = function (bytes, value) {\n        var records = this.caches[bytes.length - 1];\n        var record = { bytes: bytes, str: value };\n        if (records.length >= this.maxLengthPerKey) {\n            // `records` are full!\n            // Set `record` to an arbitrary position.\n            records[(Math.random() * records.length) | 0] = record;\n        }\n        else {\n            records.push(record);\n        }\n    };\n    CachedKeyDecoder.prototype.decode = function (bytes, inputOffset, byteLength) {\n        var cachedValue = this.find(bytes, inputOffset, byteLength);\n        if (cachedValue != null) {\n            this.hit++;\n            return cachedValue;\n        }\n        this.miss++;\n        var str = utf8DecodeJs(bytes, inputOffset, byteLength);\n        // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n        var slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n        this.store(slicedCopyOfBytes, str);\n        return str;\n    };\n    return CachedKeyDecoder;\n}());\nexport { CachedKeyDecoder };\n//# sourceMappingURL=CachedKeyDecoder.mjs.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport { prettyByte } from \"./utils/prettyByte.mjs\";\nimport { ExtensionCodec } from \"./ExtensionCodec.mjs\";\nimport { getInt64, getUint64, UINT32_MAX } from \"./utils/int.mjs\";\nimport { utf8DecodeJs, TEXT_DECODER_THRESHOLD, utf8DecodeTD } from \"./utils/utf8.mjs\";\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays.mjs\";\nimport { CachedKeyDecoder } from \"./CachedKeyDecoder.mjs\";\nimport { DecodeError } from \"./DecodeError.mjs\";\nvar isValidMapKeyType = function (key) {\n    var keyType = typeof key;\n    return keyType === \"string\" || keyType === \"number\";\n};\nvar HEAD_BYTE_REQUIRED = -1;\nvar EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nvar EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n// IE11: Hack to support IE11.\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\nexport var DataViewIndexOutOfBoundsError = (function () {\n    try {\n        // IE11: The spec says it should throw RangeError,\n        // IE11: but in IE11 it throws TypeError.\n        EMPTY_VIEW.getInt8(0);\n    }\n    catch (e) {\n        return e.constructor;\n    }\n    throw new Error(\"never reached\");\n})();\nvar MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\nvar sharedCachedKeyDecoder = new CachedKeyDecoder();\nvar Decoder = /** @class */ (function () {\n    function Decoder(extensionCodec, context, maxStrLength, maxBinLength, maxArrayLength, maxMapLength, maxExtLength, keyDecoder) {\n        if (extensionCodec === void 0) { extensionCodec = ExtensionCodec.defaultCodec; }\n        if (context === void 0) { context = undefined; }\n        if (maxStrLength === void 0) { maxStrLength = UINT32_MAX; }\n        if (maxBinLength === void 0) { maxBinLength = UINT32_MAX; }\n        if (maxArrayLength === void 0) { maxArrayLength = UINT32_MAX; }\n        if (maxMapLength === void 0) { maxMapLength = UINT32_MAX; }\n        if (maxExtLength === void 0) { maxExtLength = UINT32_MAX; }\n        if (keyDecoder === void 0) { keyDecoder = sharedCachedKeyDecoder; }\n        this.extensionCodec = extensionCodec;\n        this.context = context;\n        this.maxStrLength = maxStrLength;\n        this.maxBinLength = maxBinLength;\n        this.maxArrayLength = maxArrayLength;\n        this.maxMapLength = maxMapLength;\n        this.maxExtLength = maxExtLength;\n        this.keyDecoder = keyDecoder;\n        this.totalPos = 0;\n        this.pos = 0;\n        this.view = EMPTY_VIEW;\n        this.bytes = EMPTY_BYTES;\n        this.headByte = HEAD_BYTE_REQUIRED;\n        this.stack = [];\n    }\n    Decoder.prototype.reinitializeState = function () {\n        this.totalPos = 0;\n        this.headByte = HEAD_BYTE_REQUIRED;\n        this.stack.length = 0;\n        // view, bytes, and pos will be re-initialized in setBuffer()\n    };\n    Decoder.prototype.setBuffer = function (buffer) {\n        this.bytes = ensureUint8Array(buffer);\n        this.view = createDataView(this.bytes);\n        this.pos = 0;\n    };\n    Decoder.prototype.appendBuffer = function (buffer) {\n        if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {\n            this.setBuffer(buffer);\n        }\n        else {\n            var remainingData = this.bytes.subarray(this.pos);\n            var newData = ensureUint8Array(buffer);\n            // concat remainingData + newData\n            var newBuffer = new Uint8Array(remainingData.length + newData.length);\n            newBuffer.set(remainingData);\n            newBuffer.set(newData, remainingData.length);\n            this.setBuffer(newBuffer);\n        }\n    };\n    Decoder.prototype.hasRemaining = function (size) {\n        return this.view.byteLength - this.pos >= size;\n    };\n    Decoder.prototype.createExtraByteError = function (posToShow) {\n        var _a = this, view = _a.view, pos = _a.pos;\n        return new RangeError(\"Extra \".concat(view.byteLength - pos, \" of \").concat(view.byteLength, \" byte(s) found at buffer[\").concat(posToShow, \"]\"));\n    };\n    /**\n     * @throws {@link DecodeError}\n     * @throws {@link RangeError}\n     */\n    Decoder.prototype.decode = function (buffer) {\n        this.reinitializeState();\n        this.setBuffer(buffer);\n        var object = this.doDecodeSync();\n        if (this.hasRemaining(1)) {\n            throw this.createExtraByteError(this.pos);\n        }\n        return object;\n    };\n    Decoder.prototype.decodeMulti = function (buffer) {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    this.reinitializeState();\n                    this.setBuffer(buffer);\n                    _a.label = 1;\n                case 1:\n                    if (!this.hasRemaining(1)) return [3 /*break*/, 3];\n                    return [4 /*yield*/, this.doDecodeSync()];\n                case 2:\n                    _a.sent();\n                    return [3 /*break*/, 1];\n                case 3: return [2 /*return*/];\n            }\n        });\n    };\n    Decoder.prototype.decodeAsync = function (stream) {\n        var stream_1, stream_1_1;\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var decoded, object, buffer, e_1_1, _b, headByte, pos, totalPos;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        decoded = false;\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 6, 7, 12]);\n                        stream_1 = __asyncValues(stream);\n                        _c.label = 2;\n                    case 2: return [4 /*yield*/, stream_1.next()];\n                    case 3:\n                        if (!(stream_1_1 = _c.sent(), !stream_1_1.done)) return [3 /*break*/, 5];\n                        buffer = stream_1_1.value;\n                        if (decoded) {\n                            throw this.createExtraByteError(this.totalPos);\n                        }\n                        this.appendBuffer(buffer);\n                        try {\n                            object = this.doDecodeSync();\n                            decoded = true;\n                        }\n                        catch (e) {\n                            if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n                                throw e; // rethrow\n                            }\n                            // fallthrough\n                        }\n                        this.totalPos += this.pos;\n                        _c.label = 4;\n                    case 4: return [3 /*break*/, 2];\n                    case 5: return [3 /*break*/, 12];\n                    case 6:\n                        e_1_1 = _c.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 12];\n                    case 7:\n                        _c.trys.push([7, , 10, 11]);\n                        if (!(stream_1_1 && !stream_1_1.done && (_a = stream_1.return))) return [3 /*break*/, 9];\n                        return [4 /*yield*/, _a.call(stream_1)];\n                    case 8:\n                        _c.sent();\n                        _c.label = 9;\n                    case 9: return [3 /*break*/, 11];\n                    case 10:\n                        if (e_1) throw e_1.error;\n                        return [7 /*endfinally*/];\n                    case 11: return [7 /*endfinally*/];\n                    case 12:\n                        if (decoded) {\n                            if (this.hasRemaining(1)) {\n                                throw this.createExtraByteError(this.totalPos);\n                            }\n                            return [2 /*return*/, object];\n                        }\n                        _b = this, headByte = _b.headByte, pos = _b.pos, totalPos = _b.totalPos;\n                        throw new RangeError(\"Insufficient data in parsing \".concat(prettyByte(headByte), \" at \").concat(totalPos, \" (\").concat(pos, \" in the current buffer)\"));\n                }\n            });\n        });\n    };\n    Decoder.prototype.decodeArrayStream = function (stream) {\n        return this.decodeMultiAsync(stream, true);\n    };\n    Decoder.prototype.decodeStream = function (stream) {\n        return this.decodeMultiAsync(stream, false);\n    };\n    Decoder.prototype.decodeMultiAsync = function (stream, isArray) {\n        return __asyncGenerator(this, arguments, function decodeMultiAsync_1() {\n            var isArrayHeaderRequired, arrayItemsLeft, stream_2, stream_2_1, buffer, e_2, e_3_1;\n            var e_3, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        isArrayHeaderRequired = isArray;\n                        arrayItemsLeft = -1;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 13, 14, 19]);\n                        stream_2 = __asyncValues(stream);\n                        _b.label = 2;\n                    case 2: return [4 /*yield*/, __await(stream_2.next())];\n                    case 3:\n                        if (!(stream_2_1 = _b.sent(), !stream_2_1.done)) return [3 /*break*/, 12];\n                        buffer = stream_2_1.value;\n                        if (isArray && arrayItemsLeft === 0) {\n                            throw this.createExtraByteError(this.totalPos);\n                        }\n                        this.appendBuffer(buffer);\n                        if (isArrayHeaderRequired) {\n                            arrayItemsLeft = this.readArraySize();\n                            isArrayHeaderRequired = false;\n                            this.complete();\n                        }\n                        _b.label = 4;\n                    case 4:\n                        _b.trys.push([4, 9, , 10]);\n                        _b.label = 5;\n                    case 5:\n                        if (!true) return [3 /*break*/, 8];\n                        return [4 /*yield*/, __await(this.doDecodeSync())];\n                    case 6: return [4 /*yield*/, _b.sent()];\n                    case 7:\n                        _b.sent();\n                        if (--arrayItemsLeft === 0) {\n                            return [3 /*break*/, 8];\n                        }\n                        return [3 /*break*/, 5];\n                    case 8: return [3 /*break*/, 10];\n                    case 9:\n                        e_2 = _b.sent();\n                        if (!(e_2 instanceof DataViewIndexOutOfBoundsError)) {\n                            throw e_2; // rethrow\n                        }\n                        return [3 /*break*/, 10];\n                    case 10:\n                        this.totalPos += this.pos;\n                        _b.label = 11;\n                    case 11: return [3 /*break*/, 2];\n                    case 12: return [3 /*break*/, 19];\n                    case 13:\n                        e_3_1 = _b.sent();\n                        e_3 = { error: e_3_1 };\n                        return [3 /*break*/, 19];\n                    case 14:\n                        _b.trys.push([14, , 17, 18]);\n                        if (!(stream_2_1 && !stream_2_1.done && (_a = stream_2.return))) return [3 /*break*/, 16];\n                        return [4 /*yield*/, __await(_a.call(stream_2))];\n                    case 15:\n                        _b.sent();\n                        _b.label = 16;\n                    case 16: return [3 /*break*/, 18];\n                    case 17:\n                        if (e_3) throw e_3.error;\n                        return [7 /*endfinally*/];\n                    case 18: return [7 /*endfinally*/];\n                    case 19: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Decoder.prototype.doDecodeSync = function () {\n        DECODE: while (true) {\n            var headByte = this.readHeadByte();\n            var object = void 0;\n            if (headByte >= 0xe0) {\n                // negative fixint (111x xxxx) 0xe0 - 0xff\n                object = headByte - 0x100;\n            }\n            else if (headByte < 0xc0) {\n                if (headByte < 0x80) {\n                    // positive fixint (0xxx xxxx) 0x00 - 0x7f\n                    object = headByte;\n                }\n                else if (headByte < 0x90) {\n                    // fixmap (1000 xxxx) 0x80 - 0x8f\n                    var size = headByte - 0x80;\n                    if (size !== 0) {\n                        this.pushMapState(size);\n                        this.complete();\n                        continue DECODE;\n                    }\n                    else {\n                        object = {};\n                    }\n                }\n                else if (headByte < 0xa0) {\n                    // fixarray (1001 xxxx) 0x90 - 0x9f\n                    var size = headByte - 0x90;\n                    if (size !== 0) {\n                        this.pushArrayState(size);\n                        this.complete();\n                        continue DECODE;\n                    }\n                    else {\n                        object = [];\n                    }\n                }\n                else {\n                    // fixstr (101x xxxx) 0xa0 - 0xbf\n                    var byteLength = headByte - 0xa0;\n                    object = this.decodeUtf8String(byteLength, 0);\n                }\n            }\n            else if (headByte === 0xc0) {\n                // nil\n                object = null;\n            }\n            else if (headByte === 0xc2) {\n                // false\n                object = false;\n            }\n            else if (headByte === 0xc3) {\n                // true\n                object = true;\n            }\n            else if (headByte === 0xca) {\n                // float 32\n                object = this.readF32();\n            }\n            else if (headByte === 0xcb) {\n                // float 64\n                object = this.readF64();\n            }\n            else if (headByte === 0xcc) {\n                // uint 8\n                object = this.readU8();\n            }\n            else if (headByte === 0xcd) {\n                // uint 16\n                object = this.readU16();\n            }\n            else if (headByte === 0xce) {\n                // uint 32\n                object = this.readU32();\n            }\n            else if (headByte === 0xcf) {\n                // uint 64\n                object = this.readU64();\n            }\n            else if (headByte === 0xd0) {\n                // int 8\n                object = this.readI8();\n            }\n            else if (headByte === 0xd1) {\n                // int 16\n                object = this.readI16();\n            }\n            else if (headByte === 0xd2) {\n                // int 32\n                object = this.readI32();\n            }\n            else if (headByte === 0xd3) {\n                // int 64\n                object = this.readI64();\n            }\n            else if (headByte === 0xd9) {\n                // str 8\n                var byteLength = this.lookU8();\n                object = this.decodeUtf8String(byteLength, 1);\n            }\n            else if (headByte === 0xda) {\n                // str 16\n                var byteLength = this.lookU16();\n                object = this.decodeUtf8String(byteLength, 2);\n            }\n            else if (headByte === 0xdb) {\n                // str 32\n                var byteLength = this.lookU32();\n                object = this.decodeUtf8String(byteLength, 4);\n            }\n            else if (headByte === 0xdc) {\n                // array 16\n                var size = this.readU16();\n                if (size !== 0) {\n                    this.pushArrayState(size);\n                    this.complete();\n                    continue DECODE;\n                }\n                else {\n                    object = [];\n                }\n            }\n            else if (headByte === 0xdd) {\n                // array 32\n                var size = this.readU32();\n                if (size !== 0) {\n                    this.pushArrayState(size);\n                    this.complete();\n                    continue DECODE;\n                }\n                else {\n                    object = [];\n                }\n            }\n            else if (headByte === 0xde) {\n                // map 16\n                var size = this.readU16();\n                if (size !== 0) {\n                    this.pushMapState(size);\n                    this.complete();\n                    continue DECODE;\n                }\n                else {\n                    object = {};\n                }\n            }\n            else if (headByte === 0xdf) {\n                // map 32\n                var size = this.readU32();\n                if (size !== 0) {\n                    this.pushMapState(size);\n                    this.complete();\n                    continue DECODE;\n                }\n                else {\n                    object = {};\n                }\n            }\n            else if (headByte === 0xc4) {\n                // bin 8\n                var size = this.lookU8();\n                object = this.decodeBinary(size, 1);\n            }\n            else if (headByte === 0xc5) {\n                // bin 16\n                var size = this.lookU16();\n                object = this.decodeBinary(size, 2);\n            }\n            else if (headByte === 0xc6) {\n                // bin 32\n                var size = this.lookU32();\n                object = this.decodeBinary(size, 4);\n            }\n            else if (headByte === 0xd4) {\n                // fixext 1\n                object = this.decodeExtension(1, 0);\n            }\n            else if (headByte === 0xd5) {\n                // fixext 2\n                object = this.decodeExtension(2, 0);\n            }\n            else if (headByte === 0xd6) {\n                // fixext 4\n                object = this.decodeExtension(4, 0);\n            }\n            else if (headByte === 0xd7) {\n                // fixext 8\n                object = this.decodeExtension(8, 0);\n            }\n            else if (headByte === 0xd8) {\n                // fixext 16\n                object = this.decodeExtension(16, 0);\n            }\n            else if (headByte === 0xc7) {\n                // ext 8\n                var size = this.lookU8();\n                object = this.decodeExtension(size, 1);\n            }\n            else if (headByte === 0xc8) {\n                // ext 16\n                var size = this.lookU16();\n                object = this.decodeExtension(size, 2);\n            }\n            else if (headByte === 0xc9) {\n                // ext 32\n                var size = this.lookU32();\n                object = this.decodeExtension(size, 4);\n            }\n            else {\n                throw new DecodeError(\"Unrecognized type byte: \".concat(prettyByte(headByte)));\n            }\n            this.complete();\n            var stack = this.stack;\n            while (stack.length > 0) {\n                // arrays and maps\n                var state = stack[stack.length - 1];\n                if (state.type === 0 /* State.ARRAY */) {\n                    state.array[state.position] = object;\n                    state.position++;\n                    if (state.position === state.size) {\n                        stack.pop();\n                        object = state.array;\n                    }\n                    else {\n                        continue DECODE;\n                    }\n                }\n                else if (state.type === 1 /* State.MAP_KEY */) {\n                    if (!isValidMapKeyType(object)) {\n                        throw new DecodeError(\"The type of key must be string or number but \" + typeof object);\n                    }\n                    if (object === \"__proto__\") {\n                        throw new DecodeError(\"The key __proto__ is not allowed\");\n                    }\n                    state.key = object;\n                    state.type = 2 /* State.MAP_VALUE */;\n                    continue DECODE;\n                }\n                else {\n                    // it must be `state.type === State.MAP_VALUE` here\n                    state.map[state.key] = object;\n                    state.readCount++;\n                    if (state.readCount === state.size) {\n                        stack.pop();\n                        object = state.map;\n                    }\n                    else {\n                        state.key = null;\n                        state.type = 1 /* State.MAP_KEY */;\n                        continue DECODE;\n                    }\n                }\n            }\n            return object;\n        }\n    };\n    Decoder.prototype.readHeadByte = function () {\n        if (this.headByte === HEAD_BYTE_REQUIRED) {\n            this.headByte = this.readU8();\n            // console.log(\"headByte\", prettyByte(this.headByte));\n        }\n        return this.headByte;\n    };\n    Decoder.prototype.complete = function () {\n        this.headByte = HEAD_BYTE_REQUIRED;\n    };\n    Decoder.prototype.readArraySize = function () {\n        var headByte = this.readHeadByte();\n        switch (headByte) {\n            case 0xdc:\n                return this.readU16();\n            case 0xdd:\n                return this.readU32();\n            default: {\n                if (headByte < 0xa0) {\n                    return headByte - 0x90;\n                }\n                else {\n                    throw new DecodeError(\"Unrecognized array type byte: \".concat(prettyByte(headByte)));\n                }\n            }\n        }\n    };\n    Decoder.prototype.pushMapState = function (size) {\n        if (size > this.maxMapLength) {\n            throw new DecodeError(\"Max length exceeded: map length (\".concat(size, \") > maxMapLengthLength (\").concat(this.maxMapLength, \")\"));\n        }\n        this.stack.push({\n            type: 1 /* State.MAP_KEY */,\n            size: size,\n            key: null,\n            readCount: 0,\n            map: {},\n        });\n    };\n    Decoder.prototype.pushArrayState = function (size) {\n        if (size > this.maxArrayLength) {\n            throw new DecodeError(\"Max length exceeded: array length (\".concat(size, \") > maxArrayLength (\").concat(this.maxArrayLength, \")\"));\n        }\n        this.stack.push({\n            type: 0 /* State.ARRAY */,\n            size: size,\n            array: new Array(size),\n            position: 0,\n        });\n    };\n    Decoder.prototype.decodeUtf8String = function (byteLength, headerOffset) {\n        var _a;\n        if (byteLength > this.maxStrLength) {\n            throw new DecodeError(\"Max length exceeded: UTF-8 byte length (\".concat(byteLength, \") > maxStrLength (\").concat(this.maxStrLength, \")\"));\n        }\n        if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n            throw MORE_DATA;\n        }\n        var offset = this.pos + headerOffset;\n        var object;\n        if (this.stateIsMapKey() && ((_a = this.keyDecoder) === null || _a === void 0 ? void 0 : _a.canBeCached(byteLength))) {\n            object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n        }\n        else if (byteLength > TEXT_DECODER_THRESHOLD) {\n            object = utf8DecodeTD(this.bytes, offset, byteLength);\n        }\n        else {\n            object = utf8DecodeJs(this.bytes, offset, byteLength);\n        }\n        this.pos += headerOffset + byteLength;\n        return object;\n    };\n    Decoder.prototype.stateIsMapKey = function () {\n        if (this.stack.length > 0) {\n            var state = this.stack[this.stack.length - 1];\n            return state.type === 1 /* State.MAP_KEY */;\n        }\n        return false;\n    };\n    Decoder.prototype.decodeBinary = function (byteLength, headOffset) {\n        if (byteLength > this.maxBinLength) {\n            throw new DecodeError(\"Max length exceeded: bin length (\".concat(byteLength, \") > maxBinLength (\").concat(this.maxBinLength, \")\"));\n        }\n        if (!this.hasRemaining(byteLength + headOffset)) {\n            throw MORE_DATA;\n        }\n        var offset = this.pos + headOffset;\n        var object = this.bytes.subarray(offset, offset + byteLength);\n        this.pos += headOffset + byteLength;\n        return object;\n    };\n    Decoder.prototype.decodeExtension = function (size, headOffset) {\n        if (size > this.maxExtLength) {\n            throw new DecodeError(\"Max length exceeded: ext length (\".concat(size, \") > maxExtLength (\").concat(this.maxExtLength, \")\"));\n        }\n        var extType = this.view.getInt8(this.pos + headOffset);\n        var data = this.decodeBinary(size, headOffset + 1 /* extType */);\n        return this.extensionCodec.decode(data, extType, this.context);\n    };\n    Decoder.prototype.lookU8 = function () {\n        return this.view.getUint8(this.pos);\n    };\n    Decoder.prototype.lookU16 = function () {\n        return this.view.getUint16(this.pos);\n    };\n    Decoder.prototype.lookU32 = function () {\n        return this.view.getUint32(this.pos);\n    };\n    Decoder.prototype.readU8 = function () {\n        var value = this.view.getUint8(this.pos);\n        this.pos++;\n        return value;\n    };\n    Decoder.prototype.readI8 = function () {\n        var value = this.view.getInt8(this.pos);\n        this.pos++;\n        return value;\n    };\n    Decoder.prototype.readU16 = function () {\n        var value = this.view.getUint16(this.pos);\n        this.pos += 2;\n        return value;\n    };\n    Decoder.prototype.readI16 = function () {\n        var value = this.view.getInt16(this.pos);\n        this.pos += 2;\n        return value;\n    };\n    Decoder.prototype.readU32 = function () {\n        var value = this.view.getUint32(this.pos);\n        this.pos += 4;\n        return value;\n    };\n    Decoder.prototype.readI32 = function () {\n        var value = this.view.getInt32(this.pos);\n        this.pos += 4;\n        return value;\n    };\n    Decoder.prototype.readU64 = function () {\n        var value = getUint64(this.view, this.pos);\n        this.pos += 8;\n        return value;\n    };\n    Decoder.prototype.readI64 = function () {\n        var value = getInt64(this.view, this.pos);\n        this.pos += 8;\n        return value;\n    };\n    Decoder.prototype.readF32 = function () {\n        var value = this.view.getFloat32(this.pos);\n        this.pos += 4;\n        return value;\n    };\n    Decoder.prototype.readF64 = function () {\n        var value = this.view.getFloat64(this.pos);\n        this.pos += 8;\n        return value;\n    };\n    return Decoder;\n}());\nexport { Decoder };\n//# sourceMappingURL=Decoder.mjs.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Not exported from index.\r\n/** @private */\r\nexport class BinaryMessageFormat {\r\n    // The length prefix of binary messages is encoded as VarInt. Read the comment in\r\n    // the BinaryMessageParser.TryParseMessage for details.\r\n    static write(output) {\r\n        let size = output.byteLength || output.length;\r\n        const lenBuffer = [];\r\n        do {\r\n            let sizePart = size & 0x7f;\r\n            size = size >> 7;\r\n            if (size > 0) {\r\n                sizePart |= 0x80;\r\n            }\r\n            lenBuffer.push(sizePart);\r\n        } while (size > 0);\r\n        size = output.byteLength || output.length;\r\n        const buffer = new Uint8Array(lenBuffer.length + size);\r\n        buffer.set(lenBuffer, 0);\r\n        buffer.set(output, lenBuffer.length);\r\n        return buffer.buffer;\r\n    }\r\n    static parse(input) {\r\n        const result = [];\r\n        const uint8Array = new Uint8Array(input);\r\n        const maxLengthPrefixSize = 5;\r\n        const numBitsToShift = [0, 7, 14, 21, 28];\r\n        for (let offset = 0; offset < input.byteLength;) {\r\n            let numBytes = 0;\r\n            let size = 0;\r\n            let byteRead;\r\n            do {\r\n                byteRead = uint8Array[offset + numBytes];\r\n                size = size | ((byteRead & 0x7f) << (numBitsToShift[numBytes]));\r\n                numBytes++;\r\n            } while (numBytes < Math.min(maxLengthPrefixSize, input.byteLength - offset) && (byteRead & 0x80) !== 0);\r\n            if ((byteRead & 0x80) !== 0 && numBytes < maxLengthPrefixSize) {\r\n                throw new Error(\"Cannot read message size.\");\r\n            }\r\n            if (numBytes === maxLengthPrefixSize && byteRead > 7) {\r\n                throw new Error(\"Messages bigger than 2GB are not supported.\");\r\n            }\r\n            if (uint8Array.byteLength >= (offset + numBytes + size)) {\r\n                // IE does not support .slice() so use subarray\r\n                result.push(uint8Array.slice\r\n                    ? uint8Array.slice(offset + numBytes, offset + numBytes + size)\r\n                    : uint8Array.subarray(offset + numBytes, offset + numBytes + size));\r\n            }\r\n            else {\r\n                throw new Error(\"Incomplete message.\");\r\n            }\r\n            offset = offset + numBytes + size;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n//# sourceMappingURL=BinaryMessageFormat.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { Encoder, Decoder } from \"@msgpack/msgpack\";\r\nimport { LogLevel, MessageType, NullLogger, TransferFormat, } from \"@microsoft/signalr\";\r\nimport { BinaryMessageFormat } from \"./BinaryMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n// TypeDoc's @inheritDoc and @link don't work across modules :(\r\n// constant encoding of the ping message\r\n// see: https://github.com/aspnet/SignalR/blob/dev/specs/HubProtocol.md#ping-message-encoding-1\r\n// Don't use Uint8Array.from as IE does not support it\r\nconst SERIALIZED_PING_MESSAGE = new Uint8Array([0x91, MessageType.Ping]);\r\n/** Implements the MessagePack Hub Protocol */\r\nexport class MessagePackHubProtocol {\r\n    /**\r\n     *\r\n     * @param messagePackOptions MessagePack options passed to @msgpack/msgpack\r\n     */\r\n    constructor(messagePackOptions) {\r\n        /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n        this.name = \"messagepack\";\r\n        /** The version of the protocol. */\r\n        this.version = 2;\r\n        /** The TransferFormat of the protocol. */\r\n        this.transferFormat = TransferFormat.Binary;\r\n        this._errorResult = 1;\r\n        this._voidResult = 2;\r\n        this._nonVoidResult = 3;\r\n        messagePackOptions = messagePackOptions || {};\r\n        this._encoder = new Encoder(messagePackOptions.extensionCodec, messagePackOptions.context, messagePackOptions.maxDepth, messagePackOptions.initialBufferSize, messagePackOptions.sortKeys, messagePackOptions.forceFloat32, messagePackOptions.ignoreUndefined, messagePackOptions.forceIntegerToFloat);\r\n        this._decoder = new Decoder(messagePackOptions.extensionCodec, messagePackOptions.context, messagePackOptions.maxStrLength, messagePackOptions.maxBinLength, messagePackOptions.maxArrayLength, messagePackOptions.maxMapLength, messagePackOptions.maxExtLength);\r\n    }\r\n    /** Creates an array of HubMessage objects from the specified serialized representation.\r\n     *\r\n     * @param {ArrayBuffer} input An ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input, logger) {\r\n        // The interface does allow \"string\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (!(isArrayBuffer(input))) {\r\n            throw new Error(\"Invalid input for MessagePack hub protocol. Expected an ArrayBuffer.\");\r\n        }\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n        const messages = BinaryMessageFormat.parse(input);\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = this._parseMessage(message, logger);\r\n            // Can be null for an unknown message. Unknown message is logged in parseMessage\r\n            if (parsedMessage) {\r\n                hubMessages.push(parsedMessage);\r\n            }\r\n        }\r\n        return hubMessages;\r\n    }\r\n    /** Writes the specified HubMessage to an ArrayBuffer and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {ArrayBuffer} An ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message) {\r\n        switch (message.type) {\r\n            case MessageType.Invocation:\r\n                return this._writeInvocation(message);\r\n            case MessageType.StreamInvocation:\r\n                return this._writeStreamInvocation(message);\r\n            case MessageType.StreamItem:\r\n                return this._writeStreamItem(message);\r\n            case MessageType.Completion:\r\n                return this._writeCompletion(message);\r\n            case MessageType.Ping:\r\n                return BinaryMessageFormat.write(SERIALIZED_PING_MESSAGE);\r\n            case MessageType.CancelInvocation:\r\n                return this._writeCancelInvocation(message);\r\n            case MessageType.Close:\r\n                return this._writeClose();\r\n            case MessageType.Ack:\r\n                return this._writeAck(message);\r\n            case MessageType.Sequence:\r\n                return this._writeSequence(message);\r\n            default:\r\n                throw new Error(\"Invalid message type.\");\r\n        }\r\n    }\r\n    _parseMessage(input, logger) {\r\n        if (input.length === 0) {\r\n            throw new Error(\"Invalid payload.\");\r\n        }\r\n        const properties = this._decoder.decode(input);\r\n        if (properties.length === 0 || !(properties instanceof Array)) {\r\n            throw new Error(\"Invalid payload.\");\r\n        }\r\n        const messageType = properties[0];\r\n        switch (messageType) {\r\n            case MessageType.Invocation:\r\n                return this._createInvocationMessage(this._readHeaders(properties), properties);\r\n            case MessageType.StreamItem:\r\n                return this._createStreamItemMessage(this._readHeaders(properties), properties);\r\n            case MessageType.Completion:\r\n                return this._createCompletionMessage(this._readHeaders(properties), properties);\r\n            case MessageType.Ping:\r\n                return this._createPingMessage(properties);\r\n            case MessageType.Close:\r\n                return this._createCloseMessage(properties);\r\n            case MessageType.Ack:\r\n                return this._createAckMessage(properties);\r\n            case MessageType.Sequence:\r\n                return this._createSequenceMessage(properties);\r\n            default:\r\n                // Future protocol changes can add message types, old clients can ignore them\r\n                logger.log(LogLevel.Information, \"Unknown message type '\" + messageType + \"' ignored.\");\r\n                return null;\r\n        }\r\n    }\r\n    _createCloseMessage(properties) {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 2) {\r\n            throw new Error(\"Invalid payload for Close message.\");\r\n        }\r\n        return {\r\n            // Close messages have no headers.\r\n            allowReconnect: properties.length >= 3 ? properties[2] : undefined,\r\n            error: properties[1],\r\n            type: MessageType.Close,\r\n        };\r\n    }\r\n    _createPingMessage(properties) {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 1) {\r\n            throw new Error(\"Invalid payload for Ping message.\");\r\n        }\r\n        return {\r\n            // Ping messages have no headers.\r\n            type: MessageType.Ping,\r\n        };\r\n    }\r\n    _createInvocationMessage(headers, properties) {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 5) {\r\n            throw new Error(\"Invalid payload for Invocation message.\");\r\n        }\r\n        const invocationId = properties[2];\r\n        if (invocationId) {\r\n            return {\r\n                arguments: properties[4],\r\n                headers,\r\n                invocationId,\r\n                streamIds: [],\r\n                target: properties[3],\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                arguments: properties[4],\r\n                headers,\r\n                streamIds: [],\r\n                target: properties[3],\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n    _createStreamItemMessage(headers, properties) {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 4) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n        return {\r\n            headers,\r\n            invocationId: properties[2],\r\n            item: properties[3],\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n    _createCompletionMessage(headers, properties) {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 4) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n        const resultKind = properties[3];\r\n        if (resultKind !== this._voidResult && properties.length < 5) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n        let error;\r\n        let result;\r\n        switch (resultKind) {\r\n            case this._errorResult:\r\n                error = properties[4];\r\n                break;\r\n            case this._nonVoidResult:\r\n                result = properties[4];\r\n                break;\r\n        }\r\n        const completionMessage = {\r\n            error,\r\n            headers,\r\n            invocationId: properties[2],\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n        return completionMessage;\r\n    }\r\n    _createAckMessage(properties) {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 1) {\r\n            throw new Error(\"Invalid payload for Ack message.\");\r\n        }\r\n        return {\r\n            sequenceId: properties[1],\r\n            type: MessageType.Ack,\r\n        };\r\n    }\r\n    _createSequenceMessage(properties) {\r\n        // check minimum length to allow protocol to add items to the end of objects in future releases\r\n        if (properties.length < 1) {\r\n            throw new Error(\"Invalid payload for Sequence message.\");\r\n        }\r\n        return {\r\n            sequenceId: properties[1],\r\n            type: MessageType.Sequence,\r\n        };\r\n    }\r\n    _writeInvocation(invocationMessage) {\r\n        let payload;\r\n        if (invocationMessage.streamIds) {\r\n            payload = this._encoder.encode([MessageType.Invocation, invocationMessage.headers || {}, invocationMessage.invocationId || null,\r\n                invocationMessage.target, invocationMessage.arguments, invocationMessage.streamIds]);\r\n        }\r\n        else {\r\n            payload = this._encoder.encode([MessageType.Invocation, invocationMessage.headers || {}, invocationMessage.invocationId || null,\r\n                invocationMessage.target, invocationMessage.arguments]);\r\n        }\r\n        return BinaryMessageFormat.write(payload.slice());\r\n    }\r\n    _writeStreamInvocation(streamInvocationMessage) {\r\n        let payload;\r\n        if (streamInvocationMessage.streamIds) {\r\n            payload = this._encoder.encode([MessageType.StreamInvocation, streamInvocationMessage.headers || {}, streamInvocationMessage.invocationId,\r\n                streamInvocationMessage.target, streamInvocationMessage.arguments, streamInvocationMessage.streamIds]);\r\n        }\r\n        else {\r\n            payload = this._encoder.encode([MessageType.StreamInvocation, streamInvocationMessage.headers || {}, streamInvocationMessage.invocationId,\r\n                streamInvocationMessage.target, streamInvocationMessage.arguments]);\r\n        }\r\n        return BinaryMessageFormat.write(payload.slice());\r\n    }\r\n    _writeStreamItem(streamItemMessage) {\r\n        const payload = this._encoder.encode([MessageType.StreamItem, streamItemMessage.headers || {}, streamItemMessage.invocationId,\r\n            streamItemMessage.item]);\r\n        return BinaryMessageFormat.write(payload.slice());\r\n    }\r\n    _writeCompletion(completionMessage) {\r\n        const resultKind = completionMessage.error ? this._errorResult :\r\n            (completionMessage.result !== undefined) ? this._nonVoidResult : this._voidResult;\r\n        let payload;\r\n        switch (resultKind) {\r\n            case this._errorResult:\r\n                payload = this._encoder.encode([MessageType.Completion, completionMessage.headers || {}, completionMessage.invocationId, resultKind, completionMessage.error]);\r\n                break;\r\n            case this._voidResult:\r\n                payload = this._encoder.encode([MessageType.Completion, completionMessage.headers || {}, completionMessage.invocationId, resultKind]);\r\n                break;\r\n            case this._nonVoidResult:\r\n                payload = this._encoder.encode([MessageType.Completion, completionMessage.headers || {}, completionMessage.invocationId, resultKind, completionMessage.result]);\r\n                break;\r\n        }\r\n        return BinaryMessageFormat.write(payload.slice());\r\n    }\r\n    _writeCancelInvocation(cancelInvocationMessage) {\r\n        const payload = this._encoder.encode([MessageType.CancelInvocation, cancelInvocationMessage.headers || {}, cancelInvocationMessage.invocationId]);\r\n        return BinaryMessageFormat.write(payload.slice());\r\n    }\r\n    _writeClose() {\r\n        const payload = this._encoder.encode([MessageType.Close, null]);\r\n        return BinaryMessageFormat.write(payload.slice());\r\n    }\r\n    _writeAck(ackMessage) {\r\n        const payload = this._encoder.encode([MessageType.Ack, ackMessage.sequenceId]);\r\n        return BinaryMessageFormat.write(payload.slice());\r\n    }\r\n    _writeSequence(sequenceMessage) {\r\n        const payload = this._encoder.encode([MessageType.Sequence, sequenceMessage.sequenceId]);\r\n        return BinaryMessageFormat.write(payload.slice());\r\n    }\r\n    _readHeaders(properties) {\r\n        const headers = properties[1];\r\n        if (typeof headers !== \"object\") {\r\n            throw new Error(\"Invalid headers.\");\r\n        }\r\n        return headers;\r\n    }\r\n}\r\n//# sourceMappingURL=MessagePackHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Copied from signalr/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val) {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n//# sourceMappingURL=Utils.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nconst nativeDecoder = typeof TextDecoder === 'function'\r\n  ? new TextDecoder('utf-8')\r\n  : null;\r\n\r\nexport const decodeUtf8: (bytes: Uint8Array) => string\r\n  = nativeDecoder ? nativeDecoder.decode.bind(nativeDecoder) : decodeImpl;\r\n\r\n/* !\r\nLogic in decodeImpl is derived from fast-text-encoding\r\nhttps://github.com/samthor/fast-text-encoding\r\n\r\nLicense for fast-text-encoding: Apache 2.0\r\nhttps://github.com/samthor/fast-text-encoding/blob/master/LICENSE\r\n*/\r\n\r\nfunction decodeImpl(bytes: Uint8Array): string {\r\n  let pos = 0;\r\n  const len = bytes.length;\r\n  const out: number[] = [];\r\n  const substrings: string[] = [];\r\n\r\n  while (pos < len) {\r\n    const byte1 = bytes[pos++];\r\n    if (byte1 === 0) {\r\n      break; // NULL\r\n    }\r\n\r\n    if ((byte1 & 0x80) === 0) { // 1-byte\r\n      out.push(byte1);\r\n    } else if ((byte1 & 0xe0) === 0xc0) { // 2-byte\r\n      const byte2 = bytes[pos++] & 0x3f;\r\n      out.push(((byte1 & 0x1f) << 6) | byte2);\r\n    } else if ((byte1 & 0xf0) === 0xe0) {\r\n      const byte2 = bytes[pos++] & 0x3f;\r\n      const byte3 = bytes[pos++] & 0x3f;\r\n      out.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\r\n    } else if ((byte1 & 0xf8) === 0xf0) {\r\n      const byte2 = bytes[pos++] & 0x3f;\r\n      const byte3 = bytes[pos++] & 0x3f;\r\n      const byte4 = bytes[pos++] & 0x3f;\r\n\r\n      // this can be > 0xffff, so possibly generate surrogates\r\n      let codepoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\r\n      if (codepoint > 0xffff) {\r\n        // codepoint &= ~0x10000;\r\n        codepoint -= 0x10000;\r\n        out.push((codepoint >>> 10) & 0x3ff | 0xd800);\r\n        codepoint = 0xdc00 | codepoint & 0x3ff;\r\n      }\r\n      out.push(codepoint);\r\n    } else {\r\n      // FIXME: we're ignoring this\r\n    }\r\n\r\n    // As a workaround for https://github.com/samthor/fast-text-encoding/issues/1,\r\n    // make sure the 'out' array never gets too long. When it reaches a limit, we\r\n    // stringify what we have so far and append to a list of outputs.\r\n    if (out.length > 1024) {\r\n      substrings.push(String.fromCharCode.apply(null, out));\r\n      out.length = 0;\r\n    }\r\n  }\r\n\r\n  substrings.push(String.fromCharCode.apply(null, out));\r\n  return substrings.join('');\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nconst uint64HighPartShift = Math.pow(2, 32);\r\nconst maxSafeNumberHighPart = Math.pow(2, 21) - 1; // The high-order int32 from Number.MAX_SAFE_INTEGER\r\n\r\nexport function readInt32LE(buffer: Uint8Array, position: number): any {\r\n  return (buffer[position])\r\n        | (buffer[position + 1] << 8)\r\n        | (buffer[position + 2] << 16)\r\n        | (buffer[position + 3] << 24);\r\n}\r\n\r\nexport function readUint32LE(buffer: Uint8Array, position: number): any {\r\n  return (buffer[position])\r\n        + (buffer[position + 1] << 8)\r\n        + (buffer[position + 2] << 16)\r\n        + ((buffer[position + 3] << 24) >>> 0); // The >>> 0 coerces the value to unsigned\r\n}\r\n\r\nexport function readUint64LE(buffer: Uint8Array, position: number): any {\r\n  // This cannot be done using bit-shift operators in JavaScript, because\r\n  // those all implicitly convert to int32\r\n  const highPart = readUint32LE(buffer, position + 4);\r\n  if (highPart > maxSafeNumberHighPart) {\r\n    throw new Error(`Cannot read uint64 with high order part ${highPart}, because the result would exceed Number.MAX_SAFE_INTEGER.`);\r\n  }\r\n\r\n  return (highPart * uint64HighPartShift) + readUint32LE(buffer, position);\r\n}\r\n\r\nexport function readLEB128(buffer: Uint8Array, position: number): number {\r\n  let result = 0;\r\n  let shift = 0;\r\n  for (let index = 0; index < 4; index++) {\r\n    const byte = buffer[position + index];\r\n    result |= (byte & 127) << shift;\r\n    if (byte < 128) {\r\n      break;\r\n    }\r\n    shift += 7;\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function numLEB128Bytes(value: number): 1 | 2 | 3 | 4 {\r\n  return value < 128 ? 1\r\n    : value < 16384 ? 2\r\n      : value < 2097152 ? 3 : 4;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { RenderBatch, ArrayRange, RenderTreeDiff, ArrayValues, RenderTreeEdit, RenderTreeFrame, RenderTreeDiffReader, RenderTreeFrameReader, RenderTreeEditReader, ArrayRangeReader, ArrayBuilderSegmentReader, ArrayBuilderSegment } from './RenderBatch';\r\nimport { decodeUtf8 } from '../../Utf8Decoder';\r\nimport { readInt32LE, readUint64LE, readLEB128, numLEB128Bytes } from '../../BinaryDecoder';\r\n\r\nconst updatedComponentsEntryLength = 4; // Each is a single int32 giving the location of the data\r\nconst referenceFramesEntryLength = 20; // 1 int for frame type, then 16 bytes for type-specific data\r\nconst disposedComponentIdsEntryLength = 4; // Each is an int32 giving the ID\r\nconst disposedEventHandlerIdsEntryLength = 8; // Each is an int64 giving the ID\r\nconst editsEntryLength = 16; // 4 ints\r\nconst stringTableEntryLength = 4; // Each is an int32 giving the string data location, or -1 for null\r\n\r\nexport class OutOfProcessRenderBatch implements RenderBatch {\r\n  constructor(private batchData: Uint8Array) {\r\n    const stringReader = new OutOfProcessStringReader(batchData);\r\n\r\n    this.arrayRangeReader = new OutOfProcessArrayRangeReader(batchData);\r\n    this.arrayBuilderSegmentReader = new OutOfProcessArrayBuilderSegmentReader(batchData);\r\n    this.diffReader = new OutOfProcessRenderTreeDiffReader(batchData);\r\n    this.editReader = new OutOfProcessRenderTreeEditReader(batchData, stringReader);\r\n    this.frameReader = new OutOfProcessRenderTreeFrameReader(batchData, stringReader);\r\n  }\r\n\r\n  updatedComponents(): ArrayRange<RenderTreeDiff> {\r\n    return readInt32LE(this.batchData, this.batchData.length - 20); // 5th-from-last int32\r\n  }\r\n\r\n  referenceFrames(): ArrayRange<RenderTreeFrame> {\r\n    return readInt32LE(this.batchData, this.batchData.length - 16); // 4th-from-last int32\r\n  }\r\n\r\n  disposedComponentIds(): ArrayRange<number> {\r\n    return readInt32LE(this.batchData, this.batchData.length - 12); // 3rd-from-last int32\r\n  }\r\n\r\n  disposedEventHandlerIds(): ArrayRange<number> {\r\n    return readInt32LE(this.batchData, this.batchData.length - 8); // 2th-from-last int32\r\n  }\r\n\r\n  updatedComponentsEntry(values: ArrayValues<RenderTreeDiff>, index: number): RenderTreeDiff {\r\n    const tableEntryPos = (values as any) + index * updatedComponentsEntryLength;\r\n    return readInt32LE(this.batchData, tableEntryPos);\r\n  }\r\n\r\n  referenceFramesEntry(values: ArrayValues<RenderTreeFrame>, index: number): RenderTreeFrame {\r\n    return (values as any) + index * referenceFramesEntryLength as any;\r\n  }\r\n\r\n  disposedComponentIdsEntry(values: ArrayValues<number>, index: number): number {\r\n    const entryPos = (values as any) + index * disposedComponentIdsEntryLength;\r\n    return readInt32LE(this.batchData, entryPos);\r\n  }\r\n\r\n  disposedEventHandlerIdsEntry(values: ArrayValues<number>, index: number): number {\r\n    const entryPos = (values as any) + index * disposedEventHandlerIdsEntryLength;\r\n    return readUint64LE(this.batchData, entryPos);\r\n  }\r\n\r\n  diffReader: RenderTreeDiffReader;\r\n\r\n  editReader: RenderTreeEditReader;\r\n\r\n  frameReader: RenderTreeFrameReader;\r\n\r\n  arrayRangeReader: ArrayRangeReader;\r\n\r\n  arrayBuilderSegmentReader: ArrayBuilderSegmentReader;\r\n}\r\n\r\nclass OutOfProcessRenderTreeDiffReader implements RenderTreeDiffReader {\r\n  constructor(private batchDataUint8: Uint8Array) {\r\n  }\r\n\r\n  componentId(diff: RenderTreeDiff) {\r\n    // First int32 is componentId\r\n    return readInt32LE(this.batchDataUint8, diff as any);\r\n  }\r\n\r\n  edits(diff: RenderTreeDiff) {\r\n    // Entries data starts after the componentId (which is a 4-byte int)\r\n    return (diff as any + 4);\r\n  }\r\n\r\n  editsEntry(values: ArrayValues<RenderTreeEdit>, index: number) {\r\n    return (values as any) + index * editsEntryLength;\r\n  }\r\n}\r\n\r\nclass OutOfProcessRenderTreeEditReader implements RenderTreeEditReader {\r\n  constructor(private batchDataUint8: Uint8Array, private stringReader: OutOfProcessStringReader) {\r\n  }\r\n\r\n  editType(edit: RenderTreeEdit) {\r\n    return readInt32LE(this.batchDataUint8, edit as any); // 1st int\r\n  }\r\n\r\n  siblingIndex(edit: RenderTreeEdit) {\r\n    return readInt32LE(this.batchDataUint8, edit as any + 4); // 2nd int\r\n  }\r\n\r\n  newTreeIndex(edit: RenderTreeEdit) {\r\n    return readInt32LE(this.batchDataUint8, edit as any + 8); // 3rd int\r\n  }\r\n\r\n  moveToSiblingIndex(edit: RenderTreeEdit) {\r\n    return readInt32LE(this.batchDataUint8, edit as any + 8); // 3rd int\r\n  }\r\n\r\n  removedAttributeName(edit: RenderTreeEdit) {\r\n    const stringIndex = readInt32LE(this.batchDataUint8, edit as any + 12); // 4th int\r\n    return this.stringReader.readString(stringIndex);\r\n  }\r\n}\r\n\r\nclass OutOfProcessRenderTreeFrameReader implements RenderTreeFrameReader {\r\n  constructor(private batchDataUint8: Uint8Array, private stringReader: OutOfProcessStringReader) {\r\n  }\r\n\r\n  // For render frames, the 2nd-4th ints have different meanings depending on frameType.\r\n  // It's the caller's responsibility not to evaluate properties that aren't applicable to the frameType.\r\n\r\n  frameType(frame: RenderTreeFrame) {\r\n    return readInt32LE(this.batchDataUint8, frame as any); // 1st int\r\n  }\r\n\r\n  subtreeLength(frame: RenderTreeFrame) {\r\n    return readInt32LE(this.batchDataUint8, frame as any + 4); // 2nd int\r\n  }\r\n\r\n  elementReferenceCaptureId(frame: RenderTreeFrame) {\r\n    const stringIndex = readInt32LE(this.batchDataUint8, frame as any + 4); // 2nd int\r\n    return this.stringReader.readString(stringIndex);\r\n  }\r\n\r\n  componentId(frame: RenderTreeFrame) {\r\n    return readInt32LE(this.batchDataUint8, frame as any + 8); // 3rd int\r\n  }\r\n\r\n  elementName(frame: RenderTreeFrame) {\r\n    const stringIndex = readInt32LE(this.batchDataUint8, frame as any + 8); // 3rd int\r\n    return this.stringReader.readString(stringIndex);\r\n  }\r\n\r\n  textContent(frame: RenderTreeFrame) {\r\n    const stringIndex = readInt32LE(this.batchDataUint8, frame as any + 4); // 2nd int\r\n    return this.stringReader.readString(stringIndex);\r\n  }\r\n\r\n  markupContent(frame: RenderTreeFrame) {\r\n    const stringIndex = readInt32LE(this.batchDataUint8, frame as any + 4); // 2nd int\r\n    return this.stringReader.readString(stringIndex)!;\r\n  }\r\n\r\n  attributeName(frame: RenderTreeFrame) {\r\n    const stringIndex = readInt32LE(this.batchDataUint8, frame as any + 4); // 2nd int\r\n    return this.stringReader.readString(stringIndex);\r\n  }\r\n\r\n  attributeValue(frame: RenderTreeFrame) {\r\n    const stringIndex = readInt32LE(this.batchDataUint8, frame as any + 8); // 3rd int\r\n    return this.stringReader.readString(stringIndex);\r\n  }\r\n\r\n  attributeEventHandlerId(frame: RenderTreeFrame) {\r\n    return readUint64LE(this.batchDataUint8, frame as any + 12); // Bytes 12-19\r\n  }\r\n}\r\n\r\nclass OutOfProcessStringReader {\r\n  private stringTableStartIndex: number;\r\n\r\n  constructor(private batchDataUint8: Uint8Array) {\r\n    // Final int gives start position of the string table\r\n    this.stringTableStartIndex = readInt32LE(batchDataUint8, batchDataUint8.length - 4);\r\n  }\r\n\r\n  readString(index: number): string | null {\r\n    if (index === -1) { // Special value encodes 'null'\r\n      return null;\r\n    } else {\r\n      const stringTableEntryPos = readInt32LE(this.batchDataUint8, this.stringTableStartIndex + index * stringTableEntryLength);\r\n\r\n      // By default, .NET's BinaryWriter gives LEB128-length-prefixed UTF-8 data.\r\n      // This is convenient enough to decode in JavaScript.\r\n      const numUtf8Bytes = readLEB128(this.batchDataUint8, stringTableEntryPos);\r\n      const charsStart = stringTableEntryPos + numLEB128Bytes(numUtf8Bytes);\r\n      const utf8Data = new Uint8Array(\r\n        this.batchDataUint8.buffer,\r\n        this.batchDataUint8.byteOffset + charsStart,\r\n        numUtf8Bytes\r\n      );\r\n      return decodeUtf8(utf8Data);\r\n    }\r\n  }\r\n}\r\n\r\nclass OutOfProcessArrayRangeReader implements ArrayRangeReader {\r\n  constructor(private batchDataUint8: Uint8Array) {\r\n  }\r\n\r\n  count<T>(arrayRange: ArrayRange<T>) {\r\n    // First int is count\r\n    return readInt32LE(this.batchDataUint8, arrayRange as any);\r\n  }\r\n\r\n  values<T>(arrayRange: ArrayRange<T>) {\r\n    // Entries data starts after the 'count' int (i.e., after 4 bytes)\r\n    return arrayRange as any + 4;\r\n  }\r\n}\r\n\r\nclass OutOfProcessArrayBuilderSegmentReader implements ArrayBuilderSegmentReader {\r\n  constructor(private batchDataUint8: Uint8Array) {\r\n  }\r\n\r\n  offset<T>(_arrayBuilderSegment: ArrayBuilderSegment<T>): number {\r\n    // Not used by the out-of-process representation of RenderBatch data.\r\n    // This only exists on the ArrayBuilderSegmentReader for the shared-memory representation.\r\n    return 0;\r\n  }\r\n\r\n  count<T>(arrayBuilderSegment: ArrayBuilderSegment<T>) {\r\n    // First int is count\r\n    return readInt32LE(this.batchDataUint8, arrayBuilderSegment as any);\r\n  }\r\n\r\n  values<T>(arrayBuilderSegment: ArrayBuilderSegment<T>): ArrayValues<T> {\r\n    // Entries data starts after the 'count' int (i.e., after 4 bytes)\r\n    return arrayBuilderSegment as any + 4;\r\n  }\r\n}\r\n\r\n\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { renderBatch } from '../../Rendering/Renderer';\r\nimport { OutOfProcessRenderBatch } from '../../Rendering/RenderBatch/OutOfProcessRenderBatch';\r\nimport { Logger, LogLevel } from '../Logging/Logger';\r\nimport { HubConnection } from '@microsoft/signalr';\r\nimport { WebRendererId } from '../../Rendering/WebRendererId';\r\n\r\nexport class RenderQueue {\r\n  private nextBatchId = 2;\r\n\r\n  private fatalError?: string;\r\n\r\n  public logger: Logger;\r\n\r\n  public constructor(logger: Logger) {\r\n    this.logger = logger;\r\n  }\r\n\r\n  public async processBatch(receivedBatchId: number, batchData: Uint8Array, connection: HubConnection): Promise<void> {\r\n    if (receivedBatchId < this.nextBatchId) {\r\n      // SignalR delivers messages in order, but it does not guarantee that the message gets delivered.\r\n      // For that reason, if the server re-sends a batch (for example during a reconnection because it didn't get an ack)\r\n      // we simply acknowledge it to get back in sync with the server.\r\n      await this.completeBatch(connection, receivedBatchId);\r\n      this.logger.log(LogLevel.Debug, `Batch ${receivedBatchId} already processed. Waiting for batch ${this.nextBatchId}.`);\r\n      return;\r\n    }\r\n\r\n    if (receivedBatchId > this.nextBatchId) {\r\n      if (this.fatalError) {\r\n        this.logger.log(LogLevel.Debug, `Received a new batch ${receivedBatchId} but errored out on a previous batch ${this.nextBatchId - 1}`);\r\n        await connection.send('OnRenderCompleted', this.nextBatchId - 1, this.fatalError.toString());\r\n        return;\r\n      }\r\n\r\n      this.logger.log(LogLevel.Debug, `Waiting for batch ${this.nextBatchId}. Batch ${receivedBatchId} not processed.`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.nextBatchId++;\r\n      this.logger.log(LogLevel.Debug, `Applying batch ${receivedBatchId}.`);\r\n      renderBatch(WebRendererId.Server, new OutOfProcessRenderBatch(batchData));\r\n      await this.completeBatch(connection, receivedBatchId);\r\n    } catch (error) {\r\n      this.fatalError = (error as Error).toString();\r\n      this.logger.log(LogLevel.Error, `There was an error applying batch ${receivedBatchId}.`);\r\n\r\n      // If there's a rendering exception, notify server *and* throw on client\r\n      connection.send('OnRenderCompleted', receivedBatchId, (error as Error).toString());\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public getLastBatchid(): number {\r\n    return this.nextBatchId - 1;\r\n  }\r\n\r\n  private async completeBatch(connection: signalR.HubConnection, batchId: number): Promise<void> {\r\n    try {\r\n      await connection.send('OnRenderCompleted', batchId, null);\r\n    } catch {\r\n      this.logger.log(LogLevel.Warning, `Failed to deliver completion notification for render '${batchId}'.`);\r\n    }\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nlet hasFailed = false;\r\n\r\nexport function showErrorNotification(): void {\r\n  const errorUi = document.querySelector('#blazor-error-ui') as HTMLElement;\r\n  if (errorUi) {\r\n    errorUi.style.display = 'block';\r\n  }\r\n\r\n  if (!hasFailed) {\r\n    hasFailed = true;\r\n    const errorUiReloads = document.querySelectorAll<HTMLElement>('#blazor-error-ui .reload');\r\n    errorUiReloads.forEach(reload => {\r\n      reload.onclick = function(e) {\r\n        location.reload();\r\n        e.preventDefault();\r\n      };\r\n    });\r\n\r\n    const errorUiDismiss = document.querySelectorAll<HTMLElement>('#blazor-error-ui .dismiss');\r\n    errorUiDismiss.forEach(dismiss => {\r\n      dismiss.onclick = function(e) {\r\n        const errorUi = document.querySelector<HTMLElement>('#blazor-error-ui');\r\n        if (errorUi) {\r\n          errorUi.style.display = 'none';\r\n        }\r\n        e.preventDefault();\r\n      };\r\n    });\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { internalFunctions as navigationManagerFunctions } from '../../Services/NavigationManager';\r\nimport { toLogicalRootCommentElement, LogicalElement, toLogicalElement } from '../../Rendering/LogicalElements';\r\nimport { ServerComponentDescriptor, descriptorToMarker } from '../../Services/ComponentDescriptorDiscovery';\r\nimport { HttpTransportType, HubConnection, HubConnectionBuilder, HubConnectionState, LogLevel } from '@microsoft/signalr';\r\nimport { getAndRemovePendingRootComponentContainer } from '../../Rendering/JSRootComponents';\r\nimport { RootComponentManager } from '../../Services/RootComponentManager';\r\nimport { CircuitStartOptions } from './CircuitStartOptions';\r\nimport { attachRootComponentToLogicalElement } from '../../Rendering/Renderer';\r\nimport { WebRendererId } from '../../Rendering/WebRendererId';\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\nimport { MessagePackHubProtocol } from '@microsoft/signalr-protocol-msgpack';\r\nimport { ConsoleLogger } from '../Logging/Loggers';\r\nimport { RenderQueue } from './RenderQueue';\r\nimport { Blazor } from '../../GlobalExports';\r\nimport { showErrorNotification } from '../../BootErrors';\r\nimport { attachWebRendererInterop, detachWebRendererInterop } from '../../Rendering/WebRendererInteropMethods';\r\nimport { sendJSDataStream } from './CircuitStreamingInterop';\r\n\r\nexport class CircuitManager implements DotNet.DotNetCallDispatcher {\r\n  private readonly _componentManager: RootComponentManager<ServerComponentDescriptor>;\r\n\r\n  private _applicationState: string;\r\n\r\n  private readonly _options: CircuitStartOptions;\r\n\r\n  private readonly _logger: ConsoleLogger;\r\n\r\n  private readonly _renderQueue: RenderQueue;\r\n\r\n  private readonly _dispatcher: DotNet.ICallDispatcher;\r\n\r\n  private _connection?: HubConnection;\r\n\r\n  private _interopMethodsForReconnection?: DotNet.DotNetObject;\r\n\r\n  private _circuitId?: string;\r\n\r\n  private _startPromise?: Promise<boolean>;\r\n\r\n  private _firstUpdate = true;\r\n\r\n  private _renderingFailed = false;\r\n\r\n  private _disposePromise?: Promise<void>;\r\n\r\n  private _disposed = false;\r\n\r\n  public constructor(\r\n    componentManager: RootComponentManager<ServerComponentDescriptor>,\r\n    appState: string,\r\n    options: CircuitStartOptions,\r\n    logger: ConsoleLogger,\r\n  ) {\r\n    this._circuitId = undefined;\r\n    this._applicationState = appState;\r\n    this._componentManager = componentManager;\r\n    this._options = options;\r\n    this._logger = logger;\r\n    this._renderQueue = new RenderQueue(this._logger);\r\n    this._dispatcher = DotNet.attachDispatcher(this);\r\n  }\r\n\r\n  public start(): Promise<boolean> {\r\n    if (this.isDisposedOrDisposing()) {\r\n      throw new Error('Cannot start a disposed circuit.');\r\n    }\r\n\r\n    if (!this._startPromise) {\r\n      this._startPromise = this.startCore();\r\n    }\r\n\r\n    return this._startPromise;\r\n  }\r\n\r\n  public updateRootComponents(operations: string): Promise<void> | undefined {\r\n    if (this._firstUpdate) {\r\n      // Only send the application state on the first update.\r\n      this._firstUpdate = false;\r\n      return this._connection?.send('UpdateRootComponents', operations, this._applicationState);\r\n    } else {\r\n      return this._connection?.send('UpdateRootComponents', operations, '');\r\n    }\r\n  }\r\n\r\n  private async startCore(): Promise<boolean> {\r\n    this._connection = await this.startConnection();\r\n\r\n    if (this._connection.state !== HubConnectionState.Connected) {\r\n      return false;\r\n    }\r\n\r\n    const componentsJson = JSON.stringify(this._componentManager.initialComponents.map(c => descriptorToMarker(c)));\r\n    this._circuitId = await this._connection.invoke<string>(\r\n      'StartCircuit',\r\n      navigationManagerFunctions.getBaseURI(),\r\n      navigationManagerFunctions.getLocationHref(),\r\n      componentsJson,\r\n      this._applicationState || ''\r\n    );\r\n\r\n    if (!this._circuitId) {\r\n      return false;\r\n    }\r\n\r\n    for (const handler of this._options.circuitHandlers) {\r\n      if (handler.onCircuitOpened){\r\n        handler.onCircuitOpened();\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private async startConnection(): Promise<HubConnection> {\r\n    const hubProtocol = new MessagePackHubProtocol();\r\n    (hubProtocol as unknown as { name: string }).name = 'blazorpack';\r\n\r\n    const connectionBuilder = new HubConnectionBuilder()\r\n      .withUrl('_blazor')\r\n      .withHubProtocol(hubProtocol);\r\n\r\n    this._options.configureSignalR(connectionBuilder);\r\n\r\n    const connection = connectionBuilder.build();\r\n\r\n    connection.on('JS.AttachComponent', (componentId, selector) => attachRootComponentToLogicalElement(WebRendererId.Server, this.resolveElement(selector), componentId, false));\r\n    connection.on('JS.BeginInvokeJS', this._dispatcher.beginInvokeJSFromDotNet.bind(this._dispatcher));\r\n    connection.on('JS.EndInvokeDotNet', this._dispatcher.endInvokeDotNetFromJS.bind(this._dispatcher));\r\n    connection.on('JS.ReceiveByteArray', this._dispatcher.receiveByteArray.bind(this._dispatcher));\r\n\r\n    connection.on('JS.BeginTransmitStream', (streamId: number) => {\r\n      const readableStream = new ReadableStream({\r\n        start: (controller) => {\r\n          connection.stream('SendDotNetStreamToJS', streamId).subscribe({\r\n            next: (chunk: Uint8Array) => controller.enqueue(chunk),\r\n            complete: () => controller.close(),\r\n            error: (err) => controller.error(err),\r\n          });\r\n        },\r\n      });\r\n\r\n      this._dispatcher.supplyDotNetStream(streamId, readableStream);\r\n    });\r\n\r\n    connection.on('JS.RenderBatch', async (batchId: number, batchData: Uint8Array) => {\r\n      this._logger.log(LogLevel.Debug, `Received render batch with id ${batchId} and ${batchData.byteLength} bytes.`);\r\n      await this._renderQueue.processBatch(batchId, batchData, this._connection!);\r\n      this._componentManager.onAfterRenderBatch?.(WebRendererId.Server);\r\n    });\r\n\r\n    connection.on('JS.EndUpdateRootComponents', (batchId: number) => {\r\n      this._componentManager.onAfterUpdateRootComponents?.(batchId);\r\n    });\r\n\r\n    connection.on('JS.EndLocationChanging', Blazor._internal.navigationManager.endLocationChanging);\r\n    connection.onclose(error => {\r\n      this._interopMethodsForReconnection = detachWebRendererInterop(WebRendererId.Server);\r\n\r\n      if (!this._disposed && !this._renderingFailed) {\r\n        this._options.reconnectionHandler!.onConnectionDown(this._options.reconnectionOptions, error);\r\n      }\r\n    });\r\n    connection.on('JS.Error', error => {\r\n      this._renderingFailed = true;\r\n      this.unhandledError(error);\r\n      showErrorNotification();\r\n    });\r\n\r\n    try {\r\n      await connection.start();\r\n    } catch (ex: any) {\r\n      this.unhandledError(ex as Error);\r\n\r\n      if (ex.errorType === 'FailedToNegotiateWithServerError') {\r\n        // Connection with the server has been interrupted, and we're in the process of reconnecting.\r\n        // Throw this exception so it can be handled at the reconnection layer, and don't show the\r\n        // error notification.\r\n        throw ex;\r\n      } else {\r\n        showErrorNotification();\r\n      }\r\n\r\n      if (ex.innerErrors) {\r\n        if (ex.innerErrors.some(e => e.errorType === 'UnsupportedTransportError' && e.transport === HttpTransportType.WebSockets)) {\r\n          this._logger.log(LogLevel.Error, 'Unable to connect, please ensure you are using an updated browser that supports WebSockets.');\r\n        } else if (ex.innerErrors.some(e => e.errorType === 'FailedToStartTransportError' && e.transport === HttpTransportType.WebSockets)) {\r\n          this._logger.log(LogLevel.Error, 'Unable to connect, please ensure WebSockets are available. A VPN or proxy may be blocking the connection.');\r\n        } else if (ex.innerErrors.some(e => e.errorType === 'DisabledTransportError' && e.transport === HttpTransportType.LongPolling)) {\r\n          this._logger.log(LogLevel.Error, 'Unable to initiate a SignalR connection to the server. This might be because the server is not configured to support WebSockets. For additional details, visit https://aka.ms/blazor-server-websockets-error.');\r\n        }\r\n      }\r\n    }\r\n\r\n    // Check if the connection is established using the long polling transport,\r\n    // using the `features.inherentKeepAlive` property only present with long polling.\r\n    if ((connection as any).connection?.features?.inherentKeepAlive) {\r\n      this._logger.log(LogLevel.Warning, 'Failed to connect via WebSockets, using the Long Polling fallback transport. This may be due to a VPN or proxy blocking the connection. To troubleshoot this, visit https://aka.ms/blazor-server-using-fallback-long-polling.');\r\n    }\r\n\r\n    return connection;\r\n  }\r\n\r\n  public async disconnect(): Promise<void> {\r\n    await this._connection?.stop();\r\n  }\r\n\r\n  public async reconnect(): Promise<boolean> {\r\n    if (!this._circuitId) {\r\n      throw new Error('Circuit host not initialized.');\r\n    }\r\n\r\n    if (this._connection!.state === HubConnectionState.Connected) {\r\n      return true;\r\n    }\r\n\r\n    this._connection = await this.startConnection();\r\n\r\n    if (this._interopMethodsForReconnection) {\r\n      attachWebRendererInterop(WebRendererId.Server, this._interopMethodsForReconnection);\r\n      this._interopMethodsForReconnection = undefined;\r\n    }\r\n\r\n    if (!await this._connection!.invoke<boolean>('ConnectCircuit', this._circuitId)) {\r\n      return false;\r\n    }\r\n\r\n    this._options.reconnectionHandler!.onConnectionUp();\r\n\r\n    return true;\r\n  }\r\n\r\n  // Implements DotNet.DotNetCallDispatcher\r\n  public beginInvokeDotNetFromJS(callId: number, assemblyName: string | null, methodIdentifier: string, dotNetObjectId: number | null, argsJson: string): void {\r\n    this.throwIfDispatchingWhenDisposed();\r\n    this._connection!.send('BeginInvokeDotNetFromJS', callId ? callId.toString() : null, assemblyName, methodIdentifier, dotNetObjectId || 0, argsJson);\r\n  }\r\n\r\n  // Implements DotNet.DotNetCallDispatcher\r\n  public endInvokeJSFromDotNet(asyncHandle: number, succeeded: boolean, argsJson: any): void {\r\n    this.throwIfDispatchingWhenDisposed();\r\n    this._connection!.send('EndInvokeJSFromDotNet', asyncHandle, succeeded, argsJson);\r\n  }\r\n\r\n  // Implements DotNet.DotNetCallDispatcher\r\n  public sendByteArray(id: number, data: Uint8Array): void {\r\n    this.throwIfDispatchingWhenDisposed();\r\n    this._connection!.send('ReceiveByteArray', id, data);\r\n  }\r\n\r\n  private throwIfDispatchingWhenDisposed() {\r\n    if (this._disposed) {\r\n      throw new Error('The circuit associated with this dispatcher is no longer available.');\r\n    }\r\n  }\r\n\r\n  public sendLocationChanged(uri: string, state: string | undefined, intercepted: boolean): Promise<void> {\r\n    return this._connection!.send('OnLocationChanged', uri, state, intercepted);\r\n  }\r\n\r\n  public sendLocationChanging(callId: number, uri: string, state: string | undefined, intercepted: boolean): Promise<void> {\r\n    return this._connection!.send('OnLocationChanging', callId, uri, state, intercepted);\r\n  }\r\n\r\n  public sendJsDataStream(data: ArrayBufferView | Blob, streamId: number, chunkSize: number) {\r\n    return sendJSDataStream(this._connection!, data, streamId, chunkSize);\r\n  }\r\n\r\n  public resolveElement(sequenceOrIdentifier: string): LogicalElement {\r\n    // It may be a root component added by JS\r\n    const jsAddedComponentContainer = getAndRemovePendingRootComponentContainer(sequenceOrIdentifier);\r\n    if (jsAddedComponentContainer) {\r\n      return toLogicalElement(jsAddedComponentContainer, true);\r\n    }\r\n\r\n    // ... or it may be a root component added by .NET\r\n    const parsedSequence = Number.parseInt(sequenceOrIdentifier);\r\n    if (!Number.isNaN(parsedSequence)) {\r\n      const descriptor = this._componentManager.resolveRootComponent(parsedSequence);\r\n      return toLogicalRootCommentElement(descriptor);\r\n    }\r\n\r\n    throw new Error(`Invalid sequence number or identifier '${sequenceOrIdentifier}'.`);\r\n  }\r\n\r\n  public getRootComponentManager(): RootComponentManager<ServerComponentDescriptor> {\r\n    return this._componentManager;\r\n  }\r\n\r\n  private unhandledError(err: Error): void {\r\n    this._logger.log(LogLevel.Error, err);\r\n\r\n    // Disconnect on errors.\r\n    // Trying to call methods on the connection after its been closed will throw.\r\n    this.disconnect();\r\n  }\r\n\r\n  private getDisconnectFormData(): FormData {\r\n    const data = new FormData();\r\n    const circuitId = this._circuitId!;\r\n    data.append('circuitId', circuitId);\r\n    return data;\r\n  }\r\n\r\n  public didRenderingFail(): boolean {\r\n    return this._renderingFailed;\r\n  }\r\n\r\n  public isDisposedOrDisposing(): boolean {\r\n    return this._disposePromise !== undefined;\r\n  }\r\n\r\n  public sendDisconnectBeacon() {\r\n    if (this._disposed) {\r\n      return;\r\n    }\r\n\r\n    const data = this.getDisconnectFormData();\r\n    this._disposed = navigator.sendBeacon('_blazor/disconnect', data);\r\n  }\r\n\r\n  public dispose(): Promise<void> {\r\n    if (!this._disposePromise) {\r\n      this._disposePromise = this.disposeCore();\r\n    }\r\n\r\n    return this._disposePromise;\r\n  }\r\n\r\n  private async disposeCore(): Promise<void> {\r\n    if (!this._startPromise) {\r\n      // The circuit hasn't started, so there isn't anything to dispose.\r\n      this._disposed = true;\r\n      return;\r\n    }\r\n\r\n    // The circuit has started. Wait until it's fully initialized before\r\n    // we start stop the connection.\r\n    await this._startPromise;\r\n\r\n    this._disposed = true;\r\n    this._connection?.stop();\r\n\r\n    // Dispose the circuit on the server immediately. Closing the SignalR connection alone\r\n    // without sending the disconnect message will result in the circuit being kept\r\n    // alive on the server longer than it needs to be.\r\n    const formData = this.getDisconnectFormData();\r\n    fetch('_blazor/disconnect', {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n\r\n    for (const handler of this._options.circuitHandlers) {\r\n      if (handler.onCircuitClosed) {\r\n        handler.onCircuitClosed();\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HubConnection } from '@microsoft/signalr';\r\nimport { getNextChunk } from '../../StreamingInterop';\r\n\r\nexport function sendJSDataStream(connection: HubConnection, data: ArrayBufferView | Blob, streamId: number, chunkSize: number): void {\r\n  // Run the rest in the background, without delaying the completion of the call to sendJSDataStream\r\n  // otherwise we'll deadlock (.NET can't begin reading until this completes, but it won't complete\r\n  // because nobody's reading the pipe)\r\n  setTimeout(async () => {\r\n    const maxMillisecondsBetweenAcks = 500;\r\n    let numChunksUntilNextAck = 5;\r\n    let lastAckTime = new Date().valueOf();\r\n    try {\r\n      const byteLength = data instanceof Blob ? data.size : data.byteLength;\r\n      let position = 0;\r\n      let chunkId = 0;\r\n\r\n      while (position < byteLength) {\r\n        const nextChunkSize = Math.min(chunkSize, byteLength - position);\r\n        const nextChunkData = await getNextChunk(data, position, nextChunkSize);\r\n\r\n        numChunksUntilNextAck--;\r\n        if (numChunksUntilNextAck > 1) {\r\n          // Most of the time just send and buffer within the network layer\r\n          await connection.send('ReceiveJSDataChunk', streamId, chunkId, nextChunkData, null);\r\n        } else {\r\n          // But regularly, wait for an ACK, so other events can be interleaved\r\n          // The use of \"invoke\" (not \"send\") here is what prevents the JS side from queuing up chunks\r\n          // faster than the .NET side can receive them. It means that if there are other user interactions\r\n          // while the transfer is in progress, they would get inserted in the middle, so it would be\r\n          // possible to navigate away or cancel without first waiting for all the remaining chunks.\r\n          const streamIsAlive = await connection.invoke<boolean>('ReceiveJSDataChunk', streamId, chunkId, nextChunkData, null);\r\n\r\n          // Checks to see if we should continue streaming or if the stream has been cancelled/disposed.\r\n          if (!streamIsAlive) {\r\n            break;\r\n          }\r\n\r\n          // Estimate the number of chunks we should send before the next ack to achieve the desired\r\n          // interactivity rate.\r\n          const timeNow = new Date().valueOf();\r\n          const msSinceAck = timeNow - lastAckTime;\r\n          lastAckTime = timeNow;\r\n          numChunksUntilNextAck = Math.max(1, Math.round(maxMillisecondsBetweenAcks / Math.max(1, msSinceAck)));\r\n        }\r\n\r\n        position += nextChunkSize;\r\n        chunkId++;\r\n      }\r\n    } catch (error) {\r\n      await connection.send('ReceiveJSDataChunk', streamId, -1, null, (error as Error).toString());\r\n    }\r\n  }, 0);\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IBlazor } from '../../GlobalExports';\r\nimport { LogLevel } from '../Logging/Logger';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\n\r\nexport type BeforeBlazorServerStartedCallback = (options: Partial<CircuitStartOptions>) => Promise<void>;\r\nexport type AfterBlazorServerStartedCallback = (blazor: IBlazor) => Promise<void>;\r\n\r\nexport type ServerInitializers = {\r\n  beforeStart: BeforeBlazorServerStartedCallback [],\r\n  afterStarted: AfterBlazorServerStartedCallback [],\r\n}\r\n\r\nexport interface CircuitStartOptions {\r\n  configureSignalR: (builder: HubConnectionBuilder) => void;\r\n  logLevel: LogLevel;\r\n  reconnectionOptions: ReconnectionOptions;\r\n  reconnectionHandler?: ReconnectionHandler;\r\n  initializers : ServerInitializers;\r\n  circuitHandlers: CircuitHandler[];\r\n}\r\n\r\nexport function resolveOptions(userOptions?: Partial<CircuitStartOptions>): CircuitStartOptions {\r\n  const result = { ...defaultOptions, ...userOptions };\r\n\r\n  // The spread operator can't be used for a deep merge, so do the same for subproperties\r\n  if (userOptions && userOptions.reconnectionOptions) {\r\n    result.reconnectionOptions = { ...defaultOptions.reconnectionOptions, ...userOptions.reconnectionOptions };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport interface ReconnectionOptions {\r\n  maxRetries: number;\r\n  retryIntervalMilliseconds: number;\r\n  dialogId: string;\r\n}\r\n\r\nexport interface CircuitHandler {\r\n  onCircuitOpened?: () => void;\r\n  onCircuitClosed?: () => void;\r\n}\r\n\r\nexport interface ReconnectionHandler {\r\n  onConnectionDown(options: ReconnectionOptions, error?: Error): void;\r\n  onConnectionUp(): void;\r\n}\r\n\r\nconst defaultOptions: CircuitStartOptions = {\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  configureSignalR: (_) => { },\r\n  logLevel: LogLevel.Warning,\r\n  initializers: undefined!,\r\n  circuitHandlers: [],\r\n  reconnectionOptions: {\r\n    maxRetries: 8,\r\n    retryIntervalMilliseconds: 20000,\r\n    dialogId: 'components-reconnect-modal',\r\n  },\r\n};\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ReconnectDisplay } from './ReconnectDisplay';\r\nimport { Logger, LogLevel } from '../Logging/Logger';\r\nimport { Blazor } from '../../GlobalExports';\r\n\r\nexport class DefaultReconnectDisplay implements ReconnectDisplay {\r\n  modal: HTMLDivElement;\r\n\r\n  message: HTMLHeadingElement;\r\n\r\n  button: HTMLButtonElement;\r\n\r\n  reloadParagraph: HTMLParagraphElement;\r\n\r\n  loader: HTMLDivElement;\r\n\r\n  constructor(dialogId: string, private readonly maxRetries: number, private readonly document: Document, private readonly logger: Logger) {\r\n    this.modal = this.document.createElement('div');\r\n    this.modal.id = dialogId;\r\n    this.maxRetries = maxRetries;\r\n\r\n    const modalStyles = [\r\n      'position: fixed',\r\n      'top: 0',\r\n      'right: 0',\r\n      'bottom: 0',\r\n      'left: 0',\r\n      'z-index: 1050',\r\n      'display: none',\r\n      'overflow: hidden',\r\n      'background-color: #fff',\r\n      'opacity: 0.8',\r\n      'text-align: center',\r\n      'font-weight: bold',\r\n      'transition: visibility 0s linear 500ms',\r\n    ];\r\n\r\n    this.modal.style.cssText = modalStyles.join(';');\r\n\r\n    this.message = this.document.createElement('h5') as HTMLHeadingElement;\r\n    this.message.style.cssText = 'margin-top: 20px';\r\n\r\n    this.button = this.document.createElement('button') as HTMLButtonElement;\r\n    this.button.style.cssText = 'margin:5px auto 5px';\r\n    this.button.textContent = 'Retry';\r\n\r\n    const link = this.document.createElement('a');\r\n    link.addEventListener('click', () => location.reload());\r\n    link.textContent = 'reload';\r\n\r\n    this.reloadParagraph = this.document.createElement('p') as HTMLParagraphElement;\r\n    this.reloadParagraph.textContent = 'Alternatively, ';\r\n    this.reloadParagraph.appendChild(link);\r\n\r\n    this.modal.appendChild(this.message);\r\n    this.modal.appendChild(this.button);\r\n    this.modal.appendChild(this.reloadParagraph);\r\n\r\n    this.loader = this.getLoader();\r\n\r\n    this.message.after(this.loader);\r\n\r\n    this.button.addEventListener('click', async () => {\r\n      this.show();\r\n\r\n      try {\r\n        // reconnect will asynchronously return:\r\n        // - true to mean success\r\n        // - false to mean we reached the server, but it rejected the connection (e.g., unknown circuit ID)\r\n        // - exception to mean we didn't reach the server (this can be sync or async)\r\n        const successful = await Blazor.reconnect!();\r\n        if (!successful) {\r\n          this.rejected();\r\n        }\r\n      } catch (err: unknown) {\r\n        // We got an exception, server is currently unavailable\r\n        this.logger.log(LogLevel.Error, err as Error);\r\n        this.failed();\r\n      }\r\n    });\r\n  }\r\n\r\n  show(): void {\r\n    if (!this.document.contains(this.modal)) {\r\n      this.document.body.appendChild(this.modal);\r\n    }\r\n    this.modal.style.display = 'block';\r\n    this.loader.style.display = 'inline-block';\r\n    this.button.style.display = 'none';\r\n    this.reloadParagraph.style.display = 'none';\r\n    this.message.textContent = 'Attempting to reconnect to the server...';\r\n\r\n    // The visibility property has a transition so it takes effect after a delay.\r\n    // This is to prevent it appearing momentarily when navigating away. For the\r\n    // transition to take effect, we have to apply the visibility asynchronously.\r\n    this.modal.style.visibility = 'hidden';\r\n    setTimeout(() => {\r\n      this.modal.style.visibility = 'visible';\r\n    }, 0);\r\n  }\r\n\r\n  update(currentAttempt: number): void {\r\n    this.message.textContent = `Attempting to reconnect to the server: ${currentAttempt} of ${this.maxRetries}`;\r\n  }\r\n\r\n  hide(): void {\r\n    this.modal.style.display = 'none';\r\n  }\r\n\r\n  failed(): void {\r\n    this.button.style.display = 'block';\r\n    this.reloadParagraph.style.display = 'none';\r\n    this.loader.style.display = 'none';\r\n\r\n    const errorDescription = this.document.createTextNode('Reconnection failed. Try ');\r\n\r\n    const link = this.document.createElement('a');\r\n    link.textContent = 'reloading';\r\n    link.setAttribute('href', '');\r\n    link.addEventListener('click', () => location.reload());\r\n\r\n    const errorInstructions = this.document.createTextNode(' the page if you\\'re unable to reconnect.');\r\n\r\n    this.message.replaceChildren(errorDescription, link, errorInstructions);\r\n  }\r\n\r\n  rejected(): void {\r\n    this.button.style.display = 'none';\r\n    this.reloadParagraph.style.display = 'none';\r\n    this.loader.style.display = 'none';\r\n\r\n    const errorDescription = this.document.createTextNode('Could not reconnect to the server. ');\r\n\r\n    const link = this.document.createElement('a');\r\n    link.textContent = 'Reload';\r\n    link.setAttribute('href', '');\r\n    link.addEventListener('click', () => location.reload());\r\n\r\n    const errorInstructions = this.document.createTextNode(' the page to restore functionality.');\r\n\r\n    this.message.replaceChildren(errorDescription, link, errorInstructions);\r\n  }\r\n\r\n  private getLoader(): HTMLDivElement {\r\n    const loader = this.document.createElement('div');\r\n\r\n    const loaderStyles = [\r\n      'border: 0.3em solid #f3f3f3',\r\n      'border-top: 0.3em solid #3498db',\r\n      'border-radius: 50%',\r\n      'width: 2em',\r\n      'height: 2em',\r\n      'display: inline-block',\r\n    ];\r\n\r\n    loader.style.cssText = loaderStyles.join(';');\r\n    loader.animate([{ transform: 'rotate(0deg)' }, { transform: 'rotate(360deg)' }], {\r\n      duration: 2000,\r\n      iterations: Infinity,\r\n    });\r\n\r\n    return loader;\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ReconnectDisplay } from './ReconnectDisplay';\r\nexport class UserSpecifiedDisplay implements ReconnectDisplay {\r\n  static readonly ShowClassName = 'components-reconnect-show';\r\n\r\n  static readonly HideClassName = 'components-reconnect-hide';\r\n\r\n  static readonly FailedClassName = 'components-reconnect-failed';\r\n\r\n  static readonly RejectedClassName = 'components-reconnect-rejected';\r\n\r\n  static readonly MaxRetriesId = 'components-reconnect-max-retries';\r\n\r\n  static readonly CurrentAttemptId = 'components-reconnect-current-attempt';\r\n\r\n  constructor(private dialog: HTMLElement, private readonly maxRetries: number, private readonly document: Document) {\r\n    this.document = document;\r\n\r\n    const maxRetriesElement = this.document.getElementById(UserSpecifiedDisplay.MaxRetriesId);\r\n\r\n    if (maxRetriesElement) {\r\n      maxRetriesElement.innerText = this.maxRetries.toString();\r\n    }\r\n  }\r\n\r\n  show(): void {\r\n    this.removeClasses();\r\n    this.dialog.classList.add(UserSpecifiedDisplay.ShowClassName);\r\n  }\r\n\r\n  update(currentAttempt: number): void {\r\n    const currentAttemptElement = this.document.getElementById(UserSpecifiedDisplay.CurrentAttemptId);\r\n\r\n    if (currentAttemptElement) {\r\n      currentAttemptElement.innerText = currentAttempt.toString();\r\n    }\r\n  }\r\n\r\n  hide(): void {\r\n    this.removeClasses();\r\n    this.dialog.classList.add(UserSpecifiedDisplay.HideClassName);\r\n  }\r\n\r\n  failed(): void {\r\n    this.removeClasses();\r\n    this.dialog.classList.add(UserSpecifiedDisplay.FailedClassName);\r\n  }\r\n\r\n  rejected(): void {\r\n    this.removeClasses();\r\n    this.dialog.classList.add(UserSpecifiedDisplay.RejectedClassName);\r\n  }\r\n\r\n  private removeClasses() {\r\n    this.dialog.classList.remove(UserSpecifiedDisplay.ShowClassName, UserSpecifiedDisplay.HideClassName, UserSpecifiedDisplay.FailedClassName, UserSpecifiedDisplay.RejectedClassName);\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ReconnectionHandler, ReconnectionOptions } from './CircuitStartOptions';\r\nimport { ReconnectDisplay } from './ReconnectDisplay';\r\nimport { DefaultReconnectDisplay } from './DefaultReconnectDisplay';\r\nimport { UserSpecifiedDisplay } from './UserSpecifiedDisplay';\r\nimport { Logger, LogLevel } from '../Logging/Logger';\r\nimport { Blazor } from '../../GlobalExports';\r\n\r\nexport class DefaultReconnectionHandler implements ReconnectionHandler {\r\n  private readonly _logger: Logger;\r\n\r\n  private readonly _reconnectCallback: () => Promise<boolean>;\r\n\r\n  private _currentReconnectionProcess: ReconnectionProcess | null = null;\r\n\r\n  private _reconnectionDisplay?: ReconnectDisplay;\r\n\r\n  constructor(logger: Logger, overrideDisplay?: ReconnectDisplay, reconnectCallback?: () => Promise<boolean>) {\r\n    this._logger = logger;\r\n    this._reconnectionDisplay = overrideDisplay;\r\n    this._reconnectCallback = reconnectCallback || Blazor.reconnect!;\r\n  }\r\n\r\n  onConnectionDown(options: ReconnectionOptions, _error?: Error): void {\r\n    if (!this._reconnectionDisplay) {\r\n      const modal = document.getElementById(options.dialogId);\r\n      this._reconnectionDisplay = modal\r\n        ? new UserSpecifiedDisplay(modal, options.maxRetries, document)\r\n        : new DefaultReconnectDisplay(options.dialogId, options.maxRetries, document, this._logger);\r\n    }\r\n\r\n    if (!this._currentReconnectionProcess) {\r\n      this._currentReconnectionProcess = new ReconnectionProcess(options, this._logger, this._reconnectCallback, this._reconnectionDisplay);\r\n    }\r\n  }\r\n\r\n  onConnectionUp(): void {\r\n    if (this._currentReconnectionProcess) {\r\n      this._currentReconnectionProcess.dispose();\r\n      this._currentReconnectionProcess = null;\r\n    }\r\n  }\r\n}\r\n\r\nclass ReconnectionProcess {\r\n  static readonly MaximumFirstRetryInterval = 3000;\r\n\r\n  readonly reconnectDisplay: ReconnectDisplay;\r\n\r\n  isDisposed = false;\r\n\r\n  constructor(options: ReconnectionOptions, private logger: Logger, private reconnectCallback: () => Promise<boolean>, display: ReconnectDisplay) {\r\n    this.reconnectDisplay = display;\r\n    this.reconnectDisplay.show();\r\n    this.attemptPeriodicReconnection(options);\r\n  }\r\n\r\n  public dispose() {\r\n    this.isDisposed = true;\r\n    this.reconnectDisplay.hide();\r\n  }\r\n\r\n  async attemptPeriodicReconnection(options: ReconnectionOptions) {\r\n    for (let i = 0; i < options.maxRetries; i++) {\r\n      this.reconnectDisplay.update(i + 1);\r\n\r\n      const delayDuration = i === 0 && options.retryIntervalMilliseconds > ReconnectionProcess.MaximumFirstRetryInterval\r\n        ? ReconnectionProcess.MaximumFirstRetryInterval\r\n        : options.retryIntervalMilliseconds;\r\n      await this.delay(delayDuration);\r\n\r\n      if (this.isDisposed) {\r\n        break;\r\n      }\r\n\r\n      try {\r\n        // reconnectCallback will asynchronously return:\r\n        // - true to mean success\r\n        // - false to mean we reached the server, but it rejected the connection (e.g., unknown circuit ID)\r\n        // - exception to mean we didn't reach the server (this can be sync or async)\r\n        const result = await this.reconnectCallback();\r\n        if (!result) {\r\n          // If the server responded and refused to reconnect, stop auto-retrying.\r\n          this.reconnectDisplay.rejected();\r\n          return;\r\n        }\r\n        return;\r\n      } catch (err: unknown) {\r\n        // We got an exception so will try again momentarily\r\n        this.logger.log(LogLevel.Error, err as Error);\r\n      }\r\n    }\r\n\r\n    this.reconnectDisplay.failed();\r\n  }\r\n\r\n  delay(durationMilliseconds: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, durationMilliseconds));\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { Blazor, IBlazor } from '../GlobalExports';\r\nimport { AfterBlazorServerStartedCallback, BeforeBlazorServerStartedCallback, CircuitStartOptions, ServerInitializers } from '../Platform/Circuits/CircuitStartOptions';\r\nimport { LogLevel, Logger } from '../Platform/Logging/Logger';\r\nimport { AfterBlazorWebAssemblyStartedCallback, BeforeBlazorWebAssemblyStartedCallback, WebAssemblyInitializers, WebAssemblyStartOptions } from '../Platform/WebAssemblyStartOptions';\r\nimport { WebStartOptions } from '../Platform/WebStartOptions';\r\nimport { WebRendererId } from '../Rendering/WebRendererId';\r\nimport { getRendererAttachedPromise } from '../Rendering/WebRendererInteropMethods';\r\n\r\ntype BeforeBlazorStartedCallback = (...args: unknown[]) => Promise<void>;\r\nexport type AfterBlazorStartedCallback = (blazor: typeof Blazor) => Promise<void>;\r\ntype BeforeBlazorWebStartedCallback = (options: WebStartOptions) => Promise<void>;\r\ntype AfterBlazorWebStartedCallback = (blazor: IBlazor) => Promise<void>;\r\nexport type BlazorInitializer = {\r\n  beforeStart: BeforeBlazorStartedCallback,\r\n  afterStarted: AfterBlazorStartedCallback,\r\n  beforeWebStart: BeforeBlazorWebStartedCallback,\r\n  afterWebStarted: AfterBlazorWebStartedCallback,\r\n  beforeWebAssemblyStart: BeforeBlazorWebAssemblyStartedCallback,\r\n  afterWebAssemblyStarted: AfterBlazorWebAssemblyStartedCallback,\r\n  beforeServerStart: BeforeBlazorServerStartedCallback,\r\n  afterServerStarted: AfterBlazorServerStartedCallback,\r\n};\r\n\r\nexport class JSInitializer {\r\n  private afterStartedCallbacks: AfterBlazorStartedCallback[] = [];\r\n\r\n  constructor(\r\n    private singleRuntime = true,\r\n    private logger?: Logger,\r\n    afterstartedCallbacks?: AfterBlazorStartedCallback[],\r\n    private webRendererId: number = 0\r\n  ) {\r\n    if (afterstartedCallbacks) {\r\n      this.afterStartedCallbacks.push(...afterstartedCallbacks);\r\n    }\r\n  }\r\n\r\n  async importInitializersAsync(initializerFiles: string[], initializerArguments: unknown[]): Promise<void> {\r\n    // This code is not called on WASM, because library intializers are imported by runtime.\r\n\r\n    await Promise.all(initializerFiles.map(f => importAndInvokeInitializer(this, f)));\r\n\r\n    function adjustPath(path: string): string {\r\n      // This is the same we do in JS interop with the import callback\r\n      const base = document.baseURI;\r\n      path = base.endsWith('/') ? `${base}${path}` : `${base}/${path}`;\r\n      return path;\r\n    }\r\n\r\n    async function importAndInvokeInitializer(jsInitializer: JSInitializer, path: string): Promise<void> {\r\n      const adjustedPath = adjustPath(path);\r\n      const initializer = await import(/* webpackIgnore: true */ adjustedPath) as Partial<BlazorInitializer>;\r\n      if (initializer === undefined) {\r\n        return;\r\n      }\r\n\r\n      if (!jsInitializer.singleRuntime) {\r\n        return runMultiRuntimeInitializers(jsInitializer, initializer, initializerArguments);\r\n      } else {\r\n        const { beforeStart, afterStarted, beforeWebAssemblyStart, afterWebAssemblyStarted, beforeServerStart, afterServerStarted } = initializer;\r\n        let finalBeforeStart = beforeStart;\r\n        if (jsInitializer.webRendererId === WebRendererId.Server && beforeServerStart) {\r\n          finalBeforeStart = beforeServerStart as unknown as BeforeBlazorStartedCallback;\r\n        }\r\n        if (jsInitializer.webRendererId === WebRendererId.WebAssembly && beforeWebAssemblyStart) {\r\n          finalBeforeStart = beforeWebAssemblyStart as unknown as BeforeBlazorStartedCallback;\r\n        }\r\n        let finalAfterStarted = afterStarted;\r\n        if (jsInitializer.webRendererId === WebRendererId.Server && afterServerStarted) {\r\n          finalAfterStarted = afterServerStarted;\r\n        }\r\n        if (jsInitializer.webRendererId === WebRendererId.WebAssembly && afterWebAssemblyStarted) {\r\n          finalAfterStarted = afterWebAssemblyStarted;\r\n        }\r\n\r\n        return runClassicInitializers(jsInitializer, finalBeforeStart, finalAfterStarted, initializerArguments);\r\n      }\r\n\r\n      function runMultiRuntimeInitializers(\r\n        jsInitializer: JSInitializer,\r\n        initializerModule: Partial<BlazorInitializer>, initializerArguments: unknown[]): void | PromiseLike<void> {\r\n        const options = initializerArguments[0] as WebStartOptions;\r\n        const { beforeStart, afterStarted, beforeWebStart, afterWebStarted, beforeWebAssemblyStart, afterWebAssemblyStarted, beforeServerStart, afterServerStarted } = initializerModule;\r\n        const runtimeSpecificExports = !!(beforeWebStart || afterWebStarted || beforeWebAssemblyStart || afterWebAssemblyStarted || beforeServerStart || afterServerStarted);\r\n        const hasOnlyClassicInitializers = !!(!runtimeSpecificExports && (beforeStart || afterStarted));\r\n        const runLegacyInitializers = hasOnlyClassicInitializers && options.enableClassicInitializers;\r\n        if (hasOnlyClassicInitializers && !options.enableClassicInitializers) {\r\n          // log warning \"classic initializers will be ignored when multiple runtimes are used\".\r\n          // Skipping \"adjustedPath\" initializer.\r\n          jsInitializer.logger?.log(\r\n            LogLevel.Warning,\r\n            `Initializer '${adjustedPath}' will be ignored because multiple runtimes are available. use 'before(web|webAssembly|server)Start' and 'after(web|webAssembly|server)Started?' instead.)`\r\n          );\r\n        } else if (runLegacyInitializers) {\r\n          return runClassicInitializers(jsInitializer, beforeStart, afterStarted, initializerArguments);\r\n        }\r\n\r\n        ensureInitializers(options);\r\n\r\n        if (beforeWebAssemblyStart) {\r\n          options.webAssembly.initializers.beforeStart.push(beforeWebAssemblyStart);\r\n        }\r\n\r\n        if (afterWebAssemblyStarted) {\r\n          options.webAssembly.initializers.afterStarted.push(afterWebAssemblyStarted);\r\n        }\r\n\r\n        if (beforeServerStart) {\r\n          options.circuit.initializers.beforeStart.push(beforeServerStart);\r\n        }\r\n\r\n        if (afterServerStarted) {\r\n          options.circuit.initializers.afterStarted.push(afterServerStarted);\r\n        }\r\n\r\n        if (afterWebStarted) {\r\n          jsInitializer.afterStartedCallbacks.push(afterWebStarted);\r\n        }\r\n\r\n        if (beforeWebStart) {\r\n          return beforeWebStart(options);\r\n        }\r\n      }\r\n\r\n      function runClassicInitializers(jsInitializer: JSInitializer, beforeStart: BeforeBlazorStartedCallback | undefined, afterStarted: AfterBlazorStartedCallback | undefined, initializerArguments: unknown[]): void | PromiseLike<void> {\r\n        if (afterStarted) {\r\n          jsInitializer.afterStartedCallbacks.push(afterStarted);\r\n        }\r\n\r\n        if (beforeStart) {\r\n          return beforeStart(...initializerArguments);\r\n        }\r\n      }\r\n\r\n      function ensureInitializers(options: Partial<WebStartOptions>):\r\n        asserts options is OptionsWithInitializers {\r\n        if (!options['webAssembly']) {\r\n          options['webAssembly'] = ({ initializers: { beforeStart: [], afterStarted: [] } }) as unknown as WebAssemblyStartOptions;\r\n        } else if (!options['webAssembly'].initializers) {\r\n          options['webAssembly'].initializers = { beforeStart: [], afterStarted: [] };\r\n        }\r\n\r\n        if (!options['circuit']) {\r\n          options['circuit'] = ({ initializers: { beforeStart: [], afterStarted: [] } }) as unknown as CircuitStartOptions;\r\n        } else if (!options['circuit'].initializers) {\r\n          options['circuit'].initializers = { beforeStart: [], afterStarted: [] };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  async invokeAfterStartedCallbacks(blazor: typeof Blazor): Promise<void> {\r\n    const attached = getRendererAttachedPromise(this.webRendererId);\r\n    if (attached) {\r\n      await attached;\r\n    }\r\n    await Promise.all(this.afterStartedCallbacks.map(callback => callback(blazor)));\r\n  }\r\n}\r\n\r\ntype OptionsWithInitializers = {\r\n  webAssembly: WebAssemblyStartOptions & { initializers: WebAssemblyInitializers },\r\n  circuit: CircuitStartOptions & { initializers: ServerInitializers }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { Blazor } from './GlobalExports';\r\nimport { ConsoleLogger } from './Platform/Logging/Loggers';\r\nimport { LogLevel } from './Platform/Logging/Logger';\r\nimport { CircuitManager } from './Platform/Circuits/CircuitManager';\r\nimport { resolveOptions, CircuitStartOptions } from './Platform/Circuits/CircuitStartOptions';\r\nimport { DefaultReconnectionHandler } from './Platform/Circuits/DefaultReconnectionHandler';\r\nimport { discoverServerPersistedState, ServerComponentDescriptor } from './Services/ComponentDescriptorDiscovery';\r\nimport { fetchAndInvokeInitializers } from './JSInitializers/JSInitializers.Server';\r\nimport { RootComponentManager } from './Services/RootComponentManager';\r\nimport { WebRendererId } from './Rendering/WebRendererId';\r\n\r\nlet initializersPromise: Promise<void> | undefined;\r\nlet appState: string;\r\nlet circuit: CircuitManager;\r\nlet options: CircuitStartOptions;\r\nlet logger: ConsoleLogger;\r\nlet serverStartPromise: Promise<void>;\r\nlet circuitStarting: Promise<boolean> | undefined;\r\n\r\nexport function setCircuitOptions(initializersReady: Promise<Partial<CircuitStartOptions>>) {\r\n  if (options) {\r\n    throw new Error('Circuit options have already been configured.');\r\n  }\r\n\r\n  if (options) {\r\n    throw new Error('WebAssembly options have already been configured.');\r\n  }\r\n\r\n  initializersPromise = setOptions(initializersReady);\r\n\r\n  async function setOptions(initializers: Promise<Partial<CircuitStartOptions>>): Promise<void> {\r\n    const configuredOptions = await initializers;\r\n    options = resolveOptions(configuredOptions);\r\n  }\r\n}\r\n\r\nexport function startServer(components: RootComponentManager<ServerComponentDescriptor>): Promise<void> {\r\n  if (serverStartPromise !== undefined) {\r\n    throw new Error('Blazor Server has already started.');\r\n  }\r\n\r\n  serverStartPromise = new Promise(startServerCore.bind(null, components));\r\n\r\n  return serverStartPromise;\r\n}\r\n\r\nasync function startServerCore(components: RootComponentManager<ServerComponentDescriptor>, resolve: () => void, _: any) {\r\n  await initializersPromise;\r\n  const jsInitializer = await fetchAndInvokeInitializers(options);\r\n\r\n  appState = discoverServerPersistedState(document) || '';\r\n  logger = new ConsoleLogger(options.logLevel);\r\n  circuit = new CircuitManager(components, appState, options, logger);\r\n\r\n  logger.log(LogLevel.Information, 'Starting up Blazor server-side application.');\r\n\r\n  Blazor.reconnect = async () => {\r\n    if (circuit.didRenderingFail()) {\r\n      // We can't reconnect after a failure, so exit early.\r\n      return false;\r\n    }\r\n\r\n    if (!(await circuit.reconnect())) {\r\n      logger.log(LogLevel.Information, 'Reconnection attempt to the circuit was rejected by the server. This may indicate that the associated state is no longer available on the server.');\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  Blazor.defaultReconnectionHandler = new DefaultReconnectionHandler(logger);\r\n  options.reconnectionHandler = options.reconnectionHandler || Blazor.defaultReconnectionHandler;\r\n\r\n  // Configure navigation via SignalR\r\n  Blazor._internal.navigationManager.listenForNavigationEvents(WebRendererId.Server, (uri: string, state: string | undefined, intercepted: boolean): Promise<void> => {\r\n    return circuit.sendLocationChanged(uri, state, intercepted);\r\n  }, (callId: number, uri: string, state: string | undefined, intercepted: boolean): Promise<void> => {\r\n    return circuit.sendLocationChanging(callId, uri, state, intercepted);\r\n  });\r\n\r\n  Blazor._internal.forceCloseConnection = () => circuit.disconnect();\r\n  Blazor._internal.sendJSDataStream = (data: ArrayBufferView | Blob, streamId: number, chunkSize: number) => circuit.sendJsDataStream(data, streamId, chunkSize);\r\n\r\n  const circuitStarted = await circuit.start();\r\n  if (!circuitStarted) {\r\n    logger.log(LogLevel.Error, 'Failed to start the circuit.');\r\n    resolve();\r\n    return;\r\n  }\r\n\r\n  const cleanup = () => {\r\n    circuit.sendDisconnectBeacon();\r\n  };\r\n\r\n  Blazor.disconnect = cleanup;\r\n\r\n  window.addEventListener('unload', cleanup, { capture: false, once: true });\r\n\r\n  logger.log(LogLevel.Information, 'Blazor server-side application started.');\r\n\r\n  jsInitializer.invokeAfterStartedCallbacks(Blazor);\r\n  resolve();\r\n}\r\n\r\nexport async function startCircuit(): Promise<boolean> {\r\n  if (!serverStartPromise) {\r\n    throw new Error('Cannot start the circuit until Blazor Server has started.');\r\n  }\r\n\r\n  if (circuit && !circuit.isDisposedOrDisposing()) {\r\n    return true;\r\n  }\r\n\r\n  // We might be starting a circuit already, if that's the case, we can just wait for that\r\n  // to finish.\r\n  if (circuitStarting) {\r\n    return await circuitStarting;\r\n  }\r\n\r\n  await serverStartPromise;\r\n\r\n  if (circuit && circuit.didRenderingFail()) {\r\n    // We can't start a new circuit after a rendering failure because the renderer\r\n    // might be in an invalid state.\r\n    return false;\r\n  }\r\n\r\n  if (circuit && circuit.isDisposedOrDisposing()) {\r\n    // If the current circuit is no longer available, create a new one.\r\n    appState = discoverServerPersistedState(document) || '';\r\n    circuit = new CircuitManager(circuit.getRootComponentManager(), appState, options, logger);\r\n  }\r\n\r\n  // Start the circuit. If the circuit has already started, this will return the existing\r\n  // circuit start promise.\r\n  circuitStarting = circuit.start();\r\n  // Once we are done, we need to clear the circuitStartingPromise to ensure that if the circuit gets\r\n  // disposed later on, we are able to start a new one.\r\n  clearCircuitStarting(circuitStarting);\r\n  return circuitStarting;\r\n}\r\n\r\nasync function clearCircuitStarting(circuitStartingPromise: Promise<boolean>) {\r\n  await circuitStartingPromise;\r\n  if (circuitStarting === circuitStartingPromise) {\r\n    circuitStarting = undefined;\r\n  }\r\n}\r\n\r\nexport function hasStartedServer(): boolean {\r\n  return serverStartPromise !== undefined;\r\n}\r\n\r\nexport async function disposeCircuit() {\r\n  await circuit?.dispose();\r\n}\r\n\r\nexport function isCircuitAvailable(): boolean {\r\n  return circuit && !circuit.isDisposedOrDisposing();\r\n}\r\n\r\nexport function updateServerRootComponents(operations: string): Promise<void> | undefined {\r\n  if (circuit && !circuit.isDisposedOrDisposing()) {\r\n    return circuit.updateRootComponents(operations);\r\n  } else {\r\n    scheduleWhenReady(operations);\r\n  }\r\n}\r\nasync function scheduleWhenReady(operations: string) {\r\n  await serverStartPromise;\r\n  if (await startCircuit()) {\r\n    return circuit.updateRootComponents(operations);\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Expose an export called 'platform' of the interface type 'Platform',\r\n// so that consumers can be agnostic about which implementation they use.\r\n// Basic alternative to having an actual DI container.\r\nimport { Platform } from './Platform/Platform';\r\n\r\nexport let platform: Platform;\r\n\r\nexport function setPlatform(platformInstance: Platform): Platform {\r\n  platform = platformInstance;\r\n  return platform;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { CircuitStartOptions } from '../Platform/Circuits/CircuitStartOptions';\r\nimport { WebRendererId } from '../Rendering/WebRendererId';\r\nimport { JSInitializer } from './JSInitializers';\r\n\r\nexport async function fetchAndInvokeInitializers(options: Partial<CircuitStartOptions>) : Promise<JSInitializer> {\r\n  if (options.initializers) {\r\n    // Initializers were already resolved, so we don't have to fetch them, we just invoke the beforeStart ones\r\n    // and return the list of afterStarted ones so they get processed in the same way as in traditional Blazor Server.\r\n    await Promise.all(options.initializers.beforeStart.map(i => i(options)));\r\n    return new JSInitializer(/* singleRuntime: */ false, undefined, options.initializers.afterStarted, WebRendererId.Server);\r\n  }\r\n\r\n  const jsInitializersResponse = await fetch('_blazor/initializers', {\r\n    method: 'GET',\r\n    credentials: 'include',\r\n    cache: 'no-cache',\r\n  });\r\n\r\n  const initializers: string[] = await jsInitializersResponse.json();\r\n  const jsInitializer = new JSInitializer(/* singleRuntime: */ true, undefined, undefined, WebRendererId.Server);\r\n  await jsInitializer.importInitializersAsync(initializers, [options]);\r\n  return jsInitializer;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { MonoConfig } from 'dotnet';\r\n\r\nconst navigatorUA = navigator as MonoNavigatorUserAgent;\r\nconst brands = navigatorUA.userAgentData && navigatorUA.userAgentData.brands;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst currentBrowserIsChromeOrEdge = brands && brands.length > 0\r\n  ? brands.some(b => b.brand === 'Google Chrome' || b.brand === 'Microsoft Edge' || b.brand === 'Chromium')\r\n  : (window as any).chrome;\r\nconst platform = navigatorUA.userAgentData?.platform ?? navigator.platform;\r\n\r\nfunction hasDebuggingEnabled(config: MonoConfig): boolean {\r\n  return config.debugLevel !== 0 && (currentBrowserIsChromeOrEdge || navigator.userAgent.includes('Firefox'));\r\n}\r\n\r\nexport function attachDebuggerHotkey(config: MonoConfig): void {\r\n  // Use the combination shift+alt+D because it isn't used by the major browsers\r\n  // for anything else by default\r\n  const altKeyName = platform.match(/^Mac/i) ? 'Cmd' : 'Alt';\r\n  if (hasDebuggingEnabled(config)) {\r\n    console.info(`Debugging hotkey: Shift+${altKeyName}+D (when application has focus)`);\r\n  }\r\n\r\n  // Even if debugging isn't enabled, we register the hotkey so we can report why it's not enabled\r\n  document.addEventListener('keydown', evt => {\r\n    if (evt.shiftKey && (evt.metaKey || evt.altKey) && evt.code === 'KeyD') {\r\n      if (!hasDebuggingEnabled(config)) {\r\n        console.error('Cannot start debugging, because the application was not compiled with debugging enabled.');\r\n      } else if (navigator.userAgent.includes('Firefox')) {\r\n        launchFirefoxDebugger();\r\n      } else if (!currentBrowserIsChromeOrEdge) {\r\n        console.error('Currently, only Microsoft Edge (80+), Google Chrome, or Chromium, are supported for debugging.');\r\n      } else {\r\n        launchDebugger();\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nasync function launchFirefoxDebugger() {\r\n  const response = await fetch(`_framework/debug?url=${encodeURIComponent(location.href)}&isFirefox=true`);\r\n  if (response.status !== 200) {\r\n    console.warn(await response.text());\r\n  }\r\n}\r\n\r\nfunction launchDebugger() {\r\n  // The noopener flag is essential, because otherwise Chrome tracks the association with the\r\n  // parent tab, and then when the parent tab pauses in the debugger, the child tab does so\r\n  // too (even if it's since navigated to a different page). This means that the debugger\r\n  // itself freezes, and not just the page being debugged.\r\n  //\r\n  // We have to construct a link element and simulate a click on it, because the more obvious\r\n  // window.open(..., 'noopener') always opens a new window instead of a new tab.\r\n  const link = document.createElement('a');\r\n  link.href = `_framework/debug?url=${encodeURIComponent(location.href)}`;\r\n  link.target = '_blank';\r\n  link.rel = 'noopener noreferrer';\r\n  link.click();\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\n/* eslint-disable no-prototype-builtins */\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\nimport { attachDebuggerHotkey } from './MonoDebugger';\r\nimport { showErrorNotification } from '../../BootErrors';\r\nimport { Platform, System_Array, Pointer, System_Object, System_String, HeapLock, PlatformApi } from '../Platform';\r\nimport { WebAssemblyBootResourceType, WebAssemblyStartOptions } from '../WebAssemblyStartOptions';\r\nimport { Blazor } from '../../GlobalExports';\r\nimport { DotnetModuleConfig, EmscriptenModule, MonoConfig, ModuleAPI, RuntimeAPI, GlobalizationMode } from 'dotnet';\r\nimport { BINDINGType, MONOType } from 'dotnet/dotnet-legacy';\r\nimport { fetchAndInvokeInitializers } from '../../JSInitializers/JSInitializers.WebAssembly';\r\nimport { JSInitializer } from '../../JSInitializers/JSInitializers';\r\nimport { WebRendererId } from '../../Rendering/WebRendererId';\r\n\r\n// initially undefined and only fully initialized after createEmscriptenModuleInstance()\r\nexport let BINDING: BINDINGType = undefined as any;\r\nexport let MONO: MONOType = undefined as any;\r\nexport let Module: DotnetModuleConfig & EmscriptenModule = undefined as any;\r\nexport let dispatcher: DotNet.ICallDispatcher = undefined as any;\r\nlet MONO_INTERNAL: any = undefined as any;\r\nlet runtime: RuntimeAPI = undefined as any;\r\nlet jsInitializer: JSInitializer;\r\n\r\nconst uint64HighOrderShift = Math.pow(2, 32);\r\nconst maxSafeNumberHighPart = Math.pow(2, 21) - 1; // The high-order int32 from Number.MAX_SAFE_INTEGER\r\n\r\nlet currentHeapLock: MonoHeapLock | null = null;\r\n\r\n// Memory access helpers\r\n// The implementations are exactly equivalent to what the global getValue(addr, type) function does,\r\n// except without having to parse the 'type' parameter, and with less risk of mistakes at the call site\r\nfunction getValueI16(ptr: number) {\r\n  return MONO.getI16(ptr);\r\n}\r\nfunction getValueI32(ptr: number) {\r\n  return MONO.getI32(ptr);\r\n}\r\nfunction getValueFloat(ptr: number) {\r\n  return MONO.getF32(ptr);\r\n}\r\n\r\nexport function getInitializer() {\r\n  return jsInitializer;\r\n}\r\n\r\nfunction getValueU64(ptr: number) {\r\n  // There is no Module.HEAPU64, and Module.getValue(..., 'i64') doesn't work because the implementation\r\n  // treats 'i64' as being the same as 'i32'. Also we must take care to read both halves as unsigned.\r\n  const heapU32Index = ptr >> 2;\r\n  const highPart = Module.HEAPU32[heapU32Index + 1];\r\n  if (highPart > maxSafeNumberHighPart) {\r\n    throw new Error(`Cannot read uint64 with high order part ${highPart}, because the result would exceed Number.MAX_SAFE_INTEGER.`);\r\n  }\r\n\r\n  return (highPart * uint64HighOrderShift) + Module.HEAPU32[heapU32Index];\r\n}\r\n\r\nexport const monoPlatform: Platform = {\r\n  load: function load(options: Partial<WebAssemblyStartOptions>, onConfigLoaded?: (loadedConfig: MonoConfig) => void) {\r\n    return createRuntimeInstance(options, onConfigLoaded);\r\n  },\r\n\r\n  start: function start() {\r\n    return configureRuntimeInstance();\r\n  },\r\n\r\n  callEntryPoint: async function callEntryPoint(): Promise<any> {\r\n    try {\r\n      await runtime.runMain(runtime.getConfig().mainAssemblyName!, []);\r\n    } catch (error) {\r\n      console.error(error);\r\n      showErrorNotification();\r\n    }\r\n  },\r\n\r\n  toUint8Array: function toUint8Array(array: System_Array<any>): Uint8Array {\r\n    const dataPtr = getArrayDataPointer(array);\r\n    const length = getValueI32(dataPtr);\r\n    const uint8Array = new Uint8Array(length);\r\n    uint8Array.set(Module.HEAPU8.subarray(dataPtr + 4, dataPtr + 4 + length));\r\n    return uint8Array;\r\n  },\r\n\r\n  getArrayLength: function getArrayLength(array: System_Array<any>): number {\r\n    return getValueI32(getArrayDataPointer(array));\r\n  },\r\n\r\n  getArrayEntryPtr: function getArrayEntryPtr<TPtr extends Pointer>(array: System_Array<TPtr>, index: number, itemSize: number): TPtr {\r\n    // First byte is array length, followed by entries\r\n    const address = getArrayDataPointer(array) + 4 + index * itemSize;\r\n    return address as any as TPtr;\r\n  },\r\n\r\n  getObjectFieldsBaseAddress: function getObjectFieldsBaseAddress(referenceTypedObject: System_Object): Pointer {\r\n    // The first two int32 values are internal Mono data\r\n    return (referenceTypedObject as any as number + 8) as any as Pointer;\r\n  },\r\n\r\n  readInt16Field: function readHeapInt16(baseAddress: Pointer, fieldOffset?: number): number {\r\n    return getValueI16((baseAddress as any as number) + (fieldOffset || 0));\r\n  },\r\n\r\n  readInt32Field: function readHeapInt32(baseAddress: Pointer, fieldOffset?: number): number {\r\n    return getValueI32((baseAddress as unknown as number) + (fieldOffset || 0));\r\n  },\r\n\r\n  readUint64Field: function readHeapUint64(baseAddress: Pointer, fieldOffset?: number): number {\r\n    return getValueU64((baseAddress as unknown as number) + (fieldOffset || 0));\r\n  },\r\n\r\n  readFloatField: function readHeapFloat(baseAddress: Pointer, fieldOffset?: number): number {\r\n    return getValueFloat((baseAddress as unknown as number) + (fieldOffset || 0));\r\n  },\r\n\r\n  readObjectField: function readHeapObject<T extends System_Object>(baseAddress: Pointer, fieldOffset?: number): T {\r\n    return getValueI32((baseAddress as unknown as number) + (fieldOffset || 0)) as any as T;\r\n  },\r\n\r\n  readStringField: function readHeapObject(baseAddress: Pointer, fieldOffset?: number, readBoolValueAsString?: boolean): string | null {\r\n    const fieldValue = getValueI32((baseAddress as unknown as number) + (fieldOffset || 0));\r\n    if (fieldValue === 0) {\r\n      return null;\r\n    }\r\n\r\n    if (readBoolValueAsString) {\r\n      // Some fields are stored as a union of bool | string | null values, but need to read as a string.\r\n      // If the stored value is a bool, the behavior we want is empty string ('') for true, or null for false.\r\n      const unboxedValue = BINDING.unbox_mono_obj(fieldValue as any as System_Object);\r\n      if (typeof (unboxedValue) === 'boolean') {\r\n        return unboxedValue ? '' : null;\r\n      }\r\n      return unboxedValue;\r\n    }\r\n\r\n    return BINDING.conv_string(fieldValue as any as System_String);\r\n  },\r\n\r\n  readStructField: function readStructField<T extends Pointer>(baseAddress: Pointer, fieldOffset?: number): T {\r\n    return ((baseAddress as any as number) + (fieldOffset || 0)) as any as T;\r\n  },\r\n\r\n  beginHeapLock: function beginHeapLock() {\r\n    assertHeapIsNotLocked();\r\n    currentHeapLock = MonoHeapLock.create();\r\n    return currentHeapLock;\r\n  },\r\n\r\n  invokeWhenHeapUnlocked: function invokeWhenHeapUnlocked(callback) {\r\n    // This is somewhat like a sync context. If we're not locked, just pass through the call directly.\r\n    if (!currentHeapLock) {\r\n      callback();\r\n    } else {\r\n      currentHeapLock.enqueuePostReleaseAction(callback);\r\n    }\r\n  },\r\n};\r\n\r\nasync function importDotnetJs(startOptions: Partial<WebAssemblyStartOptions>): Promise<ModuleAPI> {\r\n  const browserSupportsNativeWebAssembly = typeof WebAssembly !== 'undefined' && WebAssembly.validate;\r\n  if (!browserSupportsNativeWebAssembly) {\r\n    throw new Error('This browser does not support WebAssembly.');\r\n  }\r\n\r\n  let src = '_framework/dotnet.js';\r\n\r\n  // Allow overriding the URI from which the dotnet.*.js file is loaded\r\n  if (startOptions.loadBootResource) {\r\n    const resourceType: WebAssemblyBootResourceType = 'dotnetjs';\r\n    const customSrc = startOptions.loadBootResource(resourceType, 'dotnet.js', src, '', 'js-module-dotnet');\r\n    if (typeof (customSrc) === 'string') {\r\n      src = customSrc;\r\n    } else if (customSrc) {\r\n      // Since we must load this via a import, it's only valid to supply a URI (and not a Request, say)\r\n      throw new Error(`For a ${resourceType} resource, custom loaders must supply a URI string.`);\r\n    }\r\n  }\r\n\r\n  const absoluteSrc = (new URL(src, document.baseURI)).toString();\r\n  return await import(/* webpackIgnore: true */ absoluteSrc);\r\n}\r\n\r\nfunction prepareRuntimeConfig(options: Partial<WebAssemblyStartOptions>, onConfigLoadedCallback?: (loadedConfig: MonoConfig) => void): DotnetModuleConfig {\r\n  const config: MonoConfig = {\r\n    maxParallelDownloads: 1000000, // disable throttling parallel downloads\r\n    enableDownloadRetry: false, // disable retry downloads\r\n    applicationEnvironment: options.environment,\r\n  };\r\n\r\n  const onConfigLoaded = async (loadedConfig: MonoConfig) => {\r\n    if (!loadedConfig.environmentVariables) {\r\n      loadedConfig.environmentVariables = {};\r\n    }\r\n\r\n    if (loadedConfig.globalizationMode === GlobalizationMode.Sharded) {\r\n      loadedConfig.environmentVariables['__BLAZOR_SHARDED_ICU'] = '1';\r\n    }\r\n\r\n    Blazor._internal.getApplicationEnvironment = () => loadedConfig.applicationEnvironment!;\r\n\r\n    onConfigLoadedCallback?.(loadedConfig);\r\n\r\n    jsInitializer = await fetchAndInvokeInitializers(options, loadedConfig);\r\n  };\r\n\r\n  const moduleConfig = (window['Module'] || {}) as typeof Module;\r\n  const dotnetModuleConfig: DotnetModuleConfig = {\r\n    ...moduleConfig,\r\n    onConfigLoaded: (onConfigLoaded as (config: MonoConfig) => void | Promise<void>),\r\n    onDownloadResourceProgress: setProgress,\r\n    config,\r\n    disableDotnet6Compatibility: false,\r\n    out: print,\r\n    err: printErr,\r\n  };\r\n\r\n  return dotnetModuleConfig;\r\n}\r\n\r\nasync function createRuntimeInstance(options: Partial<WebAssemblyStartOptions>, onConfigLoaded?: (loadedConfig: MonoConfig) => void): Promise<void> {\r\n  const { dotnet } = await importDotnetJs(options);\r\n  const moduleConfig = prepareRuntimeConfig(options, onConfigLoaded);\r\n\r\n  if (options.applicationCulture) {\r\n    dotnet.withApplicationCulture(options.applicationCulture);\r\n  }\r\n\r\n  if (options.environment) {\r\n    dotnet.withApplicationEnvironment(options.environment);\r\n  }\r\n\r\n  if (options.loadBootResource) {\r\n    dotnet.withResourceLoader(options.loadBootResource);\r\n  }\r\n\r\n  const anyDotnet = (dotnet as any);\r\n  anyDotnet.withModuleConfig(moduleConfig);\r\n\r\n  if (options.configureRuntime) {\r\n    options.configureRuntime(dotnet);\r\n  }\r\n\r\n  runtime = await dotnet.create();\r\n}\r\n\r\nasync function configureRuntimeInstance(): Promise<PlatformApi> {\r\n  if (!runtime) {\r\n    throw new Error('The runtime must be loaded it gets configured.');\r\n  }\r\n\r\n  const { MONO: mono, BINDING: binding, Module: module, setModuleImports, INTERNAL: mono_internal, getConfig, invokeLibraryInitializers } = runtime;\r\n  Module = module;\r\n  BINDING = binding;\r\n  MONO = mono;\r\n  MONO_INTERNAL = mono_internal;\r\n\r\n  attachDebuggerHotkey(getConfig());\r\n\r\n  Blazor.runtime = runtime;\r\n  Blazor._internal.dotNetCriticalError = printErr;\r\n  setModuleImports('blazor-internal', {\r\n    Blazor: { _internal: Blazor._internal },\r\n  });\r\n  const exports = await runtime.getAssemblyExports('Microsoft.AspNetCore.Components.WebAssembly');\r\n  Object.assign(Blazor._internal, {\r\n    dotNetExports: {\r\n      ...exports.Microsoft.AspNetCore.Components.WebAssembly.Services.DefaultWebAssemblyJSRuntime,\r\n    },\r\n  });\r\n  attachInteropInvoker();\r\n\r\n  return {\r\n    invokeLibraryInitializers,\r\n  };\r\n}\r\n\r\nfunction setProgress(resourcesLoaded, totalResources) {\r\n  const percentage = resourcesLoaded / totalResources * 100;\r\n  document.documentElement.style.setProperty('--blazor-load-percentage', `${percentage}%`);\r\n  document.documentElement.style.setProperty('--blazor-load-percentage-text', `\"${Math.floor(percentage)}%\"`);\r\n}\r\n\r\nconst suppressMessages = ['DEBUGGING ENABLED'];\r\nconst print = line => (suppressMessages.indexOf(line) < 0 && console.log(line));\r\nconst printErr = line => {\r\n  // If anything writes to stderr, treat it as a critical exception. The underlying runtime writes\r\n  // to stderr if a truly critical problem occurs outside .NET code. Note that .NET unhandled\r\n  // exceptions also reach this, but via a different code path - see dotNetCriticalError below.\r\n  console.error(line || '(null)');\r\n  showErrorNotification();\r\n};\r\n\r\nfunction getArrayDataPointer<T>(array: System_Array<T>): number {\r\n  return <number><any>array + 12; // First byte from here is length, then following bytes are entries\r\n}\r\n\r\nfunction attachInteropInvoker(): void {\r\n  dispatcher = DotNet.attachDispatcher({\r\n    beginInvokeDotNetFromJS: (callId: number, assemblyName: string | null, methodIdentifier: string, dotNetObjectId: any | null, argsJson: string): void => {\r\n      assertHeapIsNotLocked();\r\n      if (!dotNetObjectId && !assemblyName) {\r\n        throw new Error('Either assemblyName or dotNetObjectId must have a non null value.');\r\n      }\r\n      // As a current limitation, we can only pass 4 args. Fortunately we only need one of\r\n      // 'assemblyName' or 'dotNetObjectId', so overload them in a single slot\r\n      const assemblyNameOrDotNetObjectId: string = dotNetObjectId\r\n        ? dotNetObjectId.toString()\r\n        : assemblyName;\r\n\r\n      Blazor._internal.dotNetExports!.BeginInvokeDotNet!(\r\n        callId ? callId.toString() : null,\r\n        assemblyNameOrDotNetObjectId,\r\n        methodIdentifier,\r\n        argsJson,\r\n      );\r\n    },\r\n    endInvokeJSFromDotNet: (asyncHandle, succeeded, serializedArgs): void => {\r\n      Blazor._internal.dotNetExports!.EndInvokeJS(serializedArgs);\r\n    },\r\n    sendByteArray: (id: number, data: Uint8Array): void => {\r\n      Blazor._internal.dotNetExports!.ReceiveByteArrayFromJS(id, data);\r\n    },\r\n    invokeDotNetFromJS: (assemblyName, methodIdentifier, dotNetObjectId, argsJson) => {\r\n      assertHeapIsNotLocked();\r\n      return Blazor._internal.dotNetExports!.InvokeDotNet(\r\n        assemblyName ? assemblyName : null,\r\n        methodIdentifier,\r\n        dotNetObjectId ?? 0,\r\n        argsJson,\r\n      ) as string;\r\n    },\r\n  });\r\n}\r\n\r\nfunction assertHeapIsNotLocked() {\r\n  if (currentHeapLock) {\r\n    throw new Error('Assertion failed - heap is currently locked');\r\n  }\r\n}\r\n\r\nclass MonoHeapLock implements HeapLock {\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  private postReleaseActions?: Function[];\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  enqueuePostReleaseAction(callback: Function): void {\r\n    if (!this.postReleaseActions) {\r\n      this.postReleaseActions = [];\r\n    }\r\n\r\n    this.postReleaseActions.push(callback);\r\n  }\r\n\r\n  release() {\r\n    if (currentHeapLock !== this) {\r\n      throw new Error('Trying to release a lock which isn\\'t current');\r\n    }\r\n\r\n    MONO_INTERNAL.mono_wasm_gc_unlock();\r\n\r\n    currentHeapLock = null;\r\n\r\n    while (this.postReleaseActions?.length) {\r\n      const nextQueuedAction = this.postReleaseActions.shift()!;\r\n\r\n      // It's possible that the action we invoke here might itself take a succession of heap locks,\r\n      // but since heap locks must be released synchronously, by the time we get back to this stack\r\n      // frame, we know the heap should no longer be locked.\r\n      nextQueuedAction();\r\n      assertHeapIsNotLocked();\r\n    }\r\n  }\r\n\r\n  static create(): MonoHeapLock {\r\n    MONO_INTERNAL.mono_wasm_gc_lock();\r\n    return new MonoHeapLock();\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { MonoConfig } from 'dotnet';\r\nimport { WebAssemblyStartOptions } from '../Platform/WebAssemblyStartOptions';\r\nimport { WebRendererId } from '../Rendering/WebRendererId';\r\nimport { JSInitializer } from './JSInitializers';\r\n\r\nexport async function fetchAndInvokeInitializers(options: Partial<WebAssemblyStartOptions>, loadedConfig: MonoConfig): Promise<JSInitializer> {\r\n  if (options.initializers) {\r\n    // Initializers were already resolved, so we don't have to fetch them, we just invoke the beforeStart ones\r\n    // and return the list of afterStarted ones so they get processed in the same way as in traditional Blazor Server.\r\n    await Promise.all(options.initializers.beforeStart.map(i => i(options)));\r\n    return new JSInitializer(/* singleRuntime: */ false, undefined, options.initializers.afterStarted, WebRendererId.WebAssembly);\r\n  } else {\r\n    const initializerArguments = [options, loadedConfig.resources?.extensions ?? {}];\r\n    const jsInitializer = new JSInitializer(\r\n      /* singleRuntime: */ true,\r\n      undefined,\r\n      undefined,\r\n      WebRendererId.WebAssembly\r\n    );\r\n    const initializers = Object.keys((loadedConfig?.resources?.['libraryInitializers']) || {});\r\n    await jsInitializer.importInitializersAsync(initializers, initializerArguments);\r\n    return jsInitializer;\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { platform } from '../../Environment';\r\nimport { RenderBatch, ArrayRange, ArrayBuilderSegment, RenderTreeDiff, RenderTreeEdit, RenderTreeFrame, ArrayValues, EditType, FrameType } from './RenderBatch';\r\nimport { Pointer, System_Array, System_Object } from '../../Platform/Platform';\r\n\r\n// Used when running on Mono WebAssembly for shared-memory interop. The code here encapsulates\r\n// our knowledge of the memory layout of RenderBatch and all referenced types.\r\n//\r\n// In this implementation, all the DTO types are really heap pointers at runtime, hence all\r\n// the casts to 'any' whenever we pass them to platform.read.\r\n\r\nexport class SharedMemoryRenderBatch implements RenderBatch {\r\n  constructor(private batchAddress: Pointer) {\r\n  }\r\n\r\n  // Keep in sync with memory layout in RenderBatch.cs\r\n  updatedComponents(): ArrayRange<RenderTreeDiff> {\r\n    return platform.readStructField<Pointer>(this.batchAddress, 0) as any as ArrayRange<RenderTreeDiff>;\r\n  }\r\n\r\n  referenceFrames(): ArrayRange<RenderTreeDiff> {\r\n    return platform.readStructField<Pointer>(this.batchAddress, arrayRangeReader.structLength) as any as ArrayRange<RenderTreeDiff>;\r\n  }\r\n\r\n  disposedComponentIds(): ArrayRange<number> {\r\n    return platform.readStructField<Pointer>(this.batchAddress, arrayRangeReader.structLength * 2) as any as ArrayRange<number>;\r\n  }\r\n\r\n  disposedEventHandlerIds(): ArrayRange<number> {\r\n    return platform.readStructField<Pointer>(this.batchAddress, arrayRangeReader.structLength * 3) as any as ArrayRange<number>;\r\n  }\r\n\r\n  updatedComponentsEntry(values: ArrayValues<RenderTreeDiff>, index: number): RenderTreeDiff {\r\n    return arrayValuesEntry(values, index, diffReader.structLength);\r\n  }\r\n\r\n  referenceFramesEntry(values: ArrayValues<RenderTreeFrame>, index: number): RenderTreeFrame {\r\n    return arrayValuesEntry(values, index, frameReader.structLength);\r\n  }\r\n\r\n  disposedComponentIdsEntry(values: ArrayValues<number>, index: number): number {\r\n    const pointer = arrayValuesEntry(values, index, /* int length */ 4);\r\n    return platform.readInt32Field(pointer as any as Pointer);\r\n  }\r\n\r\n  disposedEventHandlerIdsEntry(values: ArrayValues<number>, index: number): number {\r\n    const pointer = arrayValuesEntry(values, index, /* long length */ 8);\r\n    return platform.readUint64Field(pointer as any as Pointer);\r\n  }\r\n\r\n  arrayRangeReader = arrayRangeReader;\r\n\r\n  arrayBuilderSegmentReader = arrayBuilderSegmentReader;\r\n\r\n  diffReader = diffReader;\r\n\r\n  editReader = editReader;\r\n\r\n  frameReader = frameReader;\r\n}\r\n\r\n// Keep in sync with memory layout in ArrayRange.cs\r\nconst arrayRangeReader = {\r\n  structLength: 8,\r\n  values: <T>(arrayRange: ArrayRange<T>): ArrayValues<T> => platform.readObjectField<System_Array<T>>(arrayRange as any, 0) as any as ArrayValues<T>,\r\n  count: <T>(arrayRange: ArrayRange<T>): number => platform.readInt32Field(arrayRange as any, 4),\r\n};\r\n\r\n// Keep in sync with memory layout in ArrayBuilderSegment\r\nconst arrayBuilderSegmentReader = {\r\n  structLength: 12,\r\n  values: <T>(arrayBuilderSegment: ArrayBuilderSegment<T>): ArrayValues<T> => {\r\n    // Evaluate arrayBuilderSegment->_builder->_items, i.e., two dereferences needed\r\n    const builder = platform.readObjectField<System_Object>(arrayBuilderSegment as any, 0);\r\n    const builderFieldsAddress = platform.getObjectFieldsBaseAddress(builder);\r\n    return platform.readObjectField<System_Array<T>>(builderFieldsAddress, 0) as any as ArrayValues<T>;\r\n  },\r\n  offset: <T>(arrayBuilderSegment: ArrayBuilderSegment<T>): number => platform.readInt32Field(arrayBuilderSegment as any, 4),\r\n  count: <T>(arrayBuilderSegment: ArrayBuilderSegment<T>): number => platform.readInt32Field(arrayBuilderSegment as any, 8),\r\n};\r\n\r\n// Keep in sync with memory layout in RenderTreeDiff.cs\r\nconst diffReader = {\r\n  structLength: 4 + arrayBuilderSegmentReader.structLength,\r\n  componentId: (diff: RenderTreeDiff): number => platform.readInt32Field(diff as any, 0),\r\n  edits: (diff: RenderTreeDiff): ArrayBuilderSegment<RenderTreeEdit> => platform.readStructField<Pointer>(diff as any, 4) as any as ArrayBuilderSegment<RenderTreeEdit>,\r\n  editsEntry: (values: ArrayValues<RenderTreeEdit>, index: number): RenderTreeEdit => arrayValuesEntry(values, index, editReader.structLength),\r\n};\r\n\r\n// Keep in sync with memory layout in RenderTreeEdit.cs\r\nconst editReader = {\r\n  structLength: 20,\r\n  editType: (edit: RenderTreeEdit): EditType => platform.readInt32Field(edit as any, 0) as EditType,\r\n  siblingIndex: (edit: RenderTreeEdit): number => platform.readInt32Field(edit as any, 4),\r\n  newTreeIndex: (edit: RenderTreeEdit): number => platform.readInt32Field(edit as any, 8),\r\n  moveToSiblingIndex: (edit: RenderTreeEdit): number => platform.readInt32Field(edit as any, 8),\r\n  removedAttributeName: (edit: RenderTreeEdit): string | null => platform.readStringField(edit as any, 16),\r\n};\r\n\r\n// Keep in sync with memory layout in RenderTreeFrame.cs\r\nconst frameReader = {\r\n  structLength: 36,\r\n  frameType: (frame: RenderTreeFrame): FrameType => platform.readInt16Field(frame as any, 4) as FrameType,\r\n  subtreeLength: (frame: RenderTreeFrame): number => platform.readInt32Field(frame as any, 8),\r\n  elementReferenceCaptureId: (frame: RenderTreeFrame): string | null => platform.readStringField(frame as any, 16),\r\n  componentId: (frame: RenderTreeFrame): number => platform.readInt32Field(frame as any, 12),\r\n  elementName: (frame: RenderTreeFrame): string | null => platform.readStringField(frame as any, 16),\r\n  textContent: (frame: RenderTreeFrame): string | null => platform.readStringField(frame as any, 16),\r\n  markupContent: (frame: RenderTreeFrame): string => platform.readStringField(frame as any, 16)!,\r\n  attributeName: (frame: RenderTreeFrame): string | null => platform.readStringField(frame as any, 16),\r\n  attributeValue: (frame: RenderTreeFrame): string | null => platform.readStringField(frame as any, 24, true),\r\n  attributeEventHandlerId: (frame: RenderTreeFrame): number => platform.readUint64Field(frame as any, 8),\r\n};\r\n\r\nfunction arrayValuesEntry<T>(arrayValues: ArrayValues<T>, index: number, itemSize: number): T {\r\n  return platform.getArrayEntryPtr(arrayValues as any as System_Array<T>, index, itemSize) as any as T;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { LogicalElement, toLogicalRootCommentElement } from '../Rendering/LogicalElements';\r\nimport { WebAssemblyComponentDescriptor } from '../Services/ComponentDescriptorDiscovery';\r\nimport { RootComponentManager } from '../Services/RootComponentManager';\r\n\r\nexport class WebAssemblyComponentAttacher {\r\n  private componentManager: RootComponentManager<WebAssemblyComponentDescriptor>;\r\n\r\n  public constructor(componentManager: RootComponentManager<WebAssemblyComponentDescriptor>) {\r\n    this.componentManager = componentManager;\r\n  }\r\n\r\n  public resolveRegisteredElement(id: string): LogicalElement | undefined {\r\n    const parsedId = Number.parseInt(id);\r\n    if (!Number.isNaN(parsedId)) {\r\n      const component = this.componentManager.resolveRootComponent(parsedId);\r\n      return toLogicalRootCommentElement(component);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  public getParameterValues(id: number): string | undefined {\r\n    return this.componentManager.initialComponents[id].parameterValues;\r\n  }\r\n\r\n  public getParameterDefinitions(id: number): string | undefined {\r\n    return this.componentManager.initialComponents[id].parameterDefinitions;\r\n  }\r\n\r\n  public getTypeName(id: number): string {\r\n    return this.componentManager.initialComponents[id].typeName;\r\n  }\r\n\r\n  public getAssembly(id: number): string {\r\n    return this.componentManager.initialComponents[id].assembly;\r\n  }\r\n\r\n  public getCount(): number {\r\n    return this.componentManager.initialComponents.length;\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n/* eslint-disable array-element-newline */\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\nimport { Blazor } from './GlobalExports';\r\nimport * as Environment from './Environment';\r\nimport { BINDING, monoPlatform, dispatcher, getInitializer } from './Platform/Mono/MonoPlatform';\r\nimport { renderBatch, getRendererer, attachRootComponentToElement, attachRootComponentToLogicalElement } from './Rendering/Renderer';\r\nimport { SharedMemoryRenderBatch } from './Rendering/RenderBatch/SharedMemoryRenderBatch';\r\nimport { PlatformApi, Pointer } from './Platform/Platform';\r\nimport { WebAssemblyStartOptions } from './Platform/WebAssemblyStartOptions';\r\nimport { addDispatchEventMiddleware } from './Rendering/WebRendererInteropMethods';\r\nimport { WebAssemblyComponentDescriptor, discoverWebAssemblyPersistedState } from './Services/ComponentDescriptorDiscovery';\r\nimport { receiveDotNetDataStream } from './StreamingInterop';\r\nimport { WebAssemblyComponentAttacher } from './Platform/WebAssemblyComponentAttacher';\r\nimport { MonoConfig } from 'dotnet';\r\nimport { RootComponentManager } from './Services/RootComponentManager';\r\nimport { WebRendererId } from './Rendering/WebRendererId';\r\n\r\nlet options: Partial<WebAssemblyStartOptions> | undefined;\r\nlet initializersPromise: Promise<void>;\r\nlet platformLoadPromise: Promise<void> | undefined;\r\nlet loadedWebAssemblyPlatform = false;\r\nlet started = false;\r\nlet firstUpdate = true;\r\nlet waitForRootComponents = false;\r\nlet startPromise: Promise<void> | undefined;\r\n\r\nlet resolveBootConfigPromise: (value: MonoConfig) => void;\r\nconst bootConfigPromise = new Promise<MonoConfig>(resolve => {\r\n  resolveBootConfigPromise = resolve;\r\n});\r\n\r\nlet resolveInitialUpdatePromise: (value: string) => void;\r\nconst initialUpdatePromise = new Promise<string>(resolve => {\r\n  resolveInitialUpdatePromise = resolve;\r\n});\r\n\r\nexport function resolveInitialUpdate(value: string): void {\r\n  resolveInitialUpdatePromise(value);\r\n  firstUpdate = false;\r\n}\r\n\r\nlet resolveInitializersPromise: (value: void) => void;\r\ninitializersPromise = new Promise<void>(resolve => {\r\n  resolveInitializersPromise = resolve;\r\n});\r\n\r\nexport function isFirstUpdate() {\r\n  return firstUpdate;\r\n}\r\n\r\nexport function setWaitForRootComponents(): void {\r\n  waitForRootComponents = true;\r\n}\r\n\r\nexport function setWebAssemblyOptions(initializersReady: Promise<Partial<WebAssemblyStartOptions>>) {\r\n  if (options) {\r\n    throw new Error('WebAssembly options have already been configured.');\r\n  }\r\n  setOptions(initializersReady);\r\n\r\n\r\n  async function setOptions(initializers: Promise<Partial<WebAssemblyStartOptions>>) {\r\n    const configuredOptions = await initializers;\r\n    options = configuredOptions;\r\n    resolveInitializersPromise();\r\n  }\r\n}\r\n\r\nexport function startWebAssembly(components: RootComponentManager<WebAssemblyComponentDescriptor>): Promise<void> {\r\n  if (startPromise !== undefined) {\r\n    throw new Error('Blazor WebAssembly has already started.');\r\n  }\r\n\r\n  startPromise = new Promise(startCore.bind(null, components));\r\n\r\n  return startPromise;\r\n}\r\n\r\nasync function startCore(components: RootComponentManager<WebAssemblyComponentDescriptor>, resolve, _) {\r\n  if (inAuthRedirectIframe()) {\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    await new Promise(() => { }); // See inAuthRedirectIframe for explanation\r\n  }\r\n\r\n  const platformLoadPromise = loadWebAssemblyPlatformIfNotStarted();\r\n\r\n  addDispatchEventMiddleware((browserRendererId, eventHandlerId, continuation) => {\r\n    // It's extremely unusual, but an event can be raised while we're in the middle of synchronously applying a\r\n    // renderbatch. For example, a renderbatch might mutate the DOM in such a way as to cause an <input> to lose\r\n    // focus, in turn triggering a 'change' event. It may also be possible to listen to other DOM mutation events\r\n    // that are themselves triggered by the application of a renderbatch.\r\n    const renderer = getRendererer(browserRendererId);\r\n    if (renderer?.eventDelegator.getHandler(eventHandlerId)) {\r\n      monoPlatform.invokeWhenHeapUnlocked(continuation);\r\n    }\r\n  });\r\n\r\n  Blazor._internal.applyHotReload = (id: string, metadataDelta: string, ilDelta: string, pdbDelta: string | undefined) => {\r\n    dispatcher.invokeDotNetStaticMethod('Microsoft.AspNetCore.Components.WebAssembly', 'ApplyHotReloadDelta', id, metadataDelta, ilDelta, pdbDelta);\r\n  };\r\n\r\n  Blazor._internal.getApplyUpdateCapabilities = () => dispatcher.invokeDotNetStaticMethod('Microsoft.AspNetCore.Components.WebAssembly', 'GetApplyUpdateCapabilities');\r\n\r\n  // Configure JS interop\r\n  Blazor._internal.invokeJSFromDotNet = invokeJSFromDotNet;\r\n  Blazor._internal.invokeJSJson = invokeJSJson;\r\n  Blazor._internal.endInvokeDotNetFromJS = endInvokeDotNetFromJS;\r\n  Blazor._internal.receiveWebAssemblyDotNetDataStream = receiveWebAssemblyDotNetDataStream;\r\n  Blazor._internal.receiveByteArray = receiveByteArray;\r\n\r\n  // Configure environment for execution under Mono WebAssembly with shared-memory rendering\r\n  const platform = Environment.setPlatform(monoPlatform);\r\n  Blazor.platform = platform;\r\n  Blazor._internal.renderBatch = (browserRendererId: number, batchAddress: Pointer) => {\r\n    // We're going to read directly from the .NET memory heap, so indicate to the platform\r\n    // that we don't want anything to modify the memory contents during this time. Currently this\r\n    // is only guaranteed by the fact that .NET code doesn't run during this time, but in the\r\n    // future (when multithreading is implemented) we might need the .NET runtime to understand\r\n    // that GC compaction isn't allowed during this critical section.\r\n    const heapLock = monoPlatform.beginHeapLock();\r\n    try {\r\n      renderBatch(browserRendererId, new SharedMemoryRenderBatch(batchAddress));\r\n    } finally {\r\n      heapLock.release();\r\n    }\r\n  };\r\n\r\n  Blazor._internal.navigationManager.listenForNavigationEvents(WebRendererId.WebAssembly, async (uri: string, state: string | undefined, intercepted: boolean): Promise<void> => {\r\n    await dispatcher.invokeDotNetStaticMethodAsync(\r\n      'Microsoft.AspNetCore.Components.WebAssembly',\r\n      'NotifyLocationChanged',\r\n      uri,\r\n      state,\r\n      intercepted\r\n    );\r\n  }, async (callId: number, uri: string, state: string | undefined, intercepted: boolean): Promise<void> => {\r\n    const shouldContinueNavigation = await dispatcher.invokeDotNetStaticMethodAsync<boolean>(\r\n      'Microsoft.AspNetCore.Components.WebAssembly',\r\n      'NotifyLocationChangingAsync',\r\n      uri,\r\n      state,\r\n      intercepted\r\n    );\r\n\r\n    Blazor._internal.navigationManager.endLocationChanging(callId, shouldContinueNavigation);\r\n  });\r\n\r\n  // Leverage the time while we are loading boot.config.json from the network to discover any potentially registered component on\r\n  // the document.\r\n  const componentAttacher = new WebAssemblyComponentAttacher(components);\r\n  Blazor._internal.registeredComponents = {\r\n    getRegisteredComponentsCount: () => componentAttacher.getCount(),\r\n    getAssembly: (id) => componentAttacher.getAssembly(id),\r\n    getTypeName: (id) => componentAttacher.getTypeName(id),\r\n    getParameterDefinitions: (id) => componentAttacher.getParameterDefinitions(id) || '',\r\n    getParameterValues: (id) => componentAttacher.getParameterValues(id) || '',\r\n  };\r\n\r\n  Blazor._internal.getPersistedState = () => discoverWebAssemblyPersistedState(document) || '';\r\n\r\n  Blazor._internal.getInitialComponentsUpdate = () => initialUpdatePromise;\r\n\r\n  Blazor._internal.updateRootComponents = (operations: string) =>\r\n    Blazor._internal.dotNetExports?.UpdateRootComponentsCore(operations);\r\n\r\n  Blazor._internal.endUpdateRootComponents = (batchId: number) =>\r\n    components.onAfterUpdateRootComponents?.(batchId);\r\n\r\n  Blazor._internal.attachRootComponentToElement = (selector, componentId, rendererId: any) => {\r\n    const element = componentAttacher.resolveRegisteredElement(selector);\r\n    if (!element) {\r\n      attachRootComponentToElement(selector, componentId, rendererId);\r\n    } else {\r\n      attachRootComponentToLogicalElement(rendererId, element, componentId, false);\r\n    }\r\n  };\r\n\r\n  let api: PlatformApi;\r\n  try {\r\n    await platformLoadPromise;\r\n    api = await platform.start();\r\n  } catch (ex) {\r\n    throw new Error(`Failed to start platform. Reason: ${ex}`);\r\n  }\r\n\r\n  // Start up the application\r\n  platform.callEntryPoint();\r\n  // At this point .NET has been initialized (and has yielded), we can't await the promise becasue it will\r\n  // only end when the app finishes running\r\n  const initializer = getInitializer();\r\n  initializer.invokeAfterStartedCallbacks(Blazor);\r\n  started = true;\r\n  resolve();\r\n}\r\n\r\nexport function hasStartedWebAssembly(): boolean {\r\n  return startPromise !== undefined;\r\n}\r\n\r\nexport function waitForBootConfigLoaded(): Promise<MonoConfig> {\r\n  return bootConfigPromise;\r\n}\r\n\r\nexport function loadWebAssemblyPlatformIfNotStarted(): Promise<void> {\r\n  platformLoadPromise ??= (async () => {\r\n    await initializersPromise;\r\n    const finalOptions = options ?? {};\r\n    const existingConfig = options?.configureRuntime;\r\n    finalOptions.configureRuntime = (config) => {\r\n      existingConfig?.(config);\r\n      if (waitForRootComponents) {\r\n        config.withEnvironmentVariable('__BLAZOR_WEBASSEMBLY_WAIT_FOR_ROOT_COMPONENTS', 'true');\r\n      }\r\n    };\r\n    await monoPlatform.load(finalOptions, resolveBootConfigPromise);\r\n    loadedWebAssemblyPlatform = true;\r\n    window.dispatchEvent(new Event('blazor:framework:loaded'));\r\n  })();\r\n  return platformLoadPromise;\r\n}\r\n\r\nexport function hasStartedLoadingWebAssemblyPlatform(): boolean {\r\n  return platformLoadPromise !== undefined;\r\n}\r\n\r\nexport function hasLoadedWebAssemblyPlatform(): boolean {\r\n  return loadedWebAssemblyPlatform;\r\n}\r\n\r\n// obsolete, legacy, don't use for new code!\r\nfunction invokeJSFromDotNet(callInfo: Pointer, arg0: any, arg1: any, arg2: any): any {\r\n  const functionIdentifier = monoPlatform.readStringField(callInfo, 0)!;\r\n  const resultType = monoPlatform.readInt32Field(callInfo, 4);\r\n  const marshalledCallArgsJson = monoPlatform.readStringField(callInfo, 8);\r\n  const targetInstanceId = monoPlatform.readUint64Field(callInfo, 20);\r\n\r\n  if (marshalledCallArgsJson !== null) {\r\n    const marshalledCallAsyncHandle = monoPlatform.readUint64Field(callInfo, 12);\r\n\r\n    if (marshalledCallAsyncHandle !== 0) {\r\n      dispatcher.beginInvokeJSFromDotNet(marshalledCallAsyncHandle, functionIdentifier, marshalledCallArgsJson, resultType, targetInstanceId);\r\n      return 0;\r\n    } else {\r\n      const resultJson = dispatcher.invokeJSFromDotNet(functionIdentifier, marshalledCallArgsJson, resultType, targetInstanceId)!;\r\n      return resultJson === null ? 0 : BINDING.js_string_to_mono_string(resultJson);\r\n    }\r\n  } else {\r\n    const func = DotNet.findJSFunction(functionIdentifier, targetInstanceId);\r\n    const result = func.call(null, arg0, arg1, arg2);\r\n\r\n    switch (resultType) {\r\n      case DotNet.JSCallResultType.Default:\r\n        return result;\r\n      case DotNet.JSCallResultType.JSObjectReference:\r\n        return DotNet.createJSObjectReference(result).__jsObjectId;\r\n      case DotNet.JSCallResultType.JSStreamReference: {\r\n        const streamReference = DotNet.createJSStreamReference(result);\r\n        const resultJson = JSON.stringify(streamReference);\r\n        return BINDING.js_string_to_mono_string(resultJson);\r\n      }\r\n      case DotNet.JSCallResultType.JSVoidResult:\r\n        return null;\r\n      default:\r\n        throw new Error(`Invalid JS call result type '${resultType}'.`);\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateWebAssemblyRootComponents(operations: string): void {\r\n  if (!startPromise) {\r\n    throw new Error('Blazor WebAssembly has not started.');\r\n  }\r\n\r\n  if (!Blazor._internal.updateRootComponents) {\r\n    throw new Error('Blazor WebAssembly has not initialized.');\r\n  }\r\n\r\n  if (!started) {\r\n    scheduleAfterStarted(operations);\r\n  } else {\r\n    Blazor._internal.updateRootComponents(operations);\r\n  }\r\n}\r\n\r\nasync function scheduleAfterStarted(operations: string): Promise<void> {\r\n  await startPromise;\r\n\r\n  if (!Blazor._internal.updateRootComponents) {\r\n    throw new Error('Blazor WebAssembly has not initialized.');\r\n  }\r\n\r\n  Blazor._internal.updateRootComponents(operations);\r\n}\r\n\r\nfunction invokeJSJson(identifier: string, targetInstanceId: number, resultType: number, argsJson: string, asyncHandle: number): string | null {\r\n  if (asyncHandle !== 0) {\r\n    dispatcher.beginInvokeJSFromDotNet(asyncHandle, identifier, argsJson, resultType, targetInstanceId);\r\n    return null;\r\n  } else {\r\n    return dispatcher.invokeJSFromDotNet(identifier, argsJson, resultType, targetInstanceId);\r\n  }\r\n}\r\n\r\nfunction endInvokeDotNetFromJS(callId: string, success: boolean, resultJsonOrErrorMessage: string): void {\r\n  dispatcher.endInvokeDotNetFromJS(callId, success, resultJsonOrErrorMessage);\r\n}\r\n\r\nfunction receiveWebAssemblyDotNetDataStream(streamId: number, data: any, bytesRead: number, errorMessage: string): void {\r\n  receiveDotNetDataStream(dispatcher, streamId, data, bytesRead, errorMessage);\r\n}\r\n\r\nfunction receiveByteArray(id: number, data: Uint8Array): void {\r\n  dispatcher.receiveByteArray(id, data);\r\n}\r\n\r\nfunction inAuthRedirectIframe(): boolean {\r\n  // We don't want the .NET runtime to start up a second time inside the AuthenticationService.ts iframe. It uses resources\r\n  // unnecessarily and can lead to errors (#37355), plus the behavior is not well defined as the frame will be terminated shortly.\r\n  // So, if we're in that situation, block the startup process indefinitely so that anything chained to Blazor.start never happens.\r\n  // The detection logic here is based on the equivalent check in AuthenticationService.ts.\r\n  // TODO: Later we want AuthenticationService.ts to become responsible for doing this via a JS initializer. Doing it here is a\r\n  //       tactical fix for .NET 6 so we don't have to change how authentication is initialized.\r\n  if (window.parent !== window && !window.opener && window.frameElement) {\r\n    const settingsJson = window.sessionStorage && window.sessionStorage['Microsoft.AspNetCore.Components.WebAssembly.Authentication.CachedAuthSettings'];\r\n    const settings = settingsJson && JSON.parse(settingsJson);\r\n    return settings && settings.redirect_uri && location.href.startsWith(settings.redirect_uri);\r\n  }\r\n\r\n  return false;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport function synchronizeAttributes(destination: Element, source: Element) {\r\n  const destAttrs = destination.attributes;\r\n  const sourceAttrs = source.attributes;\r\n\r\n  // Skip most of the work in the common case where all attributes are unchanged and are even still in the same order\r\n  if (!attributeSetsAreIdentical(destAttrs, sourceAttrs)) {\r\n    const remainingDestAttrs = new Map<string, Attr>();\r\n    for (const destAttr of destination.attributes as any) {\r\n      remainingDestAttrs.set(destAttr.name, destAttr);\r\n    }\r\n\r\n    for (const sourceAttr of source.attributes as any as Attr[]) {\r\n      const existingDestAttr = sourceAttr.namespaceURI\r\n        ? destination.getAttributeNodeNS(sourceAttr.namespaceURI, sourceAttr.localName)\r\n        : destination.getAttributeNode(sourceAttr.name);\r\n      if (existingDestAttr) {\r\n        if (existingDestAttr.value !== sourceAttr.value) {\r\n          // Update\r\n          applyAttribute(destination, sourceAttr);\r\n        }\r\n\r\n        remainingDestAttrs.delete(existingDestAttr.name);\r\n      } else {\r\n        // Insert\r\n        applyAttribute(destination, sourceAttr);\r\n      }\r\n    }\r\n\r\n    for (const attrToDelete of remainingDestAttrs.values()) {\r\n      // Delete\r\n      removeAttribute(destination, attrToDelete);\r\n    }\r\n  }\r\n}\r\n\r\nfunction attributeSetsAreIdentical(destAttrs: NamedNodeMap, sourceAttrs: NamedNodeMap): boolean {\r\n  const destAttrsLength = destAttrs.length;\r\n  if (destAttrsLength !== sourceAttrs.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < destAttrsLength; i++) {\r\n    const sourceAttr = sourceAttrs.item(i)!;\r\n    const destAttr = destAttrs.item(i)!;\r\n    if (sourceAttr.name !== destAttr.name || sourceAttr.value !== destAttr.value) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction applyAttribute(element: Element, attr: Attr) {\r\n  if (attr.namespaceURI) {\r\n    element.setAttributeNS(attr.namespaceURI, attr.name, attr.value);\r\n  } else {\r\n    element.setAttribute(attr.name, attr.value);\r\n  }\r\n}\r\n\r\nfunction removeAttribute(element: Element, attr: Attr) {\r\n  if (attr.namespaceURI) {\r\n    element.removeAttributeNS(attr.namespaceURI, attr.localName);\r\n  } else {\r\n    element.removeAttribute(attr.name);\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nconst dataPermanentAttributeName = 'data-permanent';\r\n\r\nexport function isDataPermanentElement(elem: Element): boolean {\r\n  return elem.hasAttribute(dataPermanentAttributeName);\r\n}\r\n\r\nexport function cannotMergeDueToDataPermanentAttributes(elementA: Element, elementB: Element) {\r\n  const dataPermanentAttributeValueA = elementA.getAttribute(dataPermanentAttributeName);\r\n  const dataPermanentAttributeValueB = elementB.getAttribute(dataPermanentAttributeName);\r\n\r\n  return dataPermanentAttributeValueA !== dataPermanentAttributeValueB;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport interface EditScript {\r\n  skipCount: number,\r\n  edits?: Operation[],\r\n}\r\n\r\nexport function computeEditScript<T>(before: ItemList<T>, after: ItemList<T>, updateCost: UpdateCostFunc<T>): EditScript {\r\n  // In common cases where nothing has changed or only one thing changed, we can reduce the task dramatically\r\n  // by identifying the common prefix/suffix, and only doing Levenshtein on the subset in between. The end results can entirely\r\n  // ignore any trailing identical entries.\r\n  const commonPrefixLength = lengthOfCommonPrefix(before, after, updateCost);\r\n  if (commonPrefixLength === before.length && commonPrefixLength === after.length) {\r\n    // If by now we know there are no edits, bail out early\r\n    return { skipCount: commonPrefixLength };\r\n  }\r\n  const commonSuffixLength = lengthOfCommonSuffix(before, after, commonPrefixLength, commonPrefixLength, updateCost);\r\n  before = ItemListSubset.create(before, commonPrefixLength, before.length - commonPrefixLength - commonSuffixLength);\r\n  after =  ItemListSubset.create(after, commonPrefixLength, after.length - commonPrefixLength - commonSuffixLength);\r\n\r\n  const operations = computeOperations(before, after, updateCost);\r\n  const edits = toEditScript(operations);\r\n  return { skipCount: commonPrefixLength, edits };\r\n}\r\n\r\nfunction lengthOfCommonPrefix<T>(before: ItemList<T>, after: ItemList<T>, updateCost: UpdateCostFunc<T>): number {\r\n  const shorterLength = Math.min(before.length, after.length);\r\n  for (let index = 0; index < shorterLength; index++) {\r\n    if (updateCost(before.item(index)!, after.item(index)!) !== UpdateCost.None) {\r\n      return index;\r\n    }\r\n  }\r\n\r\n  return shorterLength;\r\n}\r\n\r\nfunction lengthOfCommonSuffix<T>(before: ItemList<T>, after: ItemList<T>, beforeStartIndex: number, afterStartIndex: number, updateCost: UpdateCostFunc<T>): number {\r\n  let beforeIndex = before.length - 1;\r\n  let afterIndex = after.length - 1;\r\n  let count = 0;\r\n  while (beforeIndex >= beforeStartIndex && afterIndex >= afterStartIndex) {\r\n    if (updateCost(before.item(beforeIndex)!, after.item(afterIndex)!) !== UpdateCost.None) {\r\n      break;\r\n    }\r\n    beforeIndex--;\r\n    afterIndex--;\r\n    count++;\r\n  }\r\n  return count;\r\n}\r\n\r\nfunction computeOperations<T>(before: ItemList<T>, after: ItemList<T>, updateCost: UpdateCostFunc<T>): Operation[][] {\r\n  // Initialize matrices\r\n  const costs: number[][] = [];\r\n  const operations: Operation[][] = [];\r\n  const beforeLength = before.length;\r\n  const afterLength = after.length;\r\n  if (beforeLength === 0 && afterLength === 0) {\r\n    return [];\r\n  }\r\n\r\n  for (let beforeIndex = 0; beforeIndex <= beforeLength; beforeIndex++) {\r\n    (costs[beforeIndex] = Array(afterLength + 1))[0] = beforeIndex;\r\n    operations[beforeIndex] = Array(afterLength + 1);\r\n  }\r\n  const rowZero = costs[0];\r\n  for (let afterIndex = 1; afterIndex <= afterLength; afterIndex++) {\r\n    rowZero[afterIndex] = afterIndex;\r\n  }\r\n\r\n  for (let beforeIndex = 1; beforeIndex <= beforeLength; beforeIndex++) {\r\n    for (let afterIndex = 1; afterIndex <= afterLength; afterIndex++) {\r\n      const comparisonResult = updateCost(before.item(beforeIndex - 1)!, after.item(afterIndex - 1)!);\r\n      const costAsDelete = costs[beforeIndex - 1][afterIndex] + 1;\r\n      const costAsInsert = costs[beforeIndex][afterIndex - 1] + 1;\r\n      let costAsRetain: number;\r\n      switch (comparisonResult) {\r\n        case UpdateCost.None:\r\n          costAsRetain = costs[beforeIndex - 1][afterIndex - 1];\r\n          break;\r\n        case UpdateCost.Some:\r\n          costAsRetain = costs[beforeIndex - 1][afterIndex - 1] + 1;\r\n          break;\r\n        case UpdateCost.Infinite:\r\n          costAsRetain = Number.MAX_VALUE;\r\n          break;\r\n      }\r\n\r\n      if (costAsRetain < costAsInsert && costAsRetain < costAsDelete) {\r\n        costs[beforeIndex][afterIndex] = costAsRetain;\r\n        operations[beforeIndex][afterIndex] = comparisonResult === UpdateCost.None ? Operation.Keep : Operation.Update;\r\n      } else if (costAsInsert < costAsDelete) {\r\n        costs[beforeIndex][afterIndex] = costAsInsert;\r\n        operations[beforeIndex][afterIndex] = Operation.Insert;\r\n      } else {\r\n        costs[beforeIndex][afterIndex] = costAsDelete;\r\n        operations[beforeIndex][afterIndex] = Operation.Delete;\r\n      }\r\n    }\r\n  }\r\n\r\n  return operations;\r\n}\r\n\r\nfunction toEditScript(operations: Operation[][]) {\r\n  // Start in the bottom-right corner, and work backwards\r\n  const result: Operation[] = [];\r\n  let beforeIndex = operations.length - 1;\r\n  let afterIndex = operations[beforeIndex]?.length - 1;\r\n\r\n  while (beforeIndex > 0 || afterIndex > 0) {\r\n    const operation = beforeIndex === 0\r\n      ? Operation.Insert\r\n      : afterIndex === 0\r\n        ? Operation.Delete\r\n        : operations[beforeIndex][afterIndex];\r\n\r\n    result.unshift(operation);\r\n\r\n    switch (operation) {\r\n      case Operation.Keep:\r\n      case Operation.Update:\r\n        beforeIndex--;\r\n        afterIndex--;\r\n        break;\r\n      case Operation.Insert:\r\n        afterIndex--;\r\n        break;\r\n      case Operation.Delete:\r\n        beforeIndex--;\r\n        break;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n// Levenshtein naturally deals with these three specific cost values, so they are the only ones allowed.\r\n// If we allowed arbitrary cost numbers, things quickly get very unpredictable.\r\nexport enum UpdateCost {\r\n  None,     // Implemented as cost 0\r\n  Some,     // Implemented as cost 1 (same as a single insertion or deletion)\r\n  Infinite, // Implemented as cost infinity (so we would always choose to insert+delete instead of update)\r\n}\r\n\r\ntype UpdateCostFunc<T> = (a: T, b: T) => UpdateCost;\r\n\r\nexport enum Operation {\r\n  Keep = 'keep',\r\n  Update = 'update',\r\n  Insert = 'insert',\r\n  Delete = 'delete',\r\n}\r\n\r\nexport interface ItemList<T> { // Designed to be compatible with NodeList\r\n  readonly length: number;\r\n  item(index: number): T | null;\r\n  forEach(callbackfn: (value: T, key: number, parent: ItemList<T>) => void, thisArg?: any): void;\r\n}\r\n\r\nclass ItemListSubset<T> implements ItemList<T> {\r\n  static create<T>(source: ItemList<T>, startIndex: number, length: number) {\r\n    return startIndex === 0 && length === source.length\r\n      ? source // No need for a wrapper\r\n      : new ItemListSubset(source, startIndex, length);\r\n  }\r\n\r\n  constructor(private source: ItemList<T>, private startIndex: number, public length: number) {\r\n  }\r\n\r\n  item(index: number): T | null {\r\n    return this.source.item(index + this.startIndex);\r\n  }\r\n\r\n  forEach(callbackfn: (value: T, key: number, parent: ItemList<T>) => void, thisArg?: any): void {\r\n    for (let i = 0; i < this.length; i++) {\r\n      callbackfn(this.item(i)!, i, this);\r\n    }\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AutoComponentDescriptor, ComponentDescriptor, ServerComponentDescriptor, WebAssemblyComponentDescriptor, canMergeDescriptors, discoverComponents, mergeDescriptors } from '../../Services/ComponentDescriptorDiscovery';\r\nimport { isInteractiveRootComponentElement } from '../BrowserRenderer';\r\nimport { applyAnyDeferredValue } from '../DomSpecialPropertyUtil';\r\nimport { LogicalElement, getLogicalChildrenArray, getLogicalNextSibling, getLogicalParent, getLogicalRootDescriptor, insertLogicalChild, insertLogicalChildBefore, isLogicalElement, toLogicalElement, toLogicalRootCommentElement } from '../LogicalElements';\r\nimport { synchronizeAttributes } from './AttributeSync';\r\nimport { cannotMergeDueToDataPermanentAttributes, isDataPermanentElement } from './DataPermanentElementSync';\r\nimport { UpdateCost, ItemList, Operation, computeEditScript } from './EditScript';\r\n\r\nlet descriptorHandler: DescriptorHandler | null = null;\r\n\r\nexport interface DescriptorHandler {\r\n  registerComponent(descriptor: ComponentDescriptor): void;\r\n}\r\n\r\nexport function attachComponentDescriptorHandler(handler: DescriptorHandler) {\r\n  descriptorHandler = handler;\r\n}\r\n\r\nexport function registerAllComponentDescriptors(root: Node) {\r\n  const descriptors = upgradeComponentCommentsToLogicalRootComments(root);\r\n\r\n  for (const descriptor of descriptors) {\r\n    descriptorHandler?.registerComponent(descriptor);\r\n  }\r\n}\r\n\r\nexport { preprocessAndSynchronizeDomContent as synchronizeDomContent };\r\n\r\nfunction preprocessAndSynchronizeDomContent(destination: CommentBoundedRange | Node, newContent: Node) {\r\n  // Start by recursively identifying component markers in the new content\r\n  // and converting them into logical elements so they correctly participate\r\n  // in logical element synchronization\r\n  upgradeComponentCommentsToLogicalRootComments(newContent);\r\n\r\n  // Then, synchronize the preprocessed DOM content\r\n  synchronizeDomContentCore(destination, newContent);\r\n}\r\n\r\nfunction synchronizeDomContentCore(destination: CommentBoundedRange | Node, newContent: Node) {\r\n  // Determine the destination's parent node, i.e., the node containing the children\r\n  // we intend to synchronize. This might sometimes be a logical parent.\r\n  let destinationParent: Node;\r\n  if (destination instanceof Node) {\r\n    destinationParent = destination;\r\n  } else {\r\n    destinationParent =\r\n      getLogicalParent(destination.startExclusive as unknown as LogicalElement) as unknown as Node ??\r\n      destination.startExclusive.parentNode!;\r\n  }\r\n\r\n  // If only one out of the destination and new content is a logical element, we normalize\r\n  // the other to also be a logical element\r\n  const isSynchronizingLogicalElements = isLogicalElement(destinationParent) || isLogicalElement(newContent);\r\n  if (isSynchronizingLogicalElements) {\r\n    toLogicalElement(destinationParent, /* allowExistingContents */ true);\r\n    toLogicalElement(newContent, /* allowExistingContents */ true);\r\n  }\r\n\r\n  // Create abstract lists of child nodes\r\n  let originalNodesForDiff: ItemList<Node>;\r\n  let newNodesForDiff: ItemList<Node>;\r\n  if (isSynchronizingLogicalElements) {\r\n    originalNodesForDiff = new LogicalElementNodeList(destinationParent as unknown as LogicalElement);\r\n    newNodesForDiff = new LogicalElementNodeList(newContent as unknown as LogicalElement);\r\n  } else {\r\n    originalNodesForDiff = destinationParent.childNodes;\r\n    newNodesForDiff = newContent.childNodes;\r\n  }\r\n\r\n  // If the destination is a comment bounded range, limit the node list to a subset defined\r\n  // by that range\r\n  if (!(destination instanceof Node)) {\r\n    originalNodesForDiff = new SiblingSubsetNodeList(originalNodesForDiff, destination);\r\n  }\r\n\r\n  // Run the diff\r\n  const editScript = computeEditScript(\r\n    originalNodesForDiff,\r\n    newNodesForDiff,\r\n    domNodeComparer\r\n  );\r\n\r\n  let destinationWalker: EditWalker;\r\n  let sourceWalker: EditWalker;\r\n  if (isSynchronizingLogicalElements) {\r\n    destinationWalker = new LogicalElementEditWalker(originalNodesForDiff.item(0) as unknown as LogicalElement);\r\n    sourceWalker = new LogicalElementEditWalker(newNodesForDiff.item(0) as unknown as LogicalElement);\r\n  } else {\r\n    destinationWalker = new DomNodeEditWalker(originalNodesForDiff.item(0)!);\r\n    sourceWalker = new DomNodeEditWalker(newNodesForDiff.item(0)!);\r\n  }\r\n\r\n  // Handle any common leading items\r\n  for (let i = 0; i < editScript.skipCount; i++) {\r\n    treatAsMatch(destinationWalker.current, sourceWalker.current);\r\n    destinationWalker.advance();\r\n    sourceWalker.advance();\r\n  }\r\n\r\n  // Handle any edited region\r\n  if (editScript.edits) {\r\n    const edits = editScript.edits;\r\n    const editsLength = edits.length;\r\n\r\n    for (let editIndex = 0; editIndex < editsLength; editIndex++) {\r\n      const operation = edits[editIndex];\r\n      switch (operation) {\r\n        case Operation.Keep: {\r\n          treatAsMatch(destinationWalker.current, sourceWalker.current);\r\n          destinationWalker.advance();\r\n          sourceWalker.advance();\r\n          break;\r\n        }\r\n        case Operation.Update: {\r\n          treatAsSubstitution(destinationWalker.current, sourceWalker.current);\r\n          destinationWalker.advance();\r\n          sourceWalker.advance();\r\n          break;\r\n        }\r\n        case Operation.Delete: {\r\n          const nodeToRemove = destinationWalker.current;\r\n          destinationWalker.advance();\r\n          treatAsDeletion(nodeToRemove, destinationParent);\r\n          break;\r\n        }\r\n        case Operation.Insert: {\r\n          const nodeToInsert = sourceWalker.current;\r\n          sourceWalker.advance();\r\n          treatAsInsertion(nodeToInsert, destinationWalker.current, destinationParent);\r\n          break;\r\n        }\r\n        default:\r\n          throw new Error(`Unexpected operation: '${operation}'`);\r\n      }\r\n    }\r\n\r\n    // Handle any common trailing items\r\n    // These can only exist if there were some edits, otherwise everything would be in the set of common leading items\r\n    const endAtNodeExclOrNull = destination instanceof Node ? null : destination.endExclusive;\r\n    while (destinationWalker.current !== endAtNodeExclOrNull) {\r\n      treatAsMatch(destinationWalker.current, sourceWalker.current);\r\n      destinationWalker.advance();\r\n      sourceWalker.advance();\r\n    }\r\n    if (sourceWalker.current) {\r\n      // Should never be possible, as it would imply a bug in the edit script calculation, or possibly an unsupported\r\n      // scenario like a DOM mutation observer modifying the destination nodes while we are working on them\r\n      throw new Error('Updating the DOM failed because the sets of trailing nodes had inconsistent lengths.');\r\n    }\r\n  }\r\n}\r\n\r\nfunction treatAsMatch(destination: Node, source: Node) {\r\n  switch (destination.nodeType) {\r\n    case Node.TEXT_NODE:\r\n      break;\r\n    case Node.COMMENT_NODE: {\r\n      const destinationAsLogicalElement = destination as unknown as LogicalElement;\r\n      const sourceAsLogicalElement = source as unknown as LogicalElement;\r\n      const destinationRootDescriptor = getLogicalRootDescriptor(destinationAsLogicalElement);\r\n      const sourceRootDescriptor = getLogicalRootDescriptor(sourceAsLogicalElement);\r\n\r\n      if (!destinationRootDescriptor !== !sourceRootDescriptor) {\r\n        throw new Error('Not supported: merging component comment nodes with non-component comment nodes');\r\n      }\r\n\r\n      if (destinationRootDescriptor) {\r\n        // Update the existing descriptor with hte new descriptor's data\r\n        mergeDescriptors(destinationRootDescriptor, sourceRootDescriptor);\r\n\r\n        const isDestinationInteractive = isInteractiveRootComponentElement(destinationAsLogicalElement);\r\n        if (isDestinationInteractive) {\r\n          // Don't sync DOM content for already-interactive components becuase their content is managed\r\n          // by the renderer.\r\n        } else {\r\n          synchronizeDomContentCore(destination, source);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case Node.ELEMENT_NODE: {\r\n      const editableElementValue = getEditableElementValue(source as Element);\r\n      synchronizeAttributes(destination as Element, source as Element);\r\n      applyAnyDeferredValue(destination as Element);\r\n\r\n      if (isDataPermanentElement(destination as Element)) {\r\n        // The destination element's content should be retained, so we avoid recursing into it.\r\n      } else {\r\n        synchronizeDomContentCore(destination as Element, source as Element);\r\n      }\r\n\r\n      // This is a much simpler alternative to the deferred-value-assignment logic we use in interactive rendering.\r\n      // Because this sync algorithm goes depth-first, we know all the attributes and descendants are fully in sync\r\n      // by now, so setting any \"special value\" property is just a matter of assigning it right now (we don't have\r\n      // to be concerned that it's invalid because it doesn't correspond to an <option> child or a min/max attribute).\r\n      if (editableElementValue !== null) {\r\n        ensureEditableValueSynchronized(destination as Element, editableElementValue);\r\n      }\r\n      break;\r\n    }\r\n    case Node.DOCUMENT_TYPE_NODE:\r\n      // See comment below about doctype nodes. We leave them alone.\r\n      break;\r\n    default:\r\n      throw new Error(`Not implemented: matching nodes of type ${destination.nodeType}`);\r\n  }\r\n}\r\n\r\nfunction treatAsSubstitution(destination: Node, source: Node) {\r\n  switch (destination.nodeType) {\r\n    case Node.TEXT_NODE:\r\n    case Node.COMMENT_NODE:\r\n      (destination as Text).textContent = (source as Text).textContent;\r\n      break;\r\n    default:\r\n      throw new Error(`Not implemented: substituting nodes of type ${destination.nodeType}`);\r\n  }\r\n}\r\n\r\nfunction treatAsDeletion(nodeToDelete: Node, parentNode: Node) {\r\n  if (isLogicalElement(parentNode)) {\r\n    // It's not safe to call 'removeLogicalChild' here because it recursively removes\r\n    // logical descendants from their parents, and that can potentially interfere with\r\n    // renderer-managed DOM. Instead, we insert the logical element into a new document\r\n    // fragment, which allows the renderer to continue applying render batches until\r\n    // related components get disposed.\r\n    const docFrag = toLogicalElement(document.createDocumentFragment());\r\n    insertLogicalChild(nodeToDelete, docFrag, 0);\r\n  } else {\r\n    parentNode.removeChild(nodeToDelete);\r\n  }\r\n}\r\n\r\nfunction treatAsInsertion(nodeToInsert: Node, nextNode: Node | null, parentNode: Node) {\r\n  if (isLogicalElement(parentNode)) {\r\n    insertLogicalChildBefore(nodeToInsert, parentNode as unknown as LogicalElement, nextNode as unknown as LogicalElement);\r\n  } else {\r\n    // If the parent node is not a logical element, that means\r\n    // the node we're inserting is either a root logical element, or not a logical\r\n    // element at all. In either case, it's safe to treat the node we're inserting\r\n    // as a single node because root logical nodes cannot be component comments.\r\n    parentNode.insertBefore(nodeToInsert, nextNode);\r\n  }\r\n\r\n  // Find and register descriptors in new content\r\n  const iterator = document.createNodeIterator(nodeToInsert, NodeFilter.SHOW_COMMENT);\r\n  while (iterator.nextNode()) {\r\n    const logicalRootDescriptor = getLogicalRootDescriptor(iterator.referenceNode as unknown as LogicalElement);\r\n    if (logicalRootDescriptor) {\r\n      descriptorHandler?.registerComponent(logicalRootDescriptor);\r\n    }\r\n  }\r\n}\r\n\r\nfunction domNodeComparer(a: Node, b: Node): UpdateCost {\r\n  if (a.nodeType !== b.nodeType) {\r\n    return UpdateCost.Infinite;\r\n  }\r\n\r\n  if (isLogicalElement(a) !== isLogicalElement(b)) {\r\n    // We cannot merge logical elements with non-logical elements.\r\n    return UpdateCost.Infinite;\r\n  }\r\n\r\n  switch (a.nodeType) {\r\n    case Node.TEXT_NODE:\r\n      // We're willing to update text nodes in place, but treat the update operation as being\r\n      // as costly as an insertion or deletion\r\n      return a.textContent === b.textContent ? UpdateCost.None : UpdateCost.Some;\r\n    case Node.COMMENT_NODE: {\r\n      const rootDescriptorA = getLogicalRootDescriptor(a as unknown as LogicalElement);\r\n      const rootDescriptorB = getLogicalRootDescriptor(b as unknown as LogicalElement);\r\n\r\n      if (rootDescriptorA || rootDescriptorB) {\r\n        // If either node represents a root component comment, they must both be components of with matching keys.\r\n        // We will update a component with a non-component or a component with a different key.\r\n        return rootDescriptorA && rootDescriptorB && canMergeDescriptors(rootDescriptorA, rootDescriptorB)\r\n          ? UpdateCost.None\r\n          : UpdateCost.Infinite;\r\n      } else {\r\n        // We're willing to update non-component comment nodes in place, but treat the update operation as being\r\n        // as costly as an insertion or deletion\r\n        return a.textContent === b.textContent ? UpdateCost.None : UpdateCost.Some;\r\n      }\r\n    }\r\n    case Node.ELEMENT_NODE:\r\n      // For elements, we're only doing a shallow comparison and don't know if attributes/descendants are different.\r\n      // We never 'update' one element type into another. We regard the update cost for same-type elements as zero because\r\n      // then the 'find common prefix/suffix' optimization can include elements in those prefixes/suffixes.\r\n      // TODO: If we want to support some way to force matching/nonmatching based on @key, we can add logic here\r\n      //       to return UpdateCost.Infinite if either has a key but they don't match. This will prevent unwanted retention.\r\n      //       For the converse (forcing retention, even if that means reordering), we could post-process the list of\r\n      //       inserts/deletes to find matches based on key to treat those pairs as 'move' operations.\r\n      if ((a as Element).tagName !== (b as Element).tagName) {\r\n        return UpdateCost.Infinite;\r\n      }\r\n\r\n      // The two elements must have matching 'data-permanent' attribute values for them to be merged. If they don't match, either:\r\n      // [1] We're comparing a data-permanent element to a non-data-permanent one.\r\n      // [2] We're comparing elements that represent two different data-permanent containers.\r\n      if (cannotMergeDueToDataPermanentAttributes(a as Element, b as Element)) {\r\n        return UpdateCost.Infinite;\r\n      }\r\n\r\n      return UpdateCost.None;\r\n    case Node.DOCUMENT_TYPE_NODE:\r\n      // It's invalid to insert or delete doctype, and we have no use case for doing that. So just skip such\r\n      // nodes by saying they are always unchanged.\r\n      return UpdateCost.None;\r\n    default:\r\n      // For anything else we know nothing, so the risk-averse choice is to say we can't retain or update the old value\r\n      return UpdateCost.Infinite;\r\n  }\r\n}\r\n\r\nfunction upgradeComponentCommentsToLogicalRootComments(root: Node): ComponentDescriptor[] {\r\n  const serverDescriptors = discoverComponents(root, 'server') as ServerComponentDescriptor[];\r\n  const webAssemblyDescriptors = discoverComponents(root, 'webassembly') as WebAssemblyComponentDescriptor[];\r\n  const autoDescriptors = discoverComponents(root, 'auto') as AutoComponentDescriptor[];\r\n  const allDescriptors: ComponentDescriptor[] = [];\r\n\r\n  for (const descriptor of [\r\n    ...serverDescriptors,\r\n    ...webAssemblyDescriptors,\r\n    ...autoDescriptors,\r\n  ]) {\r\n    const existingDescriptor = getLogicalRootDescriptor(descriptor.start as unknown as LogicalElement);\r\n    if (existingDescriptor) {\r\n      allDescriptors.push(existingDescriptor);\r\n    } else {\r\n      toLogicalRootCommentElement(descriptor);\r\n\r\n      // Since we've already parsed the payloads from the start and end comments,\r\n      // we sanitize them to reduce noise in the DOM.\r\n      const { start, end } = descriptor;\r\n      start.textContent = 'bl-root';\r\n      if (end) {\r\n        end.textContent = '/bl-root';\r\n      }\r\n\r\n      allDescriptors.push(descriptor);\r\n    }\r\n  }\r\n\r\n  return allDescriptors;\r\n}\r\n\r\nfunction ensureEditableValueSynchronized(destination: Element, value: any) {\r\n  if (destination instanceof HTMLTextAreaElement && destination.value !== value) {\r\n    destination.value = value as string;\r\n  } else if (destination instanceof HTMLSelectElement && destination.selectedIndex !== value) {\r\n    destination.selectedIndex = value as number;\r\n  } else if (destination instanceof HTMLInputElement) {\r\n    if (destination.type === 'checkbox' || destination.type === 'radio') {\r\n      if (destination.checked !== value) {\r\n        destination.checked = value as boolean;\r\n      }\r\n    } else if (destination.value !== value) {\r\n      destination.value = value as string;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getEditableElementValue(elem: Element): string | boolean | number | null {\r\n  if (elem instanceof HTMLSelectElement) {\r\n    return elem.selectedIndex;\r\n  } else if (elem instanceof HTMLInputElement) {\r\n    return elem.type === 'checkbox' || elem.type === 'radio' ? elem.checked : (elem.getAttribute('value') || '');\r\n  } else if (elem instanceof HTMLTextAreaElement) {\r\n    return elem.value;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport interface CommentBoundedRange {\r\n  startExclusive: Comment,\r\n  endExclusive: Comment,\r\n}\r\n\r\ninterface EditWalker {\r\n  current: Node;\r\n  advance(): void;\r\n}\r\n\r\nclass DomNodeEditWalker implements EditWalker {\r\n  current: Node;\r\n\r\n  constructor(startNode: Node) {\r\n    this.current = startNode;\r\n  }\r\n\r\n  advance() {\r\n    if (!this.current) {\r\n      throw new Error('Cannot advance beyond the end of the sibling array');\r\n    }\r\n\r\n    this.current = this.current.nextSibling!;\r\n  }\r\n}\r\n\r\nclass LogicalElementEditWalker implements EditWalker {\r\n  current: Node;\r\n\r\n  constructor(startNode: LogicalElement) {\r\n    this.current = startNode as unknown as Node;\r\n  }\r\n\r\n  advance() {\r\n    if (!this.current) {\r\n      throw new Error('Cannot advance beyond the end of the logical children array');\r\n    }\r\n\r\n    const nextSibling = getLogicalNextSibling(this.current as unknown as LogicalElement);\r\n    this.current = nextSibling as unknown as Node;\r\n  }\r\n}\r\n\r\nclass SiblingSubsetNodeList implements ItemList<Node> {\r\n  private readonly siblings: ItemList<Node>;\r\n\r\n  private readonly startIndex: number;\r\n\r\n  private readonly endIndexExcl: number;\r\n\r\n  readonly length: number;\r\n\r\n  item(index: number): Node | null {\r\n    return this.siblings.item(this.startIndex + index);\r\n  }\r\n\r\n  forEach(callbackfn: (value: Node, key: number, parent: ItemList<Node>) => void, thisArg?: any): void {\r\n    for (let i = 0; i < this.length; i++) {\r\n      callbackfn.call(thisArg, this.item(i)!, i, this);\r\n    }\r\n  }\r\n\r\n  constructor(childNodes: ItemList<Node>, range: CommentBoundedRange) {\r\n    this.siblings = childNodes;\r\n    this.startIndex = Array.prototype.indexOf.call(this.siblings, range.startExclusive) + 1;\r\n    this.endIndexExcl = Array.prototype.indexOf.call(this.siblings, range.endExclusive);\r\n    this.length = this.endIndexExcl - this.startIndex;\r\n  }\r\n}\r\n\r\nclass LogicalElementNodeList implements ItemList<Node> {\r\n  readonly length: number;\r\n\r\n  constructor(element: LogicalElement) {\r\n    const childNodes = getLogicalChildrenArray(element);\r\n    this.length = childNodes.length;\r\n\r\n    // This is done for compatibility with Array.prototype.indexOf, which expects an array-like object\r\n    Object.assign(this, childNodes);\r\n  }\r\n\r\n  [index: number]: Node;\r\n\r\n  item(index: number): Node | null {\r\n    return this[index] as unknown as Node || null;\r\n  }\r\n\r\n  forEach(callbackfn: (value: Node, key: number, parent: ItemList<Node>) => void, thisArg?: any): void {\r\n    for (let i = 0; i < this.length; i++) {\r\n      callbackfn.call(thisArg, this.item(i)!, i, this);\r\n    }\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { synchronizeDomContent } from '../Rendering/DomMerging/DomSync';\r\nimport { attachProgrammaticEnhancedNavigationHandler, handleClickForNavigationInterception, hasInteractiveRouter, notifyEnhancedNavigationListners } from './NavigationUtils';\r\n\r\n/*\r\nIn effect, we have two separate client-side navigation mechanisms:\r\n\r\n[1] Interactive client-side routing. This is the traditional Blazor Server/WebAssembly navigation mechanism for SPAs.\r\n    It is enabled whenever you have a <Router/> rendering as interactive. This intercepts all navigation within the\r\n    base href URI space and tries to display a corresponding [Route] component or the NotFoundContent.\r\n[2] Progressively-enhanced navigation. This is a new mechanism in .NET 8 and is only relevant for multi-page apps.\r\n    It is enabled when you load blazor.web.js and don't have an interactive <Router/>. This intercepts navigation within\r\n    the base href URI space and tries to load it via a `fetch` request and DOM syncing.\r\n\r\nOnly one of these can be enabled at a time, otherwise both would be trying to intercept click/popstate and act on them.\r\nIn fact even if we made the event handlers able to coexist, the two together would still not produce useful behaviors because\r\n[1] implies you have a <Router/>, and that will try to supply UI content for all pages or NotFoundContent if the URL doesn't\r\nmatch a [Route] component, so there would be nothing left for [2] to handle.\r\n\r\nSo, whenever [1] is enabled, we automatically disable [2].\r\n\r\nHowever, a single site can use both [1] and [2] on different URLs.\r\n - You can navigate from [1] to [2] by setting up the interactive <Router/> not to know about any [Route] components in your MPA,\r\n   and so it will fall back on a full-page load to get from the SPA URLs to the MPA URLs.\r\n - You can navigate from [2] to [1] in that it just works by default. A <Router/> can be added dynamically and will then take\r\n   over and disable [2].\r\n\r\nNote that we don't reference NavigationManager.ts from NavigationEnhancement.ts or vice-versa. This is to ensure we could produce\r\ndifferent bundles that only contain minimal content.\r\n*/\r\n\r\nlet currentEnhancedNavigationAbortController: AbortController | null;\r\nlet navigationEnhancementCallbacks: NavigationEnhancementCallbacks;\r\nlet performingEnhancedPageLoad: boolean;\r\n\r\n// This gets initialized to the current URL when we load.\r\n// After that, it gets updated every time we successfully complete a navigation.\r\nlet currentContentUrl = location.href;\r\n\r\nexport interface NavigationEnhancementCallbacks {\r\n  documentUpdated: () => void;\r\n  enhancedNavigationCompleted: () => void;\r\n}\r\n\r\nexport function isPageLoading() {\r\n  return performingEnhancedPageLoad || document.readyState === 'loading';\r\n}\r\n\r\nexport function hasNeverStartedAnyEnhancedPageLoad() {\r\n  return !currentEnhancedNavigationAbortController;\r\n}\r\n\r\nexport function attachProgressivelyEnhancedNavigationListener(callbacks: NavigationEnhancementCallbacks) {\r\n  navigationEnhancementCallbacks = callbacks;\r\n  document.addEventListener('click', onDocumentClick);\r\n  document.addEventListener('submit', onDocumentSubmit);\r\n  window.addEventListener('popstate', onPopState);\r\n\r\n  attachProgrammaticEnhancedNavigationHandler(performProgrammaticEnhancedNavigation);\r\n}\r\n\r\nexport function detachProgressivelyEnhancedNavigationListener() {\r\n  document.removeEventListener('click', onDocumentClick);\r\n  document.removeEventListener('submit', onDocumentSubmit);\r\n  window.removeEventListener('popstate', onPopState);\r\n}\r\n\r\nfunction performProgrammaticEnhancedNavigation(absoluteInternalHref: string, replace: boolean) {\r\n  if (replace) {\r\n    history.replaceState(null, /* ignored title */ '', absoluteInternalHref);\r\n  } else {\r\n    history.pushState(null, /* ignored title */ '', absoluteInternalHref);\r\n  }\r\n\r\n  performEnhancedPageLoad(absoluteInternalHref, /* interceptedLink */ false);\r\n}\r\n\r\nfunction onDocumentClick(event: MouseEvent) {\r\n  if (hasInteractiveRouter()) {\r\n    return;\r\n  }\r\n\r\n  if (event.target instanceof HTMLElement && !enhancedNavigationIsEnabledForElement(event.target)) {\r\n    return;\r\n  }\r\n\r\n  handleClickForNavigationInterception(event, absoluteInternalHref => {\r\n    history.pushState(null, /* ignored title */ '', absoluteInternalHref);\r\n    performEnhancedPageLoad(absoluteInternalHref, /* interceptedLink */ true);\r\n  });\r\n}\r\n\r\nfunction onPopState(state: PopStateEvent) {\r\n  if (hasInteractiveRouter()) {\r\n    return;\r\n  }\r\n\r\n  performEnhancedPageLoad(location.href, /* interceptedLink */ false);\r\n}\r\n\r\nfunction onDocumentSubmit(event: SubmitEvent) {\r\n  if (hasInteractiveRouter() || event.defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  // We need to be careful not to interfere with existing interactive forms. As it happens, EventDelegator always\r\n  // uses a capturing event handler for 'submit', so it will necessarily run before this handler, and so we won't\r\n  // even get here if there's an interactive submit (because it will have set defaultPrevented which we check above).\r\n  // However if we ever change that, we would need to change this code to integrate properly with EventDelegator\r\n  // to make sure this handler only ever runs after interactive handlers.\r\n  const formElem = event.target;\r\n  if (formElem instanceof HTMLFormElement) {\r\n    if (!enhancedNavigationIsEnabledForForm(formElem)) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n\r\n    let url = new URL(formElem.action);\r\n    const fetchOptions: RequestInit = { method: formElem.method };\r\n    const formData = new FormData(formElem);\r\n  \r\n    const submitter = event.submitter as HTMLButtonElement;\r\n    if (submitter) {\r\n      if (submitter.name) {\r\n        // Replicate the normal behavior of appending the submitter name/value to the form data\r\n        formData.append(submitter.name, submitter.value);\r\n      }\r\n      if (submitter.getAttribute(\"formaction\") !== null) {\r\n        // Replicate the normal behavior of overriding action attribute of form element\r\n        url = new URL(submitter.formAction);\r\n      }\r\n    }\r\n\r\n    if (fetchOptions.method === 'get') { // method is always returned as lowercase\r\n      url.search = new URLSearchParams(formData as any).toString();\r\n\r\n      // For forms with method=get, we need to push a URL history entry equivalent to how it\r\n      // would be pushed for a native <form method=get> submission. This is also equivalent to\r\n      // how we push a URL history entry before starting enhanced page load on an <a> click.\r\n      history.pushState(null, /* ignored title */ '', url.toString());\r\n    } else {\r\n      fetchOptions.body = formData;\r\n    }\r\n\r\n    performEnhancedPageLoad(url.toString(), /* interceptedLink */ false, fetchOptions);\r\n  }\r\n}\r\n\r\nexport async function performEnhancedPageLoad(internalDestinationHref: string, interceptedLink: boolean, fetchOptions?: RequestInit) {\r\n  performingEnhancedPageLoad = true;\r\n\r\n  // First, stop any preceding enhanced page load\r\n  currentEnhancedNavigationAbortController?.abort();\r\n\r\n  // Notify any interactive runtimes that an enhanced navigation is starting\r\n  notifyEnhancedNavigationListners(internalDestinationHref, interceptedLink);\r\n\r\n  // Now request the new page via fetch, and a special header that tells the server we want it to inject\r\n  // framing boundaries to distinguish the initial document and each subsequent streaming SSR update.\r\n  currentEnhancedNavigationAbortController = new AbortController();\r\n  const abortSignal = currentEnhancedNavigationAbortController.signal;\r\n  const responsePromise = fetch(internalDestinationHref, Object.assign(<RequestInit>{\r\n    signal: abortSignal,\r\n    mode: 'no-cors', // If there's a redirection to an external origin, even if it enables CORS, we don't want to receive its content and patch it into our DOM on this origin\r\n    headers: {\r\n      // Because of no-cors, we can only send CORS-safelisted headers, so communicate the info about\r\n      // enhanced nav as a MIME type parameter\r\n      'accept': 'text/html; blazor-enhanced-nav=on',\r\n    },\r\n  }, fetchOptions));\r\n  let isNonRedirectedPostToADifferentUrlMessage: string | null = null;\r\n  await getResponsePartsWithFraming(responsePromise, abortSignal,\r\n    (response, initialContent) => {\r\n      const isGetRequest = !fetchOptions?.method || fetchOptions.method === 'get';\r\n      const isSuccessResponse = response.status >= 200 && response.status < 300;\r\n\r\n      // For true 301/302/etc redirections to external URLs, we'll receive an opaque response\r\n      // (even if it has CORS enabled, since we passed no-cors), and the browser won't disclose\r\n      // the target URL to JS code. We must therefore retry as a non-enhanced-nav page load to reach\r\n      // the destination. This also has the benefit that we can be certain not to introduce content\r\n      // from an external origin into the DOM here.\r\n      if (response.type === 'opaque') {\r\n        if (isGetRequest) {\r\n          retryEnhancedNavAsFullPageLoad(internalDestinationHref);\r\n          return;\r\n        } else {\r\n          throw new Error('Enhanced navigation does not support making a non-GET request to an endpoint that redirects to an external origin. Avoid enabling enhanced navigation for form posts that may perform external redirections.');\r\n        }\r\n      }\r\n\r\n      if (isSuccessResponse && response.headers.get('blazor-enhanced-nav') !== 'allow') {\r\n        // This appears to be a non-Blazor-Endpoint success response. We don't want to use enhanced nav\r\n        // because the content we receive is not designed to be patched into an existing frame,\r\n        // and may be incompatible with the Blazor JS that's already here.\r\n        // The reason we don't apply the same logic for non-success responses is that:\r\n        //  - We don't want to retry as then developers will get double-failures in logs\r\n        //  - We really want to show error pages to avoid losing vital debugging info\r\n        // ... and since error pages can be considered terminally fatal, we don't have to worry about\r\n        // whether the page has complex client-side behaviors that are incompatible with our JS.\r\n        if (isGetRequest) {\r\n          retryEnhancedNavAsFullPageLoad(internalDestinationHref);\r\n          return;\r\n        } else {\r\n          throw new Error('Enhanced navigation does not support making a non-GET request to a non-Blazor endpoint. Avoid enabling enhanced navigation for forms that post to a non-Blazor endpoint.');\r\n        }\r\n      }\r\n\r\n      // For 301/302/etc redirections to internal URLs, the browser will already have followed the chain of redirections\r\n      // to the end, and given us the final content. We do still need to update the current URL to match the final location,\r\n      // then let the rest of enhanced nav logic run to patch the new content into the DOM.\r\n      if (response.redirected) {\r\n        if (isGetRequest) {\r\n          // For gets, the intermediate (redirecting) URL is already in the address bar, so we have to use 'replace'\r\n          // so that 'back' would go to the page before the redirection\r\n          history.replaceState(null, '', response.url);\r\n        } else {\r\n          // For non-gets, we're still on the source page, so need to append a whole new history entry\r\n          history.pushState(null, '', response.url);\r\n        }\r\n        internalDestinationHref = response.url;\r\n      }\r\n\r\n      // For enhanced nav redirecting to an external URL, we'll get a special Blazor-specific redirection command\r\n      const externalRedirectionUrl = response.headers.get('blazor-enhanced-nav-redirect-location');\r\n      if (externalRedirectionUrl) {\r\n        location.replace(externalRedirectionUrl);\r\n        return;\r\n      }\r\n\r\n      if (!response.redirected && !isGetRequest && isSuccessResponse) {\r\n        // If this is the result of a form post that didn't trigger a redirection.\r\n        if (!isForSamePath(response)) {\r\n          // In this case we don't want to push the currentContentUrl to the history stack because we don't know if this is a location\r\n          // we can navigate back to (as we don't know if the location supports GET) and we are not able to replicate the Resubmit form?\r\n          // browser behavior.\r\n          // The only case where this is acceptable is when the last content URL, is the same as the URL for the form we posted to.\r\n          isNonRedirectedPostToADifferentUrlMessage = `Cannot perform enhanced form submission that changes the URL (except via a redirection), because then back/forward would not work. Either remove this form\\'s \\'action\\' attribute, or change its method to \\'get\\', or do not mark it as enhanced.\\nOld URL: ${location.href}\\nNew URL: ${response.url}`;\r\n        } else {\r\n          if (location.href !== currentContentUrl) {\r\n            // The url on the browser might be out of data, so push an entry to the stack to update the url in place.\r\n            history.pushState(null, '', currentContentUrl);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Set the currentContentUrl to the location of the last completed navigation.\r\n      currentContentUrl = response.url;\r\n\r\n      const responseContentType = response.headers.get('content-type');\r\n      if (responseContentType?.startsWith('text/html') && initialContent) {\r\n        // For HTML responses, regardless of the status code, display it\r\n        const parsedHtml = new DOMParser().parseFromString(initialContent, 'text/html');\r\n        synchronizeDomContent(document, parsedHtml);\r\n        navigationEnhancementCallbacks.documentUpdated();\r\n      } else if (responseContentType?.startsWith('text/') && initialContent) {\r\n        // For any other text-based content, we'll just display it, because that's what\r\n        // would happen if this was a non-enhanced request.\r\n        replaceDocumentWithPlainText(initialContent);\r\n      } else if (!isSuccessResponse && !initialContent) {\r\n        // For any non-success response that has no content at all, make up our own error UI\r\n        replaceDocumentWithPlainText(`Error: ${response.status} ${response.statusText}`);\r\n      } else {\r\n        // For any other response, it's not HTML and we don't know what to do. It might be plain text,\r\n        // or an image, or something else.\r\n        if (isGetRequest) {\r\n          // If it's a get request, we'll trust that it's idempotent and cheap enough to request\r\n          // a second time, so we can fall back on a full reload.\r\n          retryEnhancedNavAsFullPageLoad(internalDestinationHref);\r\n        } else {\r\n          // For non-get requests, we can't safely re-request, so just treat it as an error\r\n          replaceDocumentWithPlainText(`Error: ${fetchOptions.method} request to ${internalDestinationHref} returned non-HTML content of type ${responseContentType || 'unspecified'}.`);\r\n        }\r\n      }\r\n    },\r\n    (streamingElementMarkup) => {\r\n      const fragment = document.createRange().createContextualFragment(streamingElementMarkup);\r\n      while (fragment.firstChild) {\r\n        document.body.appendChild(fragment.firstChild);\r\n      }\r\n    });\r\n\r\n  if (!abortSignal.aborted) {\r\n    // The whole response including any streaming SSR is now finished, and it was not aborted (no other navigation\r\n    // has since started). So finally, recreate the native \"scroll to hash\" behavior.\r\n    const hashPosition = internalDestinationHref.indexOf('#');\r\n    if (hashPosition >= 0) {\r\n      const hash = internalDestinationHref.substring(hashPosition + 1);\r\n      const targetElem = document.getElementById(hash);\r\n      targetElem?.scrollIntoView();\r\n    }\r\n\r\n    performingEnhancedPageLoad = false;\r\n    navigationEnhancementCallbacks.enhancedNavigationCompleted();\r\n\r\n    // For non-GET requests, the destination has to be the same URL you're already on, or result in a redirection\r\n    // (post/redirect/get). You're not allowed to POST to a different URL without redirecting, because then back/forwards\r\n    // won't work - we can't recreate the \"Resubmit form?\" behavior.\r\n    // See https://github.com/dotnet/aspnetcore/issues/50945\r\n    // The reason we delay throwing until after SSR completes is that SSR might include a redirection signal. If we get\r\n    // here without navigating away, it's an error.\r\n    if (isNonRedirectedPostToADifferentUrlMessage) {\r\n      throw new Error(isNonRedirectedPostToADifferentUrlMessage);\r\n    }\r\n  }\r\n\r\n  function isForSamePath(response: Response) {\r\n    // We are trying to determine if the response URL is compatible with the last content URL that was successfully loaded on to\r\n    // the page.\r\n    // We are going to use the scheme, host, port and path to determine if they are compatible. We do not account for the query string\r\n    // as we want to allow for the query string to change. (Blazor doesn't use the query string for routing purposes).\r\n\r\n    const responseUrl = new URL(response.url);\r\n    const currentContentUrlParsed = new URL(currentContentUrl!);\r\n    return responseUrl.protocol === currentContentUrlParsed.protocol\r\n      && responseUrl.host === currentContentUrlParsed.host\r\n      && responseUrl.port === currentContentUrlParsed.port\r\n      && responseUrl.pathname === currentContentUrlParsed.pathname;\r\n  }\r\n}\r\n\r\nasync function getResponsePartsWithFraming(responsePromise: Promise<Response>, abortSignal: AbortSignal, onInitialDocument: (response: Response, initialDocumentText: string) => void, onStreamingElement: (streamingElementMarkup) => void) {\r\n  let response: Response;\r\n\r\n  try {\r\n    response = await responsePromise;\r\n\r\n    if (!response.body) { // Not sure how this can happen, but the TypeScript annotations suggest it can\r\n      onInitialDocument(response, '');\r\n      return;\r\n    }\r\n\r\n    const frameBoundary = response.headers.get('ssr-framing');\r\n    if (!frameBoundary) {\r\n      // Shouldn't happen, but perhaps some proxy stripped the headers. In that case we just won't respect streaming and will\r\n      // wait for the whole response.\r\n      const allResponseText = await response.text();\r\n      onInitialDocument(response, allResponseText);\r\n      return;\r\n    }\r\n\r\n    // This is going to be a framed response, so split it into chunks based on our framing boundaries\r\n    let isFirstFramedChunk = true;\r\n    await response.body\r\n      .pipeThrough(new TextDecoderStream())\r\n      .pipeThrough(splitStream(`<!--${frameBoundary}-->`))\r\n      .pipeTo(new WritableStream({\r\n        write(chunk) {\r\n          // Inside here, we know the chunks correspond precisely to frames within our message framing mechanism.\r\n          // The first one is always the initial document that we will merge into the existing DOM. All subsequent ones\r\n          // are blocks of <blazor-ssr>...</blazor-ssr> markup whose insertion would trigger a streaming SSR DOM update.\r\n          if (isFirstFramedChunk) {\r\n            isFirstFramedChunk = false;\r\n            onInitialDocument(response, chunk);\r\n          } else {\r\n            onStreamingElement(chunk);\r\n          }\r\n        }\r\n      }));\r\n  } catch (ex) {\r\n    if ((ex as Error).name === 'AbortError' && abortSignal.aborted) {\r\n      // Not an error. This happens if a different navigation started before this one completed.\r\n      return;\r\n    } else {\r\n      throw ex;\r\n    }\r\n  }\r\n}\r\n\r\nexport function replaceDocumentWithPlainText(text: string) {\r\n  document.documentElement.textContent = text;\r\n  const docStyle = document.documentElement.style;\r\n  docStyle.fontFamily = 'consolas, monospace';\r\n  docStyle.whiteSpace = 'pre-wrap';\r\n  docStyle.padding = '1rem';\r\n}\r\n\r\nfunction splitStream(frameBoundaryMarker: string) {\r\n  let buffer = '';\r\n\r\n  return new TransformStream({\r\n    transform(chunk, controller) {\r\n      buffer += chunk;\r\n\r\n      // Only call 'split' if we can see at least one marker, and only look for it within the new content (allowing for it to split over chunks)\r\n      if (buffer.indexOf(frameBoundaryMarker, buffer.length - chunk.length - frameBoundaryMarker.length) >= 0) {\r\n        const frames = buffer.split(frameBoundaryMarker);\r\n        frames.slice(0, -1).forEach(part => controller.enqueue(part));\r\n        buffer = frames[frames.length - 1];\r\n      }\r\n    },\r\n    flush(controller) {\r\n      controller.enqueue(buffer);\r\n    }\r\n  });\r\n}\r\n\r\nfunction enhancedNavigationIsEnabledForElement(element: HTMLElement): boolean {\r\n  // For links, they default to being enhanced, but you can override at any ancestor level (both positively and negatively)\r\n  const closestOverride = element.closest('[data-enhance-nav]');\r\n  if (closestOverride) {\r\n    const attributeValue = closestOverride.getAttribute('data-enhance-nav')!;\r\n    return attributeValue === '' || attributeValue.toLowerCase() === 'true';\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction enhancedNavigationIsEnabledForForm(form: HTMLFormElement): boolean {\r\n  // For forms, they default *not* to being enhanced, and must be enabled explicitly on the form element itself (not an ancestor).\r\n  const attributeValue = form.getAttribute('data-enhance');\r\n  return typeof (attributeValue) === 'string'\r\n    && attributeValue === '' || attributeValue?.toLowerCase() === 'true';\r\n}\r\n\r\nfunction retryEnhancedNavAsFullPageLoad(internalDestinationHref: string) {\r\n  // The ? trick here is the same workaround as described in #10839, and without it, the user\r\n  // would not be able to use the back button afterwards.\r\n  history.replaceState(null, '', internalDestinationHref + '?');\r\n  location.replace(internalDestinationHref);\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { SsrStartOptions } from '../Platform/SsrStartOptions';\r\nimport { NavigationEnhancementCallbacks, hasNeverStartedAnyEnhancedPageLoad, performEnhancedPageLoad, replaceDocumentWithPlainText } from '../Services/NavigationEnhancement';\r\nimport { isWithinBaseUriSpace, toAbsoluteUri } from '../Services/NavigationUtils';\r\nimport { synchronizeDomContent } from './DomMerging/DomSync';\r\n\r\nlet enableDomPreservation = true;\r\nlet navigationEnhancementCallbacks: NavigationEnhancementCallbacks;\r\n\r\nexport function attachStreamingRenderingListener(options: SsrStartOptions | undefined, callbacks: NavigationEnhancementCallbacks) {\r\n  navigationEnhancementCallbacks = callbacks;\r\n\r\n  if (options?.disableDomPreservation) {\r\n    enableDomPreservation = false;\r\n  }\r\n\r\n  // By the time <blazor-ssr-end> is in the DOM, we know all the preceding content within the same <blazor-ssr> is also there,\r\n  // so it's time to process it. We can't simply listen for <blazor-ssr>, because connectedCallback may fire before its content\r\n  // is present, and even listening for a later slotchange event doesn't work because the presence of <script> elements in the\r\n  // content can cause slotchange to fire before the rest of the content is added.\r\n  customElements.define('blazor-ssr-end', BlazorStreamingUpdate);\r\n}\r\n\r\nclass BlazorStreamingUpdate extends HTMLElement {\r\n  connectedCallback() {\r\n    const blazorSsrElement = this.parentNode!;\r\n\r\n    // Synchronously remove this from the DOM to minimize our chance of affecting anything else\r\n    blazorSsrElement.parentNode?.removeChild(blazorSsrElement);\r\n\r\n    // When this element receives content, if it's <template blazor-component-id=\"...\">...</template>,\r\n    // insert the template content into the DOM\r\n    blazorSsrElement.childNodes.forEach(node => {\r\n      if (node instanceof HTMLTemplateElement) {\r\n        const componentId = node.getAttribute('blazor-component-id');\r\n        if (componentId) {\r\n          // For enhanced nav page loads, we automatically cancel the response stream if another enhanced nav supersedes it. But there's\r\n          // no way to cancel the original page load. So, to avoid continuing to process <blazor-ssr> blocks from the original page load\r\n          // if an enhanced nav supersedes it, we must explicitly check whether this content is from the original page load, and if so,\r\n          // ignore it if any enhanced nav has started yet. Fixes https://github.com/dotnet/aspnetcore/issues/50733\r\n          const isFromEnhancedNav = node.getAttribute('enhanced-nav') === 'true';\r\n          if (isFromEnhancedNav || hasNeverStartedAnyEnhancedPageLoad()) {\r\n            insertStreamingContentIntoDocument(componentId, node.content);\r\n          }\r\n        } else {\r\n          switch (node.getAttribute('type')) {\r\n            case 'redirection':\r\n              // We use 'replace' here because it's closest to the non-progressively-enhanced behavior, and will make the most sense\r\n              // if the async delay was very short, as the user would not perceive having been on the intermediate page.\r\n              const destinationUrl = toAbsoluteUri(node.content.textContent!);\r\n              const isFormPost = node.getAttribute('from') === 'form-post';\r\n              const isEnhancedNav = node.getAttribute('enhanced') === 'true';\r\n              if (isEnhancedNav && isWithinBaseUriSpace(destinationUrl)) {\r\n                if (isFormPost) {\r\n                  // The URL is not yet updated. Push a whole new entry so that 'back' goes back to the pre-redirection location.\r\n                  history.pushState(null, '', destinationUrl);\r\n                } else {\r\n                  // The URL was already updated on the original link click. Replace so that 'back' goes to the pre-redirection location.\r\n                  history.replaceState(null, '', destinationUrl);\r\n                }\r\n                performEnhancedPageLoad(destinationUrl, /* interceptedLink */ false);\r\n              } else {\r\n                // Same reason for varying as above\r\n                if (isFormPost) {\r\n                  location.assign(destinationUrl);\r\n                } else {\r\n                  location.replace(destinationUrl);\r\n                }\r\n              }\r\n              break;\r\n            case 'error':\r\n              // This is kind of brutal but matches what happens without progressive enhancement\r\n              replaceDocumentWithPlainText(node.content.textContent || 'Error');\r\n              break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction insertStreamingContentIntoDocument(componentIdAsString: string, docFrag: DocumentFragment): void {\r\n  const markers = findStreamingMarkers(componentIdAsString);\r\n  if (markers) {\r\n    const { startMarker, endMarker } = markers;\r\n    if (enableDomPreservation) {\r\n      synchronizeDomContent({ startExclusive: startMarker, endExclusive: endMarker }, docFrag);\r\n    } else {\r\n      // In this mode we completely delete the old content before inserting the new content\r\n      const destinationRoot = endMarker.parentNode!;\r\n      const existingContent = new Range();\r\n      existingContent.setStart(startMarker, startMarker.textContent!.length);\r\n      existingContent.setEnd(endMarker, 0);\r\n      existingContent.deleteContents();\r\n\r\n      while (docFrag.childNodes[0]) {\r\n        destinationRoot.insertBefore(docFrag.childNodes[0], endMarker);\r\n      }\r\n    }\r\n\r\n    navigationEnhancementCallbacks.documentUpdated();\r\n  }\r\n}\r\n\r\nfunction findStreamingMarkers(componentIdAsString: string): { startMarker: Comment, endMarker: Comment } | null {\r\n  // Find start marker\r\n  const expectedStartText = `bl:${componentIdAsString}`;\r\n  const iterator = document.createNodeIterator(document, NodeFilter.SHOW_COMMENT);\r\n  let startMarker: Comment | null = null;\r\n  while (startMarker = iterator.nextNode() as Comment | null) {\r\n    if (startMarker.textContent === expectedStartText) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!startMarker) {\r\n    return null;\r\n  }\r\n\r\n  // Find end marker\r\n  const expectedEndText = `/bl:${componentIdAsString}`;\r\n  let endMarker: Comment | null = null;\r\n  while (endMarker = iterator.nextNode() as Comment | null) {\r\n    if (endMarker.textContent === expectedEndText) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return endMarker ? { startMarker, endMarker } : null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ComponentDescriptor, ComponentMarker, descriptorToMarker } from './ComponentDescriptorDiscovery';\r\nimport { isRendererAttached, registerRendererAttachedListener } from '../Rendering/WebRendererInteropMethods';\r\nimport { WebRendererId } from '../Rendering/WebRendererId';\r\nimport { DescriptorHandler } from '../Rendering/DomMerging/DomSync';\r\nimport { disposeCircuit, hasStartedServer, isCircuitAvailable, startCircuit, startServer, updateServerRootComponents } from '../Boot.Server.Common';\r\nimport { hasLoadedWebAssemblyPlatform, hasStartedLoadingWebAssemblyPlatform, hasStartedWebAssembly, isFirstUpdate, loadWebAssemblyPlatformIfNotStarted, resolveInitialUpdate, setWaitForRootComponents, startWebAssembly, updateWebAssemblyRootComponents, waitForBootConfigLoaded } from '../Boot.WebAssembly.Common';\r\nimport { MonoConfig } from 'dotnet';\r\nimport { RootComponentManager } from './RootComponentManager';\r\nimport { Blazor } from '../GlobalExports';\r\nimport { getRendererer } from '../Rendering/Renderer';\r\nimport { isPageLoading } from './NavigationEnhancement';\r\nimport { setShouldPreserveContentOnInteractiveComponentDisposal } from '../Rendering/BrowserRenderer';\r\nimport { LogicalElement } from '../Rendering/LogicalElements';\r\n\r\ntype RootComponentOperationBatch = {\r\n  batchId: number;\r\n  operations: RootComponentOperation[];\r\n}\r\n\r\ntype RootComponentOperation = RootComponentAddOperation | RootComponentUpdateOperation | RootComponentRemoveOperation;\r\n\r\ntype RootComponentAddOperation = {\r\n  type: 'add';\r\n  ssrComponentId: number;\r\n  marker: ComponentMarker;\r\n};\r\n\r\ntype RootComponentUpdateOperation = {\r\n  type: 'update';\r\n  ssrComponentId: number;\r\n  marker: ComponentMarker;\r\n};\r\n\r\ntype RootComponentRemoveOperation = {\r\n  type: 'remove';\r\n  ssrComponentId: number;\r\n};\r\n\r\ntype RootComponentInfo = {\r\n  descriptor: ComponentDescriptor;\r\n  ssrComponentId: number;\r\n  assignedRendererId?: WebRendererId;\r\n  uniqueIdAtLastUpdate?: number;\r\n  hasPendingRemoveOperation?: boolean;\r\n};\r\n\r\nexport class WebRootComponentManager implements DescriptorHandler, RootComponentManager</* InitialComponentsDescriptorType */ never> {\r\n  private readonly _rootComponentsBySsrComponentId = new Map<number, RootComponentInfo>();\r\n\r\n  private readonly _seenDescriptors = new Set<ComponentDescriptor>();\r\n\r\n  private readonly _pendingOperationBatches: { [batchId: number]: RootComponentOperationBatch } = {};\r\n\r\n  private _nextOperationBatchId = 1;\r\n\r\n  private _nextSsrComponentId = 1;\r\n\r\n  private _didWebAssemblyFailToLoadQuickly = false;\r\n\r\n  private _isComponentRefreshPending = false;\r\n\r\n  private _circuitInactivityTimeoutId: any;\r\n\r\n  // Implements RootComponentManager.\r\n  // An empty array becuase all root components managed\r\n  // by WebRootComponentManager are added and removed dynamically.\r\n  public readonly initialComponents: never[] = [];\r\n\r\n  public constructor(private readonly _circuitInactivityTimeoutMs: number) {\r\n    // After a renderer attaches, we need to activate any components that were\r\n    // previously skipped for interactivity.\r\n    registerRendererAttachedListener(() => {\r\n      this.rootComponentsMayRequireRefresh();\r\n    });\r\n  }\r\n\r\n  // Implements RootComponentManager.\r\n  public onAfterRenderBatch(browserRendererId: number): void {\r\n    if (browserRendererId === WebRendererId.Server) {\r\n      this.circuitMayHaveNoRootComponents();\r\n    }\r\n  }\r\n\r\n  public onDocumentUpdated() {\r\n    // Root components may have been added, updated, or removed.\r\n    this.rootComponentsMayRequireRefresh();\r\n  }\r\n\r\n  public onEnhancedNavigationCompleted() {\r\n    // Root components may now be ready for activation if they had been previously\r\n    // skipped for activation due to an enhanced navigation being underway.\r\n    this.rootComponentsMayRequireRefresh();\r\n  }\r\n\r\n  public registerComponent(descriptor: ComponentDescriptor) {\r\n    if (this._seenDescriptors.has(descriptor)) {\r\n      return;\r\n    }\r\n\r\n    if (descriptor.type === 'auto' || descriptor.type === 'webassembly') {\r\n      // Eagerly start loading the WebAssembly runtime, even though we're not\r\n      // activating the component yet. This is becuase WebAssembly resources\r\n      // may take a long time to load, so starting to load them now potentially reduces\r\n      // the time to interactvity.\r\n      this.startLoadingWebAssemblyIfNotStarted();\r\n    }\r\n\r\n    const ssrComponentId = this._nextSsrComponentId++;\r\n\r\n    this._seenDescriptors.add(descriptor);\r\n    this._rootComponentsBySsrComponentId.set(ssrComponentId, { descriptor, ssrComponentId });\r\n  }\r\n\r\n  private unregisterComponent(component: RootComponentInfo) {\r\n    this._seenDescriptors.delete(component.descriptor);\r\n    this._rootComponentsBySsrComponentId.delete(component.ssrComponentId);\r\n    this.circuitMayHaveNoRootComponents();\r\n  }\r\n\r\n  private async startLoadingWebAssemblyIfNotStarted() {\r\n    if (hasStartedLoadingWebAssemblyPlatform()) {\r\n      return;\r\n    }\r\n\r\n    setWaitForRootComponents();\r\n\r\n    const loadWebAssemblyPromise = loadWebAssemblyPlatformIfNotStarted();\r\n\r\n    // If WebAssembly resources can't be loaded within some time limit,\r\n    // we take note of this fact so that \"auto\" components fall back\r\n    // to using Blazor Server.\r\n    setTimeout(() => {\r\n      if (!hasLoadedWebAssemblyPlatform()) {\r\n        this.onWebAssemblyFailedToLoadQuickly();\r\n      }\r\n    }, Blazor._internal.loadWebAssemblyQuicklyTimeout);\r\n\r\n    const bootConfig = await waitForBootConfigLoaded();\r\n\r\n    if (!areWebAssemblyResourcesLikelyCached(bootConfig)) {\r\n      // Since WebAssembly resources aren't likely cached,\r\n      // they will probably need to be fetched over the network.\r\n      // Therefore, we can guess that Blazor WebAssembly won't\r\n      // load quickly, so we fall back to Blazor Server immediately,\r\n      // allowing \"auto\" components to become interactive sooner than if\r\n      // we were to wait for the timeout.\r\n      this.onWebAssemblyFailedToLoadQuickly();\r\n    }\r\n\r\n    await loadWebAssemblyPromise;\r\n\r\n    // Store the boot config resource hash in local storage\r\n    // so that we can detect during the next load that WebAssembly\r\n    // resources are cached.\r\n    cacheWebAssemblyResourceHash(bootConfig);\r\n\r\n    this.rootComponentsMayRequireRefresh();\r\n  }\r\n\r\n  private onWebAssemblyFailedToLoadQuickly() {\r\n    if (this._didWebAssemblyFailToLoadQuickly) {\r\n      return;\r\n    }\r\n\r\n    this._didWebAssemblyFailToLoadQuickly = true;\r\n    this.rootComponentsMayRequireRefresh();\r\n  }\r\n\r\n  private startCircutIfNotStarted() {\r\n    if (!hasStartedServer()) {\r\n      return startServer(this);\r\n    }\r\n\r\n    if (!isCircuitAvailable()) {\r\n      return startCircuit();\r\n    }\r\n  }\r\n\r\n  private async startWebAssemblyIfNotStarted() {\r\n    this.startLoadingWebAssemblyIfNotStarted();\r\n\r\n    if (!hasStartedWebAssembly()) {\r\n      await startWebAssembly(this);\r\n    }\r\n  }\r\n\r\n  // This function should be called each time we think an SSR update\r\n  // should be reflected in an interactive component renderer.\r\n  // Examples include component descriptors updating, document content changing,\r\n  // or an interactive renderer attaching for the first time.\r\n  private rootComponentsMayRequireRefresh() {\r\n    if (this._isComponentRefreshPending) {\r\n      return;\r\n    }\r\n\r\n    this._isComponentRefreshPending = true;\r\n\r\n    // The following timeout allows us to liberally call this function without\r\n    // taking the small performance hit from requent repeated calls to\r\n    // refreshRootComponents.\r\n    setTimeout(() => {\r\n      this._isComponentRefreshPending = false;\r\n      this.refreshRootComponents(this._rootComponentsBySsrComponentId.values());\r\n    }, 0);\r\n  }\r\n\r\n  private circuitMayHaveNoRootComponents() {\r\n    const isCircuitInUse = this.rendererHasExistingOrPendingComponents(WebRendererId.Server, 'server', 'auto');\r\n    if (isCircuitInUse) {\r\n      // Clear the timeout because we know the circuit is in use.\r\n      clearTimeout(this._circuitInactivityTimeoutId);\r\n      this._circuitInactivityTimeoutId = undefined;\r\n      return;\r\n    }\r\n\r\n    if (this._circuitInactivityTimeoutId !== undefined) {\r\n      // A timeout is already present, so we shouldn't reset it.\r\n      return;\r\n    }\r\n\r\n    // Start a new timeout to dispose the circuit unless it starts getting used.\r\n    this._circuitInactivityTimeoutId = setTimeout(() => {\r\n      if (!this.rendererHasExistingOrPendingComponents(WebRendererId.Server, 'server', 'auto')) {\r\n        disposeCircuit();\r\n        this._circuitInactivityTimeoutId = undefined;\r\n      }\r\n    }, this._circuitInactivityTimeoutMs) as unknown as number;\r\n  }\r\n\r\n  private rendererHasComponents(rendererId: WebRendererId): boolean {\r\n    const renderer = getRendererer(rendererId);\r\n    return renderer !== undefined && renderer.getRootComponentCount() > 0;\r\n  }\r\n\r\n  private rendererHasExistingOrPendingComponents(rendererId: WebRendererId, ...descriptorTypesToConsider: ComponentMarker['type'][]): boolean {\r\n    if (this.rendererHasComponents(rendererId)) {\r\n      return true;\r\n    }\r\n\r\n    // We consider SSR'd components on the page that may get activated using the specified renderer.\r\n    for (const { descriptor: { type }, assignedRendererId } of this._rootComponentsBySsrComponentId.values()) {\r\n      if (assignedRendererId === rendererId) {\r\n        // The component has been assigned to use the specified renderer.\r\n        return true;\r\n      }\r\n\r\n      if (assignedRendererId !== undefined) {\r\n        // The component has been assigned to use another renderer.\r\n        continue;\r\n      }\r\n\r\n      if (descriptorTypesToConsider.indexOf(type) !== -1) {\r\n        // The component has not been assigned a renderer yet, but it might get activated with the specified renderer\r\n        // if it doesn't get removed from the page.\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private refreshRootComponents(components: Iterable<RootComponentInfo>) {\r\n    const operationsByRendererId = new Map<WebRendererId, RootComponentOperation[]>();\r\n\r\n    for (const component of components) {\r\n      const operation = this.determinePendingOperation(component);\r\n      if (!operation) {\r\n        continue;\r\n      }\r\n\r\n      const rendererId = component.assignedRendererId;\r\n      if (!rendererId) {\r\n        throw new Error('Descriptors must be assigned a renderer ID before getting used as root components');\r\n      }\r\n\r\n      let operations = operationsByRendererId.get(rendererId);\r\n      if (!operations) {\r\n        operations = [];\r\n        operationsByRendererId.set(rendererId, operations);\r\n      }\r\n\r\n      operations.push(operation);\r\n    }\r\n\r\n    for (const [rendererId, operations] of operationsByRendererId) {\r\n      const batch: RootComponentOperationBatch = {\r\n        batchId: this._nextOperationBatchId++,\r\n        operations,\r\n      };\r\n      this._pendingOperationBatches[batch.batchId] = batch;\r\n      const batchJson = JSON.stringify(batch);\r\n\r\n      if (rendererId === WebRendererId.Server) {\r\n        updateServerRootComponents(batchJson);\r\n      } else {\r\n        this.updateWebAssemblyRootComponents(batchJson);\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateWebAssemblyRootComponents(operationsJson: string) {\r\n    if (isFirstUpdate()) {\r\n      resolveInitialUpdate(operationsJson);\r\n    } else {\r\n      updateWebAssemblyRootComponents(operationsJson);\r\n    }\r\n  }\r\n\r\n  private resolveRendererIdForDescriptor(descriptor: ComponentDescriptor): WebRendererId | null {\r\n    const resolvedType = descriptor.type === 'auto' ? this.getAutoRenderMode() : descriptor.type;\r\n    switch (resolvedType) {\r\n      case 'server':\r\n        this.startCircutIfNotStarted();\r\n        return WebRendererId.Server;\r\n      case 'webassembly':\r\n        this.startWebAssemblyIfNotStarted();\r\n        return WebRendererId.WebAssembly;\r\n      case null:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  private getAutoRenderMode(): 'webassembly' | 'server' | null {\r\n    // If WebAssembly components exist or may exist soon, use WebAssembly.\r\n    if (this.rendererHasExistingOrPendingComponents(WebRendererId.WebAssembly, 'webassembly')) {\r\n      return 'webassembly';\r\n    }\r\n\r\n    // If Server components exist or may exist soon, use WebAssembly.\r\n    if (this.rendererHasExistingOrPendingComponents(WebRendererId.Server, 'server')) {\r\n      return 'server';\r\n    }\r\n\r\n    // If no interactive components are on the page, we use WebAssembly\r\n    // if the WebAssembly runtime has loaded. Otherwise, we'll wait to activate\r\n    // root components until we determine whether the WebAssembly runtime can be\r\n    // loaded quickly.\r\n    if (hasLoadedWebAssemblyPlatform()) {\r\n      return 'webassembly';\r\n    }\r\n\r\n    if (this._didWebAssemblyFailToLoadQuickly) {\r\n      return 'server';\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private determinePendingOperation(component: RootComponentInfo): RootComponentOperation | null {\r\n    if (isDescriptorInDocument(component.descriptor)) {\r\n      if (component.assignedRendererId === undefined) {\r\n        // We haven't added this component for interactivity yet.\r\n        if (isPageLoading()) {\r\n          // We don't add new components while the page is loading or while\r\n          // enhanced navigation is underway.\r\n          return null;\r\n        }\r\n\r\n        const rendererId = this.resolveRendererIdForDescriptor(component.descriptor);\r\n        if (rendererId === null) {\r\n          // The renderer ID for the component has not been decided yet,\r\n          // probably because the component has an \"auto\" render mode.\r\n          return null;\r\n        }\r\n\r\n        if (!isRendererAttached(rendererId)) {\r\n          // The renderer for this descriptor is not attached, so we'll no-op.\r\n          // After the renderer attaches, we'll handle this descriptor again if\r\n          // it's still in the document.\r\n          return null;\r\n        }\r\n\r\n        // .NET may dispose and re-initialize the interactive component as a result of a future 'update' operation.\r\n        // This call prevents the component's content from being deleted from the DOM between the disposal\r\n        // and subsequent re-initialization.\r\n        setShouldPreserveContentOnInteractiveComponentDisposal(component.descriptor.start as unknown as LogicalElement, true);\r\n\r\n        component.assignedRendererId = rendererId;\r\n        component.uniqueIdAtLastUpdate = component.descriptor.uniqueId;\r\n        return { type: 'add', ssrComponentId: component.ssrComponentId, marker: descriptorToMarker(component.descriptor) };\r\n      } else {\r\n        if (!isRendererAttached(component.assignedRendererId)) {\r\n          // The renderer for this descriptor is not attached, so we'll no-op.\r\n          // After the renderer attaches, we'll handle this descriptor again if\r\n          // it's still in the document.\r\n          return null;\r\n        }\r\n\r\n        // The component has already been added for interactivity.\r\n        if (component.uniqueIdAtLastUpdate === component.descriptor.uniqueId) {\r\n          // The descriptor has not changed since the last update.\r\n          // Nothing to do.\r\n          return null;\r\n        }\r\n\r\n        // The descriptor has changed since it was last updated, so we'll update the component's parameters.\r\n        component.uniqueIdAtLastUpdate = component.descriptor.uniqueId;\r\n        return { type: 'update', ssrComponentId: component.ssrComponentId, marker: descriptorToMarker(component.descriptor) };\r\n      }\r\n    } else {\r\n      if (component.hasPendingRemoveOperation) {\r\n        // The component is already being disposed, so there's nothing left to do.\r\n        return null;\r\n      }\r\n\r\n      if (component.assignedRendererId === undefined) {\r\n        // The component was removed from the document before it was assigned to a renderer,\r\n        // so we don't have to notify .NET that anything has changed.\r\n        this.unregisterComponent(component);\r\n        return null;\r\n      }\r\n\r\n      if (!isRendererAttached(component.assignedRendererId)) {\r\n        // The component was already assigned a renderer, but that renderer is no longer attached.\r\n        // After the renderer attaches, we'll handle the removal of this descriptor again.\r\n        return null;\r\n      }\r\n\r\n      // Since the component will be getting completedly diposed from .NET (rather than replaced by another component, which can\r\n      // happen as a result of an 'update' operation), we indicate that its content should no longer be preserved on disposal.\r\n      setShouldPreserveContentOnInteractiveComponentDisposal(component.descriptor.start as unknown as LogicalElement, false);\r\n\r\n      // This component was removed from the document and we've assigned a renderer ID,\r\n      // so we'll dispose it in .NET.\r\n      component.hasPendingRemoveOperation = true;\r\n      return { type: 'remove', ssrComponentId: component.ssrComponentId };\r\n    }\r\n  }\r\n\r\n  public resolveRootComponent(ssrComponentId: number): ComponentDescriptor {\r\n    const component = this._rootComponentsBySsrComponentId.get(ssrComponentId);\r\n    if (!component) {\r\n      throw new Error(`Could not resolve a root component with SSR component ID '${ssrComponentId}'.`);\r\n    }\r\n\r\n    return component.descriptor;\r\n  }\r\n\r\n  public onAfterUpdateRootComponents(batchId: number): void {\r\n    const batch = this._pendingOperationBatches[batchId];\r\n    delete this._pendingOperationBatches[batchId];\r\n\r\n    for (const operation of batch.operations) {\r\n      switch (operation.type) {\r\n        case 'remove': {\r\n          // We can stop tracking this component now that .NET has acknowedged its removal.\r\n          const component = this._rootComponentsBySsrComponentId.get(operation.ssrComponentId);\r\n          if (component) {\r\n            this.unregisterComponent(component);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction isDescriptorInDocument(descriptor: ComponentDescriptor): boolean {\r\n  return document.contains(descriptor.start);\r\n}\r\n\r\nfunction areWebAssemblyResourcesLikelyCached(config: MonoConfig): boolean {\r\n  if (!config.cacheBootResources) {\r\n    return false;\r\n  }\r\n\r\n  const hash = getWebAssemblyResourceHash(config);\r\n  if (!hash) {\r\n    return false;\r\n  }\r\n\r\n  const existingHash = window.localStorage.getItem(hash.key);\r\n  return hash.value === existingHash;\r\n}\r\n\r\nfunction cacheWebAssemblyResourceHash(config: MonoConfig) {\r\n  const hash = getWebAssemblyResourceHash(config);\r\n  if (hash) {\r\n    window.localStorage.setItem(hash.key, hash.value);\r\n  }\r\n}\r\n\r\nfunction getWebAssemblyResourceHash(config: MonoConfig): { key: string, value: string } | null {\r\n  const hash = config.resources?.hash;\r\n  const mainAssemblyName = config.mainAssemblyName;\r\n  if (!hash || !mainAssemblyName) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    key: `blazor-resource-hash:${mainAssemblyName}`,\r\n    value: hash,\r\n  };\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IBlazor } from '../GlobalExports';\r\n\r\n// The base Blazor event type.\r\n// Properties listed here get assigned by the event registry in 'dispatchEvent'.\r\ninterface BlazorEvent {\r\n  type: keyof BlazorEventMap;\r\n}\r\n\r\n// Maps Blazor event names to the argument type passed to registered listeners.\r\nexport interface BlazorEventMap {\r\n  'enhancedload': BlazorEvent;\r\n}\r\n\r\nexport class JSEventRegistry {\r\n  private readonly _eventListeners = new Map<string, Set<(ev: any) => void>>();\r\n\r\n  static create(blazor: IBlazor): JSEventRegistry {\r\n    const result = new JSEventRegistry();\r\n    blazor.addEventListener = result.addEventListener.bind(result);\r\n    blazor.removeEventListener = result.removeEventListener.bind(result);\r\n    return result;\r\n  }\r\n\r\n  public addEventListener<K extends keyof BlazorEventMap>(type: K, listener: (ev: BlazorEventMap[K]) => void): void {\r\n    let listenersForEventType = this._eventListeners.get(type);\r\n    if (!listenersForEventType) {\r\n      listenersForEventType = new Set();\r\n      this._eventListeners.set(type, listenersForEventType);\r\n    }\r\n\r\n    listenersForEventType.add(listener);\r\n  }\r\n\r\n  public removeEventListener<K extends keyof BlazorEventMap>(type: K, listener: (ev: BlazorEventMap[K]) => void): void {\r\n    this._eventListeners.get(type)?.delete(listener);\r\n  }\r\n\r\n  public dispatchEvent<K extends keyof BlazorEventMap>(type: K, ev: Omit<BlazorEventMap[K], keyof BlazorEvent>): void {\r\n    const listenersForEventType = this._eventListeners.get(type);\r\n    if (!listenersForEventType) {\r\n      return;\r\n    }\r\n\r\n    const event: BlazorEventMap[K] = {\r\n      ...ev,\r\n      type,\r\n    };\r\n\r\n    for (const listener of listenersForEventType) {\r\n      listener(event);\r\n    }\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Currently this only deals with inserting streaming content into the DOM.\r\n// Later this will be expanded to include:\r\n//  - Progressive enhancement of navigation and form posting\r\n//  - Preserving existing DOM elements in all the above\r\n//  - The capabilities of Boot.Server.ts and Boot.WebAssembly.ts to handle insertion\r\n//    of interactive components\r\n\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\nimport { setCircuitOptions } from './Boot.Server.Common';\r\nimport { hasStartedWebAssembly, setWebAssemblyOptions } from './Boot.WebAssembly.Common';\r\nimport { shouldAutoStart } from './BootCommon';\r\nimport { Blazor } from './GlobalExports';\r\nimport { WebStartOptions } from './Platform/WebStartOptions';\r\nimport { attachStreamingRenderingListener } from './Rendering/StreamingRendering';\r\nimport { NavigationEnhancementCallbacks, attachProgressivelyEnhancedNavigationListener } from './Services/NavigationEnhancement';\r\nimport { WebRootComponentManager } from './Services/WebRootComponentManager';\r\nimport { hasProgrammaticEnhancedNavigationHandler, performProgrammaticEnhancedNavigation } from './Services/NavigationUtils';\r\nimport { attachComponentDescriptorHandler, registerAllComponentDescriptors } from './Rendering/DomMerging/DomSync';\r\nimport { JSEventRegistry } from './Services/JSEventRegistry';\r\nimport { fetchAndInvokeInitializers } from './JSInitializers/JSInitializers.Web';\r\nimport { ConsoleLogger } from './Platform/Logging/Loggers';\r\nimport { LogLevel, Logger } from './Platform/Logging/Logger';\r\nimport { resolveOptions } from './Platform/Circuits/CircuitStartOptions';\r\nimport { JSInitializer } from './JSInitializers/JSInitializers';\r\n\r\nlet hydrated = false;\r\nlet started = false;\r\nlet rootComponentManager: WebRootComponentManager;\r\n\r\nfunction registerHydrationEvents(logger: Logger) {\r\n\r\n  // check if there are any interactive components which should hydrate on browser idle\r\n  const hydrateOnLoad = document.querySelectorAll('[client=load]');\r\n  if (hydrateOnLoad.length > 0) {\r\n    // immediately hydrate all interactive components\r\n    if (Blazor) {\r\n      Blazor.blazekit.loadComponents();\r\n    } else {\r\n      logger.log(LogLevel.Critical, '⚠️ Cannot hydrate interactive components because Blazor is not defined');\r\n    }\r\n\r\n    // we are done here because the runtime will be loaded and all components will be hydrated\r\n    return;\r\n  }\r\n\r\n  // check if there are any interactive components which should hydrate on browser idle\r\n  const hydrateOnIdle = document.querySelectorAll('[client=idle]');\r\n  if (hydrateOnIdle.length > 0) {\r\n    // hook up a callback for when the browser is idle\r\n    window.requestIdleCallback(() => {\r\n      // hydrate all interactive components\r\n      if (Blazor) {\r\n        Blazor.blazekit.loadComponents();\r\n      } else {\r\n        logger.log(LogLevel.Critical, '⚠️ Cannot hydrate interactive components because Blazor is not defined');\r\n      }\r\n      // hydrateInteractiveComponents(logger);\r\n    });\r\n\r\n    // we are done here because the runtime will be loaded and components with client=hover will be hydrated as well due to the idle event\r\n    return;\r\n  }\r\n\r\n  // no idle components, so we need to find interactive components to hydrate on hover\r\n  document.querySelectorAll('[client=hover]').forEach((elem) => {\r\n    logger.log(LogLevel.Trace, '🧏 Adding hover listener');\r\n    elem.addEventListener('mouseover', (_) => {\r\n      if (Blazor) {\r\n        Blazor.blazekit.loadComponents();\r\n      } else {\r\n        logger.log(LogLevel.Critical, '⚠️ Cannot hydrate interactive components because Blazor is not defined');\r\n      }\r\n    });\r\n  });\r\n\r\n  // add hydration on visible, we will use intersection observer for this\r\n  const observer = new IntersectionObserver((entries) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.isIntersecting) {\r\n        if (Blazor) {\r\n          Blazor.blazekit.loadComponents();\r\n        } else {\r\n          logger.log(LogLevel.Critical, '⚠️ Cannot hydrate interactive components because Blazor is not defined');\r\n        }\r\n        observer.unobserve(entry.target);\r\n      }\r\n    });\r\n  });\r\n\r\n  document.querySelectorAll('[client=visible]').forEach((elem) => {\r\n    logger.log(LogLevel.Trace, '🧏 Adding visible listener');\r\n    observer.observe(elem);\r\n  });\r\n}\r\n\r\n// Private helper to re-execute scripts\r\nfunction replaceAndRunScript(oldScript: HTMLScriptElement): void {\r\n  const newScript = document.createElement('script');\r\n  const attrs = Array.from(oldScript.attributes);\r\n  for (const { name, value } of attrs) {\r\n    newScript[name] = value;\r\n  }\r\n  newScript.append(oldScript.textContent as string);\r\n  oldScript.replaceWith(newScript);\r\n}\r\n\r\n/**\r\n * Runs JS in the fetched document\r\n * head scripts will only run with data-reload attr\r\n * all body scripts will run\r\n */\r\nexport function runScripts(): void {\r\n  // Run scripts with data-reload attr\r\n  const headScripts = document.head.querySelectorAll<HTMLScriptElement>('script[data-reload]');\r\n  headScripts.forEach(replaceAndRunScript);\r\n\r\n  // Run scripts in body\r\n  const bodyScripts = document.body.querySelectorAll<HTMLScriptElement>('script[data-reload]');\r\n  bodyScripts.forEach(replaceAndRunScript);\r\n}\r\n\r\nfunction boot(options?: Partial<WebStartOptions>) : Promise<void> {\r\n  if (started) {\r\n    throw new Error('Blazor has already started.');\r\n  }\r\n\r\n  started = true;\r\n  options = options || {};\r\n  options.logLevel ??= LogLevel.Error;\r\n  Blazor._internal.loadWebAssemblyQuicklyTimeout = 3000;\r\n  Blazor._internal.isBlazorWeb = true;\r\n\r\n\r\n  Blazor.blazekit = {\r\n    loadComponents: () => {\r\n      if (!hydrated) {\r\n        hydrated = true;\r\n        const initialCircuitOptions = resolveOptions(options?.circuit || {});\r\n        options!.circuit = initialCircuitOptions;\r\n        const logger = new ConsoleLogger(initialCircuitOptions.logLevel);\r\n        const initializersPromise = fetchAndInvokeInitializers(options!, logger);\r\n        setCircuitOptions(resolveConfiguredOptions(initializersPromise, initialCircuitOptions));\r\n        setWebAssemblyOptions(resolveConfiguredOptions(initializersPromise, options?.webAssembly || {}));\r\n\r\n        registerAllComponentDescriptors(document);\r\n        rootComponentManager.onDocumentUpdated();\r\n      }\r\n    },\r\n    hasWebAssemblyStarted: hasStartedWebAssembly,\r\n  };\r\n\r\n  // Defined here to avoid inadvertently imported enhanced navigation\r\n  // related APIs in WebAssembly or Blazor Server contexts.\r\n  Blazor._internal.hotReloadApplied = () => {\r\n    if (hasProgrammaticEnhancedNavigationHandler()) {\r\n      performProgrammaticEnhancedNavigation(location.href, true);\r\n    }\r\n  };\r\n\r\n  rootComponentManager = new WebRootComponentManager(options?.ssr?.circuitInactivityTimeoutMs ?? 2000);\r\n  const jsEventRegistry = JSEventRegistry.create(Blazor);\r\n\r\n  const navigationEnhancementCallbacks: NavigationEnhancementCallbacks = {\r\n    documentUpdated: () => {\r\n      // console.debug('Document updated. Hydrated:', hydrated);\r\n      if (hydrated) {\r\n        rootComponentManager.onDocumentUpdated();\r\n      }\r\n      jsEventRegistry.dispatchEvent('enhancedload', {});\r\n    },\r\n    enhancedNavigationCompleted() {\r\n      // console.debug('Enhanced navigation completed. Hydrated:', hydrated);\r\n      if (hydrated) {\r\n        rootComponentManager.onEnhancedNavigationCompleted();\r\n      }\r\n\r\n      // run scripts\r\n      runScripts();\r\n    },\r\n  };\r\n\r\n  attachComponentDescriptorHandler(rootComponentManager);\r\n  attachStreamingRenderingListener(options?.ssr, navigationEnhancementCallbacks);\r\n\r\n  if (!options?.ssr?.disableDomPreservation) {\r\n    attachProgressivelyEnhancedNavigationListener(navigationEnhancementCallbacks);\r\n  }\r\n\r\n  // Wait until the initial page response completes before activating interactive components.\r\n  // If stream rendering is used, this helps to ensure that only the final set of interactive\r\n  // components produced by the stream render actually get activated for interactivity.\r\n  if (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', onInitialDomContentLoaded.bind(null, options));\r\n  } else {\r\n    onInitialDomContentLoaded(options);\r\n  }\r\n\r\n  return Promise.resolve();\r\n}\r\n\r\nfunction onInitialDomContentLoaded(options: Partial<WebStartOptions>) {\r\n  const logger = new ConsoleLogger(options?.logLevel ?? LogLevel.Information);\r\n\r\n  window.addEventListener('blazor:framework:loaded', () => {\r\n    logger.log(LogLevel.Trace, '🚀 Blazor framework loaded');\r\n    const loader = document.getElementById('blazor-loader');\r\n    if (loader) {\r\n      loader.remove();\r\n    }\r\n  });\r\n\r\n  registerHydrationEvents(logger);\r\n\r\n  if (Blazor) {\r\n    window['Blazor'].addEventListener('enhancedload', (_) => {\r\n      logger.log(LogLevel.Trace, 'Enhanced load event fired');\r\n      registerHydrationEvents(logger);\r\n    });\r\n  } else {\r\n    logger.log(LogLevel.Critical, '⚠️ Cannot add event listeners because Blazor is not defined');\r\n  }\r\n\r\n  // Retrieve and start invoking the initializers.\r\n  // Blazor server options get defaults that are configured before we invoke the initializers\r\n  // so we do the same here.\r\n  // const initialCircuitOptions = resolveOptions(options?.circuit || {});\r\n  // options.circuit = initialCircuitOptions;\r\n  // const logger = new ConsoleLogger(initialCircuitOptions.logLevel);\r\n  // const initializersPromise = fetchAndInvokeInitializers(options, logger);\r\n  // setCircuitOptions(resolveConfiguredOptions(initializersPromise, initialCircuitOptions));\r\n  // setWebAssemblyOptions(resolveConfiguredOptions(initializersPromise, options?.webAssembly || {}));\r\n\r\n  // registerAllComponentDescriptors(document);\r\n  // rootComponentManager.onDocumentUpdated();\r\n\r\n  // callAfterStartedCallbacks(initializersPromise);\r\n}\r\n\r\nasync function resolveConfiguredOptions<TOptions>(initializers: Promise<JSInitializer>, options: TOptions): Promise<TOptions> {\r\n  await initializers;\r\n  return options;\r\n}\r\n\r\nasync function callAfterStartedCallbacks(initializersPromise: Promise<JSInitializer>): Promise<void> {\r\n  const initializers = await initializersPromise;\r\n  await initializers.invokeAfterStartedCallbacks(Blazor);\r\n}\r\n\r\nBlazor.start = boot;\r\nwindow['DotNet'] = DotNet;\r\n\r\nif (shouldAutoStart()) {\r\n  boot();\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { Logger } from '../Platform/Logging/Logger';\r\nimport { WebStartOptions } from '../Platform/WebStartOptions';\r\nimport { discoverWebInitializers } from '../Services/ComponentDescriptorDiscovery';\r\nimport { JSInitializer } from './JSInitializers';\r\n\r\nexport async function fetchAndInvokeInitializers(options: Partial<WebStartOptions>, logger: Logger) : Promise<JSInitializer> {\r\n  const initializersElement = discoverWebInitializers(document);\r\n  if (!initializersElement) {\r\n    return new JSInitializer(false, logger);\r\n  }\r\n  const initializers: string[] = JSON.parse(atob(initializersElement)) as string[] ?? [];\r\n  const jsInitializer = new JSInitializer(false, logger);\r\n  await jsInitializer.importInitializersAsync(initializers, [options]);\r\n  return jsInitializer;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Tells you if the script was added without <script src=\"...\" autostart=\"false\"></script>\r\nexport function shouldAutoStart(): boolean {\r\n  return !!(document &&\r\n    document.currentScript &&\r\n    document.currentScript.getAttribute('autostart') !== 'false');\r\n}\r\n"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","g","globalThis","this","Function","e","window","DotNet","EditType","FrameType","jsonRevivers","jsObjectIdKey","dotNetObjectRefKey","byteArrayRefKey","dotNetStreamRefKey","jsStreamReferenceLengthKey","defaultCallDispatcher","currentCallDispatcher","JSObject","constructor","_jsObject","_cachedFunctions","Map","findFunction","identifier","cachedFunction","get","lastSegmentValue","result","split","forEach","segment","Error","bind","set","getWrappedObject","cachedJSObjectsById","url","startsWith","URL","substr","document","baseURI","toString","import","JSCallResultType","nextJsObjectId","attachReviver","reviver","push","createJSObjectReference","jsObject","createJSStreamReference","streamReference","length","ArrayBuffer","Uint8Array","Blob","size","buffer","byteLength","jsObjectReference","error","parseJsonWithRevivers","callDispatcher","json","JSON","parse","key","initialValue","reduce","latestValue","getDefaultCallDispatcher","attachDispatcher","dotNetCallDispatcher","CallDispatcher","invokeMethod","assemblyName","methodIdentifier","args","invokeDotNetStaticMethod","invokeMethodAsync","invokeDotNetStaticMethodAsync","disposeJSObjectReference","id","disposeJSObjectReferenceById","_dotNetCallDispatcher","_byteArraysToBeRevived","_pendingDotNetToJSStreams","_pendingAsyncCalls","_nextAsyncCallId","getDotNetCallDispatcher","invokeJSFromDotNet","argsJson","resultType","targetInstanceId","createJSCallResult","findJSFunction","jsFunction","stringifyArgs","beginInvokeJSFromDotNet","asyncHandle","promise","Promise","resolve","then","endInvokeJSFromDotNet","stringify","formatError","endInvokeDotNetFromJS","asyncCallId","success","resultJsonOrExceptionMessage","resultOrError","completePendingCall","parseInt","invokeDotNetMethod","invokeDotNetMethodAsync","dotNetObjectId","invokeDotNetFromJS","resultJson","resultPromise","reject","beginInvokeDotNetFromJS","ex","receiveByteArray","data","processByteArray","delete","supplyDotNetStream","streamId","stream","has","pendingStream","PendingStream","getDotNetStreamPromise","streamPromise","hasOwnProperty","asyncCall","message","stack","targetInstance","DotNetObject","_id","_callDispatcher","dispose","catch","console","serializeAsArg","value","index","byteArray","DotNetStream","_streamPromise","async","Response","arrayBuffer","returnValue","Default","JSObjectReference","JSStreamReference","JSVoidResult","nextByteArrayIndex","argReplacer","sendByteArray","jsonValue","EventFieldInfo","componentId","fieldValue","static","event","elem","target","Element","fieldData","HTMLInputElement","type","toLowerCase","checked","HTMLSelectElement","HTMLTextAreaElement","getFormFieldData","eventTypeRegistry","browserEventNamesToAliases","eventNameAliasRegisteredCallbacks","getEventTypeOptions","eventName","getBrowserEventName","possibleAliasEventName","eventOptions","browserEventName","registerBuiltInEventType","eventNames","options","parseTouch","touchList","touches","i","touch","clientX","clientY","screenX","screenY","pageX","pageY","parseMouseEvent","detail","offsetX","offsetY","movementX","movementY","button","buttons","ctrlKey","shiftKey","altKey","metaKey","createEventArgs","element","timeBasedInputs","indexOf","getAttribute","isTimeBasedInput","normalizedValue","normalizeTimeBasedValue","isMultipleSelectInput","selectElement","Array","from","filter","option","selected","map","targetIsCheckbox","tagName","isCheckbox","parseDragEvent","dataTransfer","dropEffect","effectAllowed","files","f","name","items","kind","types","parseKeyboardEvent","code","location","repeat","parseErrorEvent","filename","lineno","colno","parseProgressEvent","lengthComputable","loaded","total","parseTouchEvent","targetTouches","changedTouches","parsePointerEvent","pointerId","width","height","pressure","tiltX","tiltY","pointerType","isPrimary","parseWheelEvent","deltaX","deltaY","deltaZ","deltaMode","pendingRootComponentContainers","manager","jsComponentParametersByIdentifier","nextPendingDynamicRootComponentIdentifier","RootComponentsFunctions","toElement","componentIdentifier","initialParameters","containerIdentifier","getRequiredManager","component","DynamicRootComponent","setParameters","getAndRemovePendingRootComponentContainer","container","EventCallbackWrapper","invoke","arg","_callback","setCallback","callback","_selfJSObjectReference","getJSObjectReference","parameters","_jsEventCallbackWrappers","_componentId","parameter","mappedParameters","entries","Object","parameterCount","callbackWrapper","jsEventCallbackWrapper","values","interopMethodsByRenderer","rendererAttachedListeners","rendererByIdResolverMap","attachWebRendererInterop","rendererId","interopMethods","jsComponentParameters","jsComponentInitializers","keys","managerInstance","initializerIdentifier","componentIdentifiers","initializerFunc","enableJSRootComponents","getInteropMethods","browserRendererId","listener","invokeRendererAttachedListeners","isRendererAttached","dispatchEvent","eventDescriptor","eventArgs","dispatchEventMiddleware","eventHandlerId","continuation","nonBubblingEvents","toLookup","alwaysPreventDefaultEvents","submit","disableableEventNames","EventDelegator","afterClickCallbacks","eventDelegatorId","nextEventDelegatorId","eventsCollectionKey","eventInfoStore","EventInfoStore","onGlobalEvent","setListener","renderingComponentId","infoForElement","getEventHandlerInfosForElement","existingHandler","getHandler","update","newInfo","add","setHandler","removeListener","info","remove","elementEventInfos","removeHandler","notifyAfterClick","addGlobalListener","setStopPropagation","stopPropagation","setPreventDefault","preventDefault","evt","dispatchGlobalEventToAllElements","eventNameAliases","alias","browserEvent","path","composedPath","candidateEventTarget","shift","eventArgsIsPopulated","eventIsNonBubbling","prototype","call","stopPropagationWasRequested","candidateElement","handlerInfos","handlerInfo","rawBrowserEventName","HTMLButtonElement","disabled","eventOptionsIfRegistered","eventFieldInfo","fromEvent","createIfNeeded","EventHandlerInfosForElement","globalListener","infosByEventHandlerId","countByEventName","handleEventNameAliasAdded","useCapture","addEventListener","oldEventHandlerId","newEventHandlerId","removeEventListener","aliasEventName","countByAliasEventName","handlers","preventDefaultFlags","stopPropagationFlags","handler","setValue","logicalChildrenPropname","Symbol","logicalParentPropname","logicalRootDescriptorPropname","toLogicalRootCommentElement","descriptor","start","end","existingDescriptor","parent","parentNode","textContent","parentLogicalElement","toLogicalElement","children","getLogicalChildrenArray","startLogicalElement","rootCommentChildren","startNextChildIndex","lastMovedChild","childToMove","splice","allowExistingContents","childrenArray","childNodes","child","childLogicalElement","emptyLogicalElement","removeLogicalChild","createAndInsertLogicalContainer","childIndex","containerElement","createComment","insertLogicalChild","childAsLogicalElement","nodeToInsert","isLogicalElement","lastNodeToInsert","findLastDomNodeInRange","range","Range","setStartBefore","setEndAfter","extractContents","existingLogicalParent","getLogicalParent","existingSiblingArray","existingChildIndex","newSiblings","nextSibling","insertBefore","appendDomNode","childToRemove","Comment","grandchildrenArray","domNodeToRemove","removeChild","getLogicalChild","getLogicalRootDescriptor","isSvgElement","closestElement","getClosestDomElement","namespaceURI","getLogicalNextSibling","siblings","permuteLogicalChildren","permutationList","listEntry","moveRangeStart","fromSiblingIndex","moveRangeEnd","marker","moveToBeforeMarker","insertBeforeNode","toSiblingIndex","parentDomNode","elementToMove","moveEndNode","nextToMove","nextNext","logicalElement","DocumentFragment","appendChild","parentLogicalNextSibling","previousSibling","logicalParent","lastChild","getCaptureIdAttributeName","referenceCaptureId","elementRefKey","selector","querySelector","getElementByCaptureId","deferredValuePropname","applyAnyDeferredValue","HTMLOptionElement","trySetSelectValueFromOptionElement","setDeferredElementValue","isMultipleSelectElement","setSingleSelectElementValue","setMultipleSelectElementValue","optionElement","selectElem","parentElement","findClosestAncestorSelectElement","isBlazorSelectElement","_blazorDeferredValue","sharedTemplateElemForParsing","createElement","sharedSvgElemForParsing","createElementNS","elementsToClearOnRootComponentRender","Set","interactiveRootComponentPropname","preserveContentOnDisposalPropname","BrowserRenderer","rootComponentIds","childComponentLocations","eventDelegator","hasInteractiveRouter","handleClickForNavigationInterception","absoluteInternalHref","performInternalNavigation","getRootComponentCount","attachRootComponentToLogicalElement","appendContent","isInteractiveRootComponentElement","markAsInteractiveRootComponentElement","attachComponentToElement","updateComponent","batch","edits","referenceFrames","ownerDocument","getRootNode","activeElementBefore","activeElement","applyEdits","HTMLElement","focus","disposeComponent","disposeEventHandler","currentDepth","childIndexAtCurrentDepth","arrayBuilderSegmentReader","editReader","frameReader","editsValues","editsOffset","offset","maxEditIndexExcl","count","editIndex","edit","diffReader","editsEntry","editType","prependFrame","frameIndex","newTreeIndex","frame","referenceFramesEntry","siblingIndex","insertFrame","removeFrame","setAttribute","applyAttribute","removeAttribute","attributeName","removedAttributeName","setOrRemoveAttributeOrProperty","updateText","textNode","Text","updateMarkup","insertMarkup","stepIn","stepOut","permutationListEntry","moveToSiblingIndex","permutationListEnd","frames","frameType","insertElement","text","insertText","attribute","insertComponent","region","insertFrameRange","subtreeLength","elementReferenceCapture","elementReferenceCaptureId","markup","namedEvent","elementName","newDomElementRaw","newElement","inserted","descendantsEndIndexExcl","descendantIndex","descendantFrame","childComponentId","textFrame","createTextNode","markupFrame","markupContainer","parsedMarkup","markupContent","innerHTML","content","querySelectorAll","oldScriptElem","newScriptElem","getAttributeNames","attribName","replaceChild","logicalSiblingIndex","firstChild","toDomElement","attributeFrame","attributeEventHandlerId","stripOnPrefix","attributeValue","startIndex","endIndexExcl","origChildIndex","countDescendantFrames","valueOrNullToRemove","endsWith","hasAttribute","substring","normalizeInputValue","tryApplyValueProperty","tryApplyCheckedProperty","tryApplySpecialProperty","applyInternalAttribute","internalAttributeNamePrefix","internalAttributeName","eventStopPropagationAttributeNamePrefix","eventPreventDefaultAttributeNamePrefix","isInteractive","setShouldPreserveContentOnInteractiveComponentDisposal","shouldPreserve","browserRenderers","interactiveRouterRendererId","programmaticEnhancedNavigationHandler","enhancedNavigationListener","testAnchor","shouldResetScrollAfterNextBatch","browserRenderer","getRendererer","renderBatch","arrayRangeReader","updatedComponentsRange","updatedComponents","updatedComponentsValues","updatedComponentsLength","referenceFramesValues","diff","updatedComponentsEntry","disposedComponentIdsRange","disposedComponentIds","disposedComponentIdsValues","disposedComponentIdsLength","disposedComponentIdsEntry","disposedEventHandlerIdsRange","disposedEventHandlerIds","disposedEventHandlerIdsValues","disposedEventHandlerIdsLength","disposedEventHandlerIdsEntry","scrollTo","callbackIfIntercepted","eventHasSpecialKey","defaultPrevented","anchorTarget","candidate","findClosestAnchorAncestorLegacy","findAnchorTarget","targetAttributeValue","canProcessAnchor","absoluteHref","toAbsoluteUri","isWithinBaseUriSpace","href","baseUriWithoutTrailingSlash","baseUri","lastIndexOf","nextChar","charAt","hasProgrammaticEnhancedNavigationHandler","performProgrammaticEnhancedNavigation","replace","relativeUri","getInteractiveRouterRendererId","hasRegisteredNavigationEventListeners","currentHistoryIndex","currentLocationChangingCallId","navigationCallbacks","popStateCallback","state","ignorePendingNavigation","callbacks","getInteractiveRouterNavigationCallbacks","hasLocationChangingEventListeners","_index","userState","delta","uri","navigateHistoryWithoutPopStateCallback","notifyLocationChanging","notifyLocationChanged","resolveCurrentNavigation","internalFunctions","listenForNavigationEvents","locationChangedCallback","locationChangingCallback","locationChanged","locationChanging","onPopState","history","internalDestinationHref","interceptedLink","enableNavigationInterception","setHasLocationChangingListeners","hasListeners","endLocationChanging","callId","shouldContinueNavigation","navigateTo","navigateToCore","refresh","forceReload","reload","getBaseURI","getLocationHref","scrollToElement","getElementById","scrollIntoView","skipLocationChangingCallback","absoluteUri","pageLoadMechanism","currentPageLoadMechanism","forceLoad","temporaryUri","replaceState","performExternalNavigation","replaceHistoryEntry","historyEntryState","hashIndex","hash","isSamePageWithHash","saveToBrowserHistory","performScrollToElementOnTheSamePage","pushState","oldPopStateCallback","go","intercepted","all","_internal","isBlazorWeb","domFunctions","preventScroll","SVGElement","focusBySelector","tabIndex","Virtualize","init","dotNetHelper","spacerBefore","spacerAfter","rootMargin","scrollContainer","findClosestScrollContainer","documentElement","style","overflowAnchor","rangeBetweenSpacers","createRange","isValidTableElement","display","intersectionObserver","IntersectionObserver","entry","isIntersecting","setStartAfter","setEndBefore","spacerSeparation","getBoundingClientRect","containerSize","rootBounds","intersectionRect","top","boundingClientRect","offsetHeight","bottom","root","observe","mutationObserverBefore","createSpacerMutationObserver","mutationObserverAfter","observersByDotNetObjectId","getObserversMapEntry","spacer","observerOptions","attributes","mutationObserver","MutationObserver","mutations","observer","disconnect","unobserve","HTMLTableElement","HTMLTableSectionElement","observers","dispatcherObserversByDotNetIdPropname","body","getComputedStyle","overflowY","dotNetHelperDispatcher","dotNetHelperId","PageTitle","getAndRemoveExistingTitle","titleElements","head","getElementsByTagName","existingTitle","currentTitleElement","InputFile","_blazorInputFileNextFileId","_blazorFilesById","fileList","file","lastModified","Date","toISOString","contentType","readPromise","blob","toImageFile","fileId","format","maxWidth","maxHeight","originalFile","getFileById","loadedImage","originalFileImage","Image","onload","revokeObjectURL","src","onerror","createObjectURL","resizedImageBlob","desiredWidthRatio","Math","min","desiredHeightRatio","chosenSizeRatio","canvas","round","getContext","drawImage","toBlob","readFileData","registeredLocks","NavigationLock","enableNavigationPrompt","onBeforeUnload","disableNavigationPrompt","getNextChunk","position","nextChunkSize","chunkBlob","slice","getChunkFromBlob","byteOffset","getChunkFromArrayBufferView","transmittingDotNetToJSStreams","forceLoadOrOptions","replaceIfUsingOldOverload","registerCustomEventType","aliasGroup","blazekit","loadComponents","log","hasWebAssemblyStarted","rootComponents","runtime","navigationManager","domWrapper","getJSDataStreamChunk","LogLevel","NullLogger","_logLevel","_message","instance","ConsoleLogger","minimumLogLevel","minLevel","logLevel","msg","Critical","Warning","warn","Information","discoverComponents","resolveComponentComments","sort","a","b","sequence","discoverServerComponents","blazorServerStateCommentRegularExpression","blazorWebAssemblyStateCommentRegularExpression","blazorWebInitializerCommentRegularExpression","discoverServerPersistedState","node","discoverBlazorComment","comment","captureName","nodeType","Node","COMMENT_NODE","parsedState","exec","groups","hasChildNodes","nodes","childNodeIterator","ComponentCommentIterator","next","currentElement","componentComment","getComponentComment","childResults","j","childResult","blazorCommentRegularExpression","RegExp","commentNodeIterator","candidateStart","payload","definition","Document","assertNotDirectlyOnDocument","parseCommentPayload","candidateEnd","iterator","prerenderId","validateEndComponentPayload","getComponentEndComment","validateWebAssemblyComponentPayload","uniqueId","nextUniqueDescriptorId","validateServerComponentPayload","createServerComponentComment","createAutoComponentComment","Number","isInteger","assembly","typeName","parameterDefinitions","atob","parameterValues","prerenderEndId","currentIndex","descriptorToMarker","canMergeDescriptors","source","locationHash","formattedComponentKey","TextMessageFormat","output","RecordSeparator","input","messages","pop","RecordSeparatorCode","String","fromCharCode","VERSION","Arg","val","match","Platform","isBrowser","isNode","isWebWorker","self","isReactNative","process","release","getDataDetail","includeContent","isArrayBuffer","view","str","num","formatArrayBuffer","sendMessage","logger","transportName","httpClient","headers","getUserAgentHeader","logMessageContent","responseType","response","post","timeout","withCredentials","statusCode","SubjectSubscription","subject","_subject","_observer","cancelCallback","_","_minLevel","out","userAgentHeaderName","constructUserAgent","getOsName","getRuntimeVersion","version","os","runtimeVersion","userAgent","majorAndMinor","platform","versions","getErrorString","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","write","parseHandshakeResponse","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","textData","HttpError","errorMessage","trueProto","super","__proto__","TimeoutError","AbortError","UnsupportedTransportError","transport","errorType","DisabledTransportError","FailedToStartTransportError","FailedToNegotiateWithServerError","AggregateErrors","innerErrors","MessageType","HubConnectionState","Subject","item","err","complete","subscribe","MessageBuffer","protocol","connection","bufferSize","_bufferSize","_messages","_totalMessageCount","_waitForSequenceMessage","_nextReceivingSequenceId","_latestReceivedSequenceId","_bufferedByteCount","_reconnectInProgress","_protocol","_connection","serializedMessage","writeMessage","backpressurePromise","_isInvocationMessage","backpressurePromiseResolver","backpressurePromiseRejector","BufferedItem","send","_disconnected","_ack","ackMessage","newestAckedMessage","sequenceId","_resolver","_shouldProcessMessage","Sequence","currentId","_ackTimer","_resetSequence","stop","_dispose","_rejector","Invocation","StreamItem","Completion","StreamInvocation","CancelInvocation","Close","Ping","Ack","_ackTimerHandle","setTimeout","clearTimeout","resolver","rejector","HubConnection","reconnectPolicy","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","statefulReconnectBufferSize","_nextKeepAlive","_freezeEventListener","_logger","isRequired","_statefulReconnectBufferSize","_reconnectPolicy","_handshakeProtocol","onreceive","_processIncomingData","onclose","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","Disconnected","_connectionStarted","_cachedPingMessage","connectionId","baseUrl","Reconnecting","_startPromise","_startWithStateTransitions","Connecting","_startInternal","Connected","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","transferFormat","features","reconnect","_sendMessage","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_messageBuffer","disconnected","resend","_resend","inherentKeepAlive","_cleanupPingTimer","startPromise","_stopPromise","_stopInternal","Disconnecting","_reconnectDelayHandle","_completeClose","_sendCloseMessage","_sendWithProtocol","_createCloseMessage","methodName","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","cancelInvocation","_createCancelInvocation","invocationId","invocationEvent","_launchStreams","_send","sendPromise","_createInvocation","on","newMethod","off","method","removeIdx","onreconnecting","onreconnected","_processHandshakeResponse","parseMessages","_invokeClientMethod","allowReconnect","responseMessage","getTime","_timeoutHandle","serverTimeout","_pingServerHandle","nextPing","invocationMessage","methods","_createCompletionMessage","methodsCopy","expectsResponse","res","exception","completionMessage","m","prevRes","arguments","_cancelCallbacksWithError","_reconnect","c","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","nonblocking","_createStreamItemMessage","argument","_isObservable","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","_retryDelays","retryContext","HeaderNames","Authorization","Cookie","HttpResponse","statusText","HttpClient","getCookieString","AccessTokenHttpClient","innerClient","accessTokenFactory","_innerClient","_accessTokenFactory","request","allowRetry","_accessToken","_setAuthorizationHeader","FetchHttpClient","fetchObj","_fetchType","_jar","obj","fetch","getGlobalThis","_abortControllerType","AbortController","abortObj","configureAbortController","abortSignal","aborted","abortController","onabort","abort","timeoutId","msTimeout","cache","credentials","mode","redirect","signal","ok","deserializeContent","status","XhrHttpClient","xhr","XMLHttpRequest","open","setRequestHeader","header","responseText","ontimeout","DefaultHttpClient","_httpClient","HttpTransportType","TransferFormat","_isAborted","LongPollingTransport","pollAborted","_pollAbort","_options","_running","isIn","_url","Binary","pollOptions","pollUrl","_closeError","_receiving","_poll","_raiseOnClose","deleteOptions","logMessage","ServerSentEventsTransport","accessToken","encodeURIComponent","eventSource","opened","EventSource","cookies","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_logMessageContent","_webSocketConstructor","_headers","token","webSocket","binaryType","_event","_webSocket","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","reason","HttpConnection","_stopPromiseResolver","_negotiateVersion","createLogger","_resolveUrl","WebSocket","_startInternalPromise","_sendQueue","TransportSendQueue","_stopError","_stopConnection","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","_createTransport","negotiateUrl","_resolveNegotiateUrl","negotiateVersion","connectionToken","useStatefulReconnect","_useStatefulReconnect","_createConnectUrl","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","join","ServerSentEvents","LongPolling","callStop","connect","actualTransport","transportMatches","transferFormats","s","aTag","pathname","searchParams","URLSearchParams","append","search","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","transportResult","_concatBuffers","arrayBuffers","totalLength","_rejecter","JsonHubProtocol","hubMessages","parsedMessage","_isStreamItemMessage","_isCompletionMessage","_isAckMessage","_isSequenceMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","HubConnectionBuilder","configureLogging","logging","isLogger","mapping","parseLogLevel","withUrl","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","withHubProtocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","isArray","withServerTimeout","milliseconds","_serverTimeoutInMilliseconds","withKeepAliveInterval","_keepAliveIntervalInMilliseconds","withStatefulReconnect","build","create","WebRendererId","_a","_b","_c","UINT32_MAX","setInt64","high","floor","low","setUint32","getInt64","getInt32","getUint32","TEXT_ENCODING_AVAILABLE","env","TextEncoder","TextDecoder","utf8Count","strLength","pos","charCodeAt","extra","sharedTextEncoder","TEXT_ENCODER_THRESHOLD","utf8EncodeTE","encodeInto","outputOffset","subarray","encode","utf8DecodeJs","bytes","inputOffset","units","byte1","byte2","byte3","unit","extendStatics","sharedTextDecoder","TEXT_DECODER_THRESHOLD","ExtData","__extends","d","setPrototypeOf","p","TypeError","__","DecodeError","_super","_this","proto","defineProperty","configurable","enumerable","timestampExtension","object","msec","sec","nsec","nsecInSec","rv","DataView","secHigh","secLow","encodeTimeSpecToTimestamp","decode","timeSpec","nsec30AndSecHigh2","concat","decodeTimestampToTimeSpec","ExtensionCodec","builtInEncoders","builtInDecoders","encoders","decoders","register","tryToEncode","context","encodeExt","decodeExt","defaultCodec","ensureUint8Array","isView","Encoder","extensionCodec","maxDepth","initialBufferSize","sortKeys","forceFloat32","ignoreUndefined","forceIntegerToFloat","reinitializeState","encodeSharedRef","doEncode","depth","encodeNil","encodeBoolean","encodeNumber","encodeString","encodeObject","ensureBufferSizeToWrite","sizeToWrite","requiredSize","resizeBuffer","newSize","newBuffer","newBytes","newView","writeU8","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","writeF32","writeF64","writeStringHeader","utf8EncodeJs","ext","encodeExtension","encodeArray","encodeBinary","encodeMap","writeU8a","_i","object_1","countWithoutUndefined","keys_1","keys_2","setUint8","setInt8","setUint16","setInt16","setInt32","setFloat32","setFloat64","setUint64","prettyByte","byte","abs","padStart","CachedKeyDecoder","maxKeyLength","maxLengthPerKey","hit","miss","caches","canBeCached","find","FIND_CHUNK","records_1","record","recordBytes","store","records","random","cachedValue","slicedCopyOfBytes","__generator","thisArg","y","t","label","sent","trys","ops","verb","n","v","op","done","step","__asyncValues","o","asyncIterator","__values","settle","__await","EMPTY_VIEW","EMPTY_BYTES","DataViewIndexOutOfBoundsError","getInt8","MORE_DATA","sharedCachedKeyDecoder","Decoder","maxStrLength","maxBinLength","maxArrayLength","maxMapLength","maxExtLength","keyDecoder","totalPos","headByte","setBuffer","bufferView","createDataView","appendBuffer","hasRemaining","newData","createExtraByteError","posToShow","RangeError","doDecodeSync","decodeMulti","decodeAsync","stream_1","stream_1_1","e_1","P","generator","decoded","e_1_1","return","fulfilled","rejected","decodeArrayStream","decodeMultiAsync","decodeStream","_arguments","isArrayHeaderRequired","arrayItemsLeft","stream_2","stream_2_1","e_2","e_3_1","e_3","readArraySize","q","resume","r","fulfill","__asyncGenerator","DECODE","readHeadByte","pushMapState","pushArrayState","decodeUtf8String","readF32","readF64","readU8","readU16","readU32","readU64","readI8","readI16","readI32","readI64","lookU8","lookU16","lookU32","decodeBinary","decodeExtension","array","keyType","readCount","headerOffset","stateIsMapKey","stringBytes","utf8DecodeTD","headOffset","extType","getUint8","getUint16","getInt16","getFloat32","getFloat64","BinaryMessageFormat","lenBuffer","sizePart","uint8Array","numBitsToShift","byteRead","numBytes","SERIALIZED_PING_MESSAGE","MessagePackHubProtocol","messagePackOptions","_errorResult","_voidResult","_nonVoidResult","_encoder","_decoder","_parseMessage","_writeInvocation","_writeStreamInvocation","_writeStreamItem","_writeCompletion","_writeCancelInvocation","_writeClose","_writeAck","_writeSequence","properties","messageType","_createInvocationMessage","_readHeaders","_createPingMessage","_createAckMessage","_createSequenceMessage","resultKind","streamInvocationMessage","streamItemMessage","cancelInvocationMessage","sequenceMessage","nativeDecoder","decodeUtf8","len","substrings","codepoint","uint64HighPartShift","pow","maxSafeNumberHighPart","readInt32LE","readUint32LE","readUint64LE","highPart","OutOfProcessRenderBatch","batchData","stringReader","OutOfProcessStringReader","OutOfProcessArrayRangeReader","OutOfProcessArrayBuilderSegmentReader","OutOfProcessRenderTreeDiffReader","OutOfProcessRenderTreeEditReader","OutOfProcessRenderTreeFrameReader","tableEntryPos","entryPos","batchDataUint8","stringIndex","readString","stringTableStartIndex","stringTableEntryPos","numUtf8Bytes","readLEB128","charsStart","utf8Data","arrayRange","_arrayBuilderSegment","arrayBuilderSegment","RenderQueue","nextBatchId","receivedBatchId","completeBatch","Debug","fatalError","Server","getLastBatchid","batchId","hasFailed","showErrorNotification","errorUi","onclick","dismiss","CircuitManager","componentManager","appState","_firstUpdate","_renderingFailed","_disposed","_circuitId","_applicationState","_componentManager","_renderQueue","_dispatcher","isDisposedOrDisposing","startCore","updateRootComponents","operations","startConnection","componentsJson","initialComponents","circuitHandlers","onCircuitOpened","hubProtocol","connectionBuilder","configureSignalR","resolveElement","readableStream","ReadableStream","controller","chunk","enqueue","processBatch","onAfterRenderBatch","onAfterUpdateRootComponents","_interopMethodsForReconnection","detachWebRendererInterop","reconnectionHandler","onConnectionDown","reconnectionOptions","unhandledError","some","onConnectionUp","throwIfDispatchingWhenDisposed","succeeded","sendLocationChanged","sendLocationChanging","sendJsDataStream","chunkSize","numChunksUntilNextAck","lastAckTime","valueOf","chunkId","nextChunkData","timeNow","msSinceAck","max","sendJSDataStream","sequenceOrIdentifier","jsAddedComponentContainer","parsedSequence","isNaN","resolveRootComponent","getRootComponentManager","getDisconnectFormData","FormData","circuitId","didRenderingFail","_disposePromise","sendDisconnectBeacon","navigator","sendBeacon","disposeCore","formData","onCircuitClosed","resolveOptions","userOptions","defaultOptions","initializers","maxRetries","retryIntervalMilliseconds","dialogId","DefaultReconnectDisplay","modal","cssText","link","reloadParagraph","loader","getLoader","after","show","failed","contains","visibility","currentAttempt","hide","errorDescription","errorInstructions","replaceChildren","animate","transform","duration","iterations","Infinity","UserSpecifiedDisplay","dialog","maxRetriesElement","MaxRetriesId","innerText","removeClasses","classList","ShowClassName","currentAttemptElement","CurrentAttemptId","HideClassName","FailedClassName","RejectedClassName","DefaultReconnectionHandler","overrideDisplay","reconnectCallback","_currentReconnectionProcess","_reconnectionDisplay","_reconnectCallback","_error","ReconnectionProcess","isDisposed","reconnectDisplay","attemptPeriodicReconnection","delayDuration","MaximumFirstRetryInterval","delay","durationMilliseconds","JSInitializer","singleRuntime","afterstartedCallbacks","webRendererId","afterStartedCallbacks","initializerFiles","initializerArguments","jsInitializer","adjustedPath","base","adjustPath","initializer","beforeStart","afterStarted","beforeWebAssemblyStart","afterWebAssemblyStarted","beforeServerStart","afterServerStarted","finalBeforeStart","WebAssembly","finalAfterStarted","runClassicInitializers","initializerModule","beforeWebStart","afterWebStarted","hasOnlyClassicInitializers","runLegacyInitializers","enableClassicInitializers","ensureInitializers","webAssembly","circuit","runMultiRuntimeInitializers","importAndInvokeInitializer","blazor","attached","getRendererAttachedPromise","initializersPromise","serverStartPromise","circuitStarting","setCircuitOptions","initializersReady","configuredOptions","setOptions","startServer","components","startServerCore","jsInitializersResponse","importInitializersAsync","fetchAndInvokeInitializers","cleanup","capture","once","invokeAfterStartedCallbacks","startCircuit","circuitStartingPromise","clearCircuitStarting","updateServerRootComponents","scheduleWhenReady","setPlatform","platformInstance","navigatorUA","brands","userAgentData","currentBrowserIsChromeOrEdge","brand","chrome","hasDebuggingEnabled","config","debugLevel","includes","BINDING","MONO","Module","dispatcher","MONO_INTERNAL","uint64HighOrderShift","currentHeapLock","getValueI32","ptr","getI32","monoPlatform","load","onConfigLoaded","dotnet","startOptions","validate","loadBootResource","resourceType","customSrc","absoluteSrc","importDotnetJs","moduleConfig","onConfigLoadedCallback","maxParallelDownloads","enableDownloadRetry","applicationEnvironment","environment","dotnetModuleConfig","loadedConfig","environmentVariables","globalizationMode","resources","extensions","onDownloadResourceProgress","setProgress","disableDotnet6Compatibility","print","printErr","prepareRuntimeConfig","applicationCulture","withApplicationCulture","withApplicationEnvironment","withResourceLoader","withModuleConfig","configureRuntime","createRuntimeInstance","mono","binding","setModuleImports","INTERNAL","mono_internal","getConfig","invokeLibraryInitializers","altKeyName","launchFirefoxDebugger","rel","click","launchDebugger","attachDebuggerHotkey","Blazor","getAssemblyExports","assign","dotNetExports","Microsoft","AspNetCore","Components","Services","DefaultWebAssemblyJSRuntime","assertHeapIsNotLocked","assemblyNameOrDotNetObjectId","serializedArgs","configureRuntimeInstance","callEntryPoint","runMain","mainAssemblyName","toUint8Array","dataPtr","getArrayDataPointer","HEAPU8","getArrayLength","getArrayEntryPtr","itemSize","getObjectFieldsBaseAddress","referenceTypedObject","readInt16Field","baseAddress","fieldOffset","getI16","readInt32Field","readUint64Field","heapU32Index","HEAPU32","getValueU64","readFloatField","getF32","readObjectField","readStringField","readBoolValueAsString","unboxedValue","unbox_mono_obj","conv_string","readStructField","beginHeapLock","MonoHeapLock","invokeWhenHeapUnlocked","enqueuePostReleaseAction","resourcesLoaded","totalResources","percentage","setProperty","suppressMessages","line","postReleaseActions","mono_wasm_gc_unlock","nextQueuedAction","mono_wasm_gc_lock","SharedMemoryRenderBatch","batchAddress","structLength","arrayValuesEntry","pointer","builder","builderFieldsAddress","arrayValues","WebAssemblyComponentAttacher","resolveRegisteredElement","parsedId","getParameterValues","getParameterDefinitions","getTypeName","getAssembly","getCount","platformLoadPromise","resolveBootConfigPromise","loadedWebAssemblyPlatform","started","firstUpdate","waitForRootComponents","bootConfigPromise","resolveInitialUpdatePromise","initialUpdatePromise","resolveInitializersPromise","startWebAssembly","opener","frameElement","settingsJson","sessionStorage","settings","redirect_uri","inAuthRedirectIframe","loadWebAssemblyPlatformIfNotStarted","middleware","renderer","addDispatchEventMiddleware","metadataDelta","ilDelta","pdbDelta","invokeJSJson","receiveWebAssemblyDotNetDataStream","heapLock","componentAttacher","api","getRegisteredComponentsCount","UpdateRootComponentsCore","elementSelector","beforeElementSelector","afterElementSelector","attachRootComponentToElement","hasStartedWebAssembly","finalOptions","existingConfig","withEnvironmentVariable","Event","hasLoadedWebAssemblyPlatform","callInfo","arg0","arg1","arg2","functionIdentifier","marshalledCallArgsJson","marshalledCallAsyncHandle","js_string_to_mono_string","__jsObjectId","resultJsonOrErrorMessage","bytesRead","streamController","receiveDotNetDataStream","attr","setAttributeNS","dataPermanentAttributeName","UpdateCost","Operation","ItemListSubset","callbackfn","currentEnhancedNavigationAbortController","navigationEnhancementCallbacks","performingEnhancedPageLoad","descriptorHandler","preprocessAndSynchronizeDomContent","destination","newContent","upgradeComponentCommentsToLogicalRootComments","synchronizeDomContentCore","destinationParent","startExclusive","isSynchronizingLogicalElements","originalNodesForDiff","newNodesForDiff","LogicalElementNodeList","SiblingSubsetNodeList","editScript","before","updateCost","commonPrefixLength","shorterLength","None","lengthOfCommonPrefix","skipCount","commonSuffixLength","beforeStartIndex","afterStartIndex","beforeIndex","afterIndex","lengthOfCommonSuffix","operation","Insert","Delete","unshift","Keep","Update","toEditScript","costs","beforeLength","afterLength","rowZero","comparisonResult","costAsDelete","costAsInsert","costAsRetain","Some","Infinite","MAX_VALUE","computeOperations","computeEditScript","domNodeComparer","destinationWalker","sourceWalker","LogicalElementEditWalker","DomNodeEditWalker","treatAsMatch","current","advance","editsLength","treatAsSubstitution","nodeToRemove","nodeToDelete","createDocumentFragment","treatAsInsertion","endAtNodeExclOrNull","endExclusive","TEXT_NODE","destinationAsLogicalElement","sourceAsLogicalElement","destinationRootDescriptor","sourceRootDescriptor","sourceWebAssemblyData","sourceServerData","mergeDescriptors","ELEMENT_NODE","editableElementValue","selectedIndex","destAttrs","sourceAttrs","destAttrsLength","sourceAttr","destAttr","attributeSetsAreIdentical","remainingDestAttrs","existingDestAttr","getAttributeNodeNS","localName","getAttributeNode","attrToDelete","removeAttributeNS","synchronizeAttributes","isDataPermanentElement","ensureEditableValueSynchronized","DOCUMENT_TYPE_NODE","nextNode","insertLogicalChildBefore","createNodeIterator","NodeFilter","SHOW_COMMENT","logicalRootDescriptor","referenceNode","registerComponent","rootDescriptorA","rootDescriptorB","elementB","serverDescriptors","webAssemblyDescriptors","autoDescriptors","allDescriptors","startNode","currentContentUrl","attachProgressivelyEnhancedNavigationListener","onDocumentClick","onDocumentSubmit","performEnhancedPageLoad","closestOverride","closest","enhancedNavigationIsEnabledForElement","formElem","HTMLFormElement","form","enhancedNavigationIsEnabledForForm","action","fetchOptions","submitter","formAction","notifyEnhancedNavigationListners","responsePromise","isNonRedirectedPostToADifferentUrlMessage","onInitialDocument","onStreamingElement","frameBoundary","allResponseText","isFirstFramedChunk","pipeThrough","TextDecoderStream","frameBoundaryMarker","TransformStream","part","flush","splitStream","pipeTo","WritableStream","streamingElementMarkup","fragment","createContextualFragment","getResponsePartsWithFraming","initialContent","isGetRequest","isSuccessResponse","retryEnhancedNavAsFullPageLoad","redirected","externalRedirectionUrl","responseUrl","currentContentUrlParsed","host","port","isForSamePath","responseContentType","parsedHtml","DOMParser","parseFromString","documentUpdated","replaceDocumentWithPlainText","hashPosition","targetElem","enhancedNavigationCompleted","docStyle","fontFamily","whiteSpace","padding","enableDomPreservation","BlazorStreamingUpdate","connectedCallback","blazorSsrElement","HTMLTemplateElement","componentIdAsString","docFrag","markers","expectedStartText","startMarker","expectedEndText","endMarker","findStreamingMarkers","destinationRoot","existingContent","setStart","setEnd","deleteContents","insertStreamingContentIntoDocument","destinationUrl","isFormPost","WebRootComponentManager","_circuitInactivityTimeoutMs","_rootComponentsBySsrComponentId","_seenDescriptors","_pendingOperationBatches","_nextOperationBatchId","_nextSsrComponentId","_didWebAssemblyFailToLoadQuickly","_isComponentRefreshPending","rootComponentsMayRequireRefresh","circuitMayHaveNoRootComponents","onDocumentUpdated","onEnhancedNavigationCompleted","startLoadingWebAssemblyIfNotStarted","ssrComponentId","unregisterComponent","loadWebAssemblyPromise","onWebAssemblyFailedToLoadQuickly","bootConfig","cacheBootResources","getWebAssemblyResourceHash","existingHash","localStorage","getItem","areWebAssemblyResourcesLikelyCached","setItem","cacheWebAssemblyResourceHash","startCircutIfNotStarted","refreshRootComponents","rendererHasExistingOrPendingComponents","_circuitInactivityTimeoutId","disposeCircuit","rendererHasComponents","descriptorTypesToConsider","assignedRendererId","operationsByRendererId","determinePendingOperation","batchJson","updateWebAssemblyRootComponents","operationsJson","scheduleAfterStarted","resolveRendererIdForDescriptor","getAutoRenderMode","startWebAssemblyIfNotStarted","uniqueIdAtLastUpdate","hasPendingRemoveOperation","JSEventRegistry","_eventListeners","listenersForEventType","ev","rootComponentManager","hydrated","registerHydrationEvents","requestIdleCallback","Trace","replaceAndRunScript","oldScript","newScript","attrs","replaceWith","boot","initialCircuitOptions","initializersElement","resolveConfiguredOptions","setWebAssemblyOptions","descriptors","registerAllComponentDescriptors","ssr","circuitInactivityTimeoutMs","jsEventRegistry","disableDomPreservation","customElements","define","attachStreamingRenderingListener","onInitialDomContentLoaded","currentScript"],"sourceRoot":""}