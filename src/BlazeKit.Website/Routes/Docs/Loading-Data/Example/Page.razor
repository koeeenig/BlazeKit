@using BlazeKit.Web
@using BlazeKit.Web.Components
@using System.Diagnostics
@using BlazeKit.Web.Utils
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Authentication
@inherits PageComponentBase<SwapiPageData>
@code {

    private const bool prerender = true;

    protected override async Task<SwapiPageData> ServerLoadAsync(Uri route, Response? response)
    {
        Debug.WriteLine($"Page Load called for '{route}'.");
        var person = route.Param("person", "1");

        // Modify response headers. This only has effect when SSR is used.
        // If the app is statically generated, the http context will be null and the code will not be executed.
        response?.SetHeader("cache-control", "public, mag-age=120");
        response?.SetCookie("bkit", "1234", new CookieOptions()
        {
            HttpOnly = true,
            SameSite = SameSiteMode.Strict
        });
        // return response?.Redirect<SwapiPageData>("/docs/routing");
        
        SwapiPageData result;
        using (var http = new HttpClient())
        {
            Debug.WriteLine($"Load data from SWAPI");
            http.BaseAddress = new Uri("https://swapi.dev/api/");
            var res = await http.GetAsync($"people/{person}");
            res.EnsureSuccessStatusCode();
            var json = System.Text.Json.JsonSerializer.Deserialize<Person>(await res.Content.ReadAsStringAsync());
            Debug.WriteLine($"Got response");
            result = new SwapiPageData(json, DateTime.Now);
        }
        return result;
    }


}

<h1>PageLoad</h1>
<BlazeKit.Website.Islands.Components.LoadTest Client="@(Hover)"></BlazeKit.Website.Islands.Components.LoadTest>
<BlazeKit.Website.Islands.Components.NewCounter Client="@Hover" InitialCount="1337" />
