@code {
    public VMCounter ViewModel { get; set; }

    public Page()
    {
        ViewModel = new VMCounter(this);
    }

    private MarkupString AsHtml(string code)
    {
        return new MarkupString(code);
    }
}
<h1>MVVM</h1>
<p>You can even use a MVVM pattern if you like üëç</p>
<article>
    <p>Counter: @ViewModel.Counter.Value</p>
    <button role="button" @onclick:preventDefault="true" @onclick="() => ViewModel.Increment()">Increment</button>
    <button role="button" @onclick:preventDefault="true" @onclick="() => ViewModel.Decrement()">Decrement</button>
</article>
<h3>Code Example</h3>
<pre>
    <code class="language-cshtml-razor">
    @@code {
        public VMCounter ViewModel { get; set; }

        public Page()
        {
            ViewModel = new VMCounter(this);
        }
    }
    </code>
    </pre>
<pre>
<code class="language-csharp">
        @AsHtml(@"
public class VMCounter
{
    public ISignal<int> Counter { get; set; }
    public bool Started { get; private set; }

    public VMCounter(IReactiveComponent component)
    {
        this.Counter = new State<int>(0, component);
    }

    /// <summary>
    /// Increments the counter
    /// </summary>
    public void Increment()
    {
        this.Counter.Value++;
    }
    /// <summary>
    /// Decrements the counter
    /// </summary>
    public void Decrement()
    {
        this.Counter.Value--;
    }

    public void StartBackgroundTask()
    {
        if (!Started)
        {
            Task.Run(async () =>
            {
                while (true)
                {
                    Counter.Value++;
                    await Task.Delay(1000);
                }
            });
            Started = true;
        }
    }
}
").Value
    </code>
</pre>
