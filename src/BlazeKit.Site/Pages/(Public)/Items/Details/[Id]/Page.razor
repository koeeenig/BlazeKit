@using BlazeKit.Reactive.Signals;
@using BlazeKit.Reactive;
@using BlazeKit.Reactive.Blazor;
@using System.Text.Json.Nodes;

@code {

    // Defice a record type for the api response
    record Person(string name);

    [Inject]
    public NavigationManager Router { get; set; }

    private ISignal<Person> person;
    private ISignal<int> computed;
    private ISignal<bool> loading;
    public Page()
    {

    }
    protected async override Task OnInitializedAsync()
    {
        this.loading = State.New(true, this);
        person = Signal.New(new Person(""));
        computed = Derived.New(() =>
        {
            Console.WriteLine($"Persons Name: {person.Value.name}");
            return this.person.Value.name.Length;
        },this);

        Console.WriteLine($"Param: '{Id}'");

        using (var http = new HttpClient()) {
            var response = await http.GetStringAsync($"https://swapi.dev/api/people/{Id}");
            var person = System.Text.Json.JsonSerializer.Deserialize<Person>(response);
            Console.WriteLine($"Fetched Person: {person.name}");
            this.person.Value = person;
        }

        this.loading.Value = false;
    }

    private void Go()
    {
        Router.NavigateTo($"/items/details/{Id}", forceLoad: true);
    }
}
<p>This route uses nested layouts and route parameters.</p>
<p>The layout for <strong>Pages/(Public)/Items/Details/[Id]/Page.razor</strong> is composed from:</p>
    <ul>
    <li><i>Pages/(Public)/Items/Details/Layout.razor</i></li>
    <li><i>Pages/(Public)/Items/Layout.razor</i></li>
    <li><i>Pages/(Public)/Layout.razor</i></li>
    <li><i>Pages/Layout.razor</i></li>
</ul>
<pre>
    <code>
    Pages/
    │ (Public)/
    │ ├ Items/
    │ │ ├ Details/
    │ │ │  ├ [Id]
    │ │ │  │ └ Page.razor
    │ │ │  └ Layout.razor
    │ │ └ Layout.razor
    │ └ Layout.razor
    ├ Page.razor
    └ Layout.razor
    </code>
</pre>

<p>Route Param Id: @Id</p>

<article>
    <input type="number" Placeholder="" @bind-value="@Id" @bind-value:event="oninput" />
    <button @onclick="Go">Go</button>
    <small>Navigation is done with <code>forceLoad</code> option from <code>NavigationManager</code></small>
<When Condition="@(() => !loading.Value)">
    <ChildContent>
            <p>Name: @person.Value.name</p>
            <p>Name length: @computed.Value</p>
    </ChildContent>    
    <Else>
        <p>Fetching <i>https://swapi.dev/api/people/<span>@Id</span> </i> .... Please wait 🕐</p>
    </Else>
</When>
</article>




